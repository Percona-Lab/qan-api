// Code generated by go-bindata.
// sources:
// migrations/sql/01_init.down.sql
// migrations/sql/01_init.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x28\x49\x4c\xca\x49\x55\x28\x2c\x4d\x2d\xca\x4c\x2d\xb6\xe6\x02\x04\x00\x00\xff\xff\x83\xb1\x39\x71\x14\x00\x00\x00")

func _01_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initDownSql,
		"01_init.down.sql",
	)
}

func _01_initDownSql() (*asset, error) {
	bytes, err := _01_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init.down.sql", size: 20, mode: os.FileMode(420), modTime: time.Unix(1540215291, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __01_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x98\xcf\x6e\xdb\x38\x10\x87\xef\x7e\x0a\xde\x12\x03\x41\xb1\x4d\x16\x45\x7b\xe8\xc1\x69\x94\xd6\x40\x62\x77\x6d\x2d\xba\x3e\xb1\x8c\x34\x91\xb9\x91\x28\x95\xa4\x1a\x7b\x9f\x7e\x21\x51\x96\xf9\x67\xa8\xdc\xe2\xf9\x7e\x21\xbf\xa1\x45\x46\xe1\x97\x4d\xb2\x48\x13\x92\x2e\x6e\x1f\x12\xf2\xab\x05\xc9\x41\x91\xcb\x19\x21\x39\x2f\x40\x69\xb2\xd5\x92\x8b\xe2\x6a\x2c\x50\x0d\x07\xa7\xfa\x44\x15\xc8\xdf\x20\xbd\x5a\xb6\x87\x8a\xb9\xb5\x56\x81\x14\xac\x02\xab\x9a\x95\x1c\x84\xa6\xfb\xda\x99\xe9\x67\xc9\x9e\xa0\x54\xef\x5e\xe0\xf8\x93\x2c\xa4\x64\xc7\x4b\x03\xe7\x36\xfd\xcd\xca\x16\x10\xce\x8a\x6e\xc8\xb6\xe5\xb9\x35\x64\x03\x92\xd7\x39\x55\x9a\x49\x4d\xee\x98\x86\x94\x57\x60\x81\x12\x44\xa1\xf7\xe4\xef\xa5\xd0\x1f\xbb\x32\x1c\x58\xd5\x94\xb6\xea\x50\xa1\xcf\xb5\xac\x98\x26\x89\x68\xab\x8f\x97\x17\xc9\x3f\x8b\xc7\xef\x0f\xc9\x05\xf9\x4c\xfe\xb8\x22\x17\x77\xcb\xaf\xc9\x36\xed\x3e\xbd\xef\x5d\xb8\xa2\x5a\xb6\x22\x63\x1a\xf2\x60\x70\xaa\x8f\x0d\x0c\x03\xcd\x08\x21\xe4\x62\xb3\x58\xdd\xad\x1f\xcd\x60\xa6\xb2\x7d\x58\xff\x38\x8d\x38\x94\xee\x17\xdb\x74\x28\x5d\x0f\xa5\x1f\xcb\xf4\x1b\x4d\x36\x9b\xf5\xa6\xab\xde\xcc\x08\x99\xdb\xf3\x54\xa0\x25\xcf\x94\xd5\x8c\x68\x2b\xda\x7d\xd9\x47\xfa\xca\xf5\x9e\xbe\x32\x29\xb8\x28\x54\xaf\xf8\xe1\xcf\x7e\x95\x4f\xb5\x77\x59\x9d\x63\xcb\x6c\x07\x5a\xa1\x4f\x09\x33\xc2\x1c\x99\x04\xa4\xac\xa5\x33\x85\xa9\x44\x27\x18\xf1\xf4\xf0\xdd\x03\x7b\x1e\xb4\xa2\x7f\xf5\x53\x6a\x5e\x01\xcd\x84\xee\xd1\xcd\x75\x80\x54\x5b\x91\xfb\xb2\x66\x18\xab\xb8\x88\x33\x76\x88\xb2\xe6\xd3\xa7\x28\xdb\x17\x56\x07\x37\xd7\x73\x13\x78\xa8\xb3\x17\x5c\xf5\x4c\x02\xd3\x33\x0a\x44\x2d\xe4\x7b\x9e\x51\xa0\x79\x46\xa3\xe5\xc0\x07\xcd\x4d\xfd\xaa\xa8\xea\xb6\xd5\x49\xf3\xb4\xd8\x67\xd2\x69\xe2\xa4\xb3\x8c\x10\x76\x88\x90\xce\x11\x27\xce\x42\x0e\x8f\xc2\xc0\xbb\xe7\x9d\x0b\xc8\x71\xcb\x91\xa2\xa6\x23\x45\x6d\xcf\x14\x33\x1e\x29\x6a\x3d\xd2\x09\x73\xf6\xfc\x0c\x99\x8e\x99\x8f\x14\x35\x1f\x29\x6a\x7e\xa6\x98\xf9\x48\x51\xf3\x91\x4e\x98\x4b\x60\x11\xeb\x9e\xa0\xc6\x3d\x41\x6d\x0d\xc1\x4c\x7b\x82\x5a\xf6\x04\x37\x7c\x04\x59\x00\x6d\x98\x52\xa0\x02\x49\x07\xfa\x9e\x0e\xf4\x55\x5d\xe8\xd9\x3a\xd0\x17\x76\x20\xee\xbc\x14\xa2\xbe\xbb\xa5\xcb\x35\x95\xb4\x6e\x42\x6d\x9f\xfb\xe6\x3e\xf7\xe5\x03\xee\xf9\xfb\xdc\x6f\xc1\xe7\x6f\x77\xf1\x74\xd4\xc8\xf2\x87\x89\xa9\x4e\x4c\x62\xaa\x97\x21\x31\xd1\x8d\x49\x4c\xf5\x63\x12\x6f\x77\xf4\xca\xb8\x39\x0a\x9d\x63\x34\x48\x04\x27\x77\x90\x08\x0e\xf0\x30\xe1\x9f\xe3\x41\x22\x38\xce\x83\x44\xe4\x54\x1f\x72\x12\x32\x5a\x76\x7f\x01\x26\xbb\x72\x53\xb1\xce\xdc\x54\xac\x3b\x2f\x15\xe9\xd0\x4d\xc5\xba\x74\x53\xd3\x9d\xfe\x6a\xa1\x85\xe9\x36\xad\x48\xac\x47\x2b\x12\x6b\xd0\x8e\x44\xba\xb3\x22\xb1\xd6\xac\xc8\x74\x5f\x0d\x2b\x40\xd1\x9c\x2b\xcd\x45\x16\xfe\x8d\xc6\x53\x91\xdd\xe6\xa5\x22\x3b\xce\x4f\xe1\xbb\xce\x4b\x45\x76\x9e\x97\xc2\x77\x9f\x79\x93\x32\x6f\xe9\x41\x83\x0e\xf4\xfb\x72\xa0\xdf\x8e\x0b\xbd\x2e\x1c\xe8\xcb\x3b\x10\x77\xbe\x35\xa7\x1a\xf6\xda\x64\x21\xdf\xd7\x42\xbe\xad\x8d\x3c\x57\x0b\xf9\xa6\x16\xc2\x3d\xd3\xaa\xa1\x9a\x3d\x95\xc8\x21\x6d\x21\xdf\xd3\x42\xbe\xa7\x8d\x3c\x4f\x0b\xf9\x9e\x16\x8a\x7b\xe6\x5c\xbd\x4c\xc9\xda\x1c\x33\xb6\x39\xa6\xed\x70\xc4\xdd\xe6\x58\x03\x36\x7f\x63\xb5\xa9\xe2\xff\x4d\x2d\xf9\xc0\xa3\xeb\x3e\xf0\xe8\xe2\x9f\x78\xec\x1b\x18\x78\xf4\x6b\x18\x78\x64\x3f\x7e\xa1\xdf\x78\xf8\xf0\xde\xb7\x65\x49\x55\xc6\x04\x4e\xfe\xad\x79\x48\xac\x09\xa3\xa4\x16\x66\x65\x83\x51\x79\x09\xaa\x96\x88\xc8\x09\xc4\x7e\x73\x0b\x25\x64\x9a\x3e\x77\x5a\x92\x89\x02\x70\xb9\x21\x66\x12\x93\x30\xdb\x43\x86\x4c\xd3\x39\x44\x7e\xbb\x47\xfd\xff\x35\x18\x41\x57\x71\x55\x53\x2e\x72\x38\xd0\x56\x21\xff\x0e\xac\x6a\x5a\xd4\x75\x1e\x8f\x14\xb2\x51\xda\xbe\xa9\x29\x64\xc3\x87\xe7\xef\xfd\x87\xab\xe1\x72\x85\x0b\x6d\x5f\xbd\x18\x38\xb7\xa9\x73\xf5\x32\xf0\xd9\x9c\x24\xab\xaf\xcb\x55\x42\x3e\x93\xfe\x35\x37\x95\x00\xe4\xfb\x62\x93\x2e\xd3\xe5\x7a\x45\x6e\x77\x44\xd7\xbb\xdd\x6e\xf7\xf8\x78\x69\xdf\xc6\xcc\x67\xeb\xcd\x5d\xb2\x21\xb7\xbb\x19\x21\xe6\x1e\xc4\xdc\x34\x5d\x99\x9f\x4f\xf7\x4b\xe3\xc7\xd3\x35\xd2\x99\xf7\x77\x4d\xe6\xa3\x75\xa1\x64\x0a\xf6\x54\x33\x42\xe6\xb3\xff\x03\x00\x00\xff\xff\x9f\xa5\x74\x0c\xf1\x12\x00\x00")

func _01_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initUpSql,
		"01_init.up.sql",
	)
}

func _01_initUpSql() (*asset, error) {
	bytes, err := _01_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init.up.sql", size: 4849, mode: os.FileMode(420), modTime: time.Unix(1540212068, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_init.down.sql": _01_initDownSql,
	"01_init.up.sql": _01_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"01_init.down.sql": &bintree{_01_initDownSql, map[string]*bintree{}},
	"01_init.up.sql": &bintree{_01_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

