// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/sql/01_init.down.sql (20B)
// migrations/sql/01_init.up.sql (9.637kB)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x28\x49\x4c\xca\x49\x55\xc8\x4d\x2d\x29\xca\x4c\x2e\xb6\xe6\x02\x04\x00\x00\xff\xff\x6b\xf9\xb4\xa3\x14\x00\x00\x00")

func _01_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initDownSql,
		"01_init.down.sql",
	)
}

func _01_initDownSql() (*asset, error) {
	bytes, err := _01_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf5, 0xb9, 0x22, 0xf, 0xca, 0x89, 0xa5, 0x5, 0xf2, 0xed, 0x48, 0xd7, 0xe0, 0x9d, 0xec, 0x2, 0xab, 0x87, 0xf3, 0x9d, 0x3d, 0x5a, 0x71, 0x39, 0xe, 0x4a, 0x88, 0xde, 0x1d, 0x0, 0x1d, 0x4e}}
	return a, nil
}

var __01_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x5a\x4d\x73\xdb\x38\xd2\xbe\xfb\x57\xf4\xcd\x76\x95\x3c\xf5\xbe\x33\x5b\xbb\x93\x49\xcd\x41\xb6\xe8\x44\x5b\xfa\x70\x24\xcd\xce\xf8\xc4\xc0\x64\x4b\xc4\x9a\x04\x14\x00\x8c\xac\xfc\xfa\x2d\x7c\x90\x04\x49\x50\x52\x32\xa7\x44\xea\x07\x4f\xe3\xe9\x6e\x00\x0d\x58\x0f\xab\x68\xbc\x89\x60\x33\xbe\x9f\x45\x30\x7d\x84\xc5\x72\x03\xd1\x5f\xd3\xf5\x66\x0d\x05\x2a\x41\x13\x79\x75\x73\x05\x00\x70\x77\x07\x73\x42\x19\xa4\xb4\x40\xa6\x28\x67\xd2\x7c\xfd\xa5\x44\x71\xa4\x29\xac\x95\xa0\x6c\x07\x0f\xcb\xf9\x3c\x5a\x6c\xe0\x3a\x23\x32\x03\xbe\xb5\x76\xd8\x52\xb6\x43\xb1\x17\x94\xa9\xeb\x91\x19\x27\x51\x7c\x45\xd1\x1b\x36\x7d\x02\x2e\x20\xe3\x52\x31\x52\xa0\x26\x98\xdc\x3b\xac\x1b\x98\x12\x45\x5e\x88\xc4\xde\xd0\x27\x2e\xd5\x4e\xe0\xfa\xd3\xec\xb7\x1a\x54\x39\x4b\x32\x2c\x48\x6f\xc4\xfc\xd8\x02\xbf\x07\x9f\xc2\x8e\x71\x04\xa5\x44\x61\x26\xd4\xa5\x48\x72\x8a\x4c\x19\x3b\x68\x80\xc3\xdb\xaf\x63\xad\x63\x68\x48\x5b\xa9\x1b\x77\x77\x07\xb0\x56\x84\xa5\x44\xa4\x90\x93\x17\xcc\x6d\x94\x05\xee\x73\x9a\x10\x1d\xf6\x58\x62\x9f\x73\xe1\x82\xe5\xe1\x40\xa2\xaa\x67\x53\x4a\x15\x08\xf6\x83\xfb\xde\x9b\x80\x0e\x35\x4d\x30\x56\xc7\x7d\x5f\xec\x46\x7f\xc9\xb7\x15\xc8\x0d\x41\xf6\x95\x0a\xce\x74\x55\xf4\x46\x44\x9e\xcd\xf3\x42\xbe\xf5\x90\xe3\xaf\x84\xe6\xe4\x85\xe6\x54\x1d\xe1\x1b\x67\x15\x54\xe0\x4e\x8b\xe9\xc2\x57\xf6\x6b\x8f\x93\xf1\x14\xe3\x82\xa7\x98\xf7\xa3\xc3\x53\x04\x63\xaa\x02\xc2\x99\x22\x94\xa1\x88\x83\x49\x7d\xa8\xcc\xd0\x4e\xcd\x43\x29\x15\x2f\xfc\xbc\x7c\xb6\xff\xff\xe9\x15\x8f\x9f\x61\x2c\x04\x39\xde\x58\xb2\x5b\x8f\xcd\x1f\x65\x18\xa5\xa3\xac\x46\x7f\x25\x79\x89\x17\x8e\x37\xd8\x8a\x80\xec\x74\x95\x05\x56\xdf\x34\xd5\x6b\x74\x4b\x51\xe8\x7c\x19\x18\xa8\x8c\x28\x48\x78\x9e\x63\xa2\x80\xb0\x14\x24\xb2\xb4\x5a\xe4\x2d\x42\x93\xfc\x88\x95\xc5\xaf\x37\xd7\xe3\x0f\xd1\x62\x13\x6f\x9e\x9f\xa2\x78\xba\xf8\xcf\x78\x36\x9d\x5c\xc3\xef\xf0\x7f\x23\xb8\xfe\x34\x5e\xc4\xf3\xe7\xf5\xa7\x59\xfc\x14\xad\x1e\xd7\x0f\x1f\xa3\xf9\x38\x36\x70\x8d\xf8\x67\x0b\xb1\x9e\x2d\xff\x9c\x2d\x3f\x34\xe6\x7f\x55\xe6\xe5\xe2\xc3\x72\x72\x1f\x3f\xad\x96\x8f\xd3\x59\xb4\x6a\x10\xbf\x7a\x21\x18\x1b\x01\xa6\xfc\x5a\x2a\xf8\xb6\x9a\xff\x6f\x20\x73\x7e\xc8\xf9\x6e\x04\x7b\x14\x5b\xb7\x7a\x47\x80\x2a\xf9\xc9\x69\xdb\xa3\xa0\x3c\x8d\xa5\x22\x42\xc1\x84\x28\xdc\xd0\x02\xbd\xe2\xd6\x9f\x0e\x19\xb2\x8a\x5d\xd7\x17\xdf\xc2\x4b\x99\xbc\xa2\x02\x33\x0c\xd3\x36\x57\x8e\x6c\xa7\x32\xf8\x63\xca\xd4\x2f\x3f\x37\x54\x93\x52\x90\x6a\xb8\x47\x66\x99\x1c\x83\xb7\x23\xf6\xb2\x57\x1c\xe5\x97\x1c\x52\xba\x43\xa9\x62\x85\x6f\xea\xbd\xdb\x46\x0f\x54\x65\xbc\x54\x66\xc7\xaa\x56\xdf\x1b\x29\xf6\x79\xbf\x86\x97\x0c\x9b\xed\xb7\x02\x6d\x05\x2f\xf4\xbe\x00\x5b\x5e\xb2\x14\x68\x67\x4e\x0e\x16\x6f\xb9\x28\x88\xaa\x2a\x20\xfa\x6b\x3c\x7f\x9a\x45\xf1\xe3\x72\x35\x1f\x6f\xba\x55\xe0\xac\xfa\xe3\xff\x8f\xe0\xfa\x71\xba\xf8\x10\xad\x9e\x56\x53\x9b\xc4\x9f\xbd\x24\x4e\x59\xaa\xb7\x26\x94\xed\x1c\x0a\x24\x79\x7b\x9a\x12\xa8\x84\xbd\xe0\x19\x7d\xa1\x4d\xc8\xa9\x8c\x95\x28\x99\x66\x48\x4d\xc4\x7f\x0d\x51\xd3\x6d\x80\x4b\x71\x0e\x39\x67\x3b\x53\xf5\x07\x22\xa1\x26\xea\x08\xf7\x0b\xbf\x92\x1d\x2a\xfd\xd5\x78\x31\x59\xce\x2b\xcd\xba\xb8\xa3\xb5\xd5\xab\x43\x30\x5e\x6f\xdc\xc7\x5f\x46\x70\xfd\xe7\x74\xf3\x31\x8e\x56\xab\xe5\x4a\x7f\xf3\x8f\x60\x40\x0e\x3a\x20\xed\x54\xe9\x69\xee\x69\xf2\x8a\x29\x94\xfb\xce\x34\x5d\xcd\xf7\xcf\x33\xf7\x7d\x2f\xef\x94\xc1\xbf\xd7\xcb\x05\xd8\xc4\x56\x0b\x82\x95\x45\xac\x71\x14\x65\xac\x2b\x2b\x3e\x10\xc1\x28\xdb\x49\x78\xcc\x39\x69\x55\xf4\x47\x7e\x80\x82\xb0\x23\x38\xbc\x99\x9e\x1e\x03\xf5\x98\x6e\x31\x7d\xae\x2c\x3f\x25\x3c\xad\x77\x37\xbb\x54\xbc\x20\xcc\xa8\x34\xeb\xb8\x42\x07\x46\x97\x4c\x55\xc3\xdd\xc4\xfc\xdd\x51\x9b\x35\x01\x92\xe4\xc4\x6c\x7a\x5a\x51\x08\x2e\xbe\x4b\xa9\x19\xd1\x97\x69\x89\x2e\x13\x39\x23\x52\x69\xcf\x8c\xf7\x46\x7f\x87\xc8\x86\xe5\x94\xcc\xbe\xb4\x71\x61\x68\x2a\x3b\x65\xa0\x32\x2a\xdb\x04\x77\x77\x75\xdb\xa7\x3f\x5a\xb6\x63\xac\x68\x81\x71\xc2\x54\x9f\x74\x93\xa1\xde\x1b\x15\x9a\x33\x1e\xdf\x30\x29\xcd\x66\xa7\x47\x68\x17\x12\x13\xce\x52\x1b\xc6\x02\xeb\xda\x6b\x11\xcb\xb2\xf8\x61\xe2\x20\x61\x41\x59\x9f\x70\x5d\x90\x3c\x47\xa9\xec\x11\x5a\x2f\x92\xb8\x22\x6c\xc5\xa1\x4d\x47\xde\xfa\x74\xf7\x74\xb7\xfb\x21\xb6\xfd\xbb\x77\x7d\xb6\x77\xef\xf4\x99\x92\xe8\x53\x3b\x37\x6c\x97\xd1\xe6\x3c\x79\xed\x25\xa7\x6f\x1c\x0c\xb0\xa1\x55\x1c\x48\xf2\xa5\xa4\x02\x41\x0f\x91\xc1\xe8\x36\x64\x5e\x70\x03\xc6\x26\x54\x7d\xa3\xa7\xbc\x32\x0a\x7e\x90\xb1\xd4\x4d\x47\x40\x40\x63\x1c\x14\xc0\xca\xe2\xc5\x36\x39\x1a\xac\x5b\x1a\xa5\xf5\xa8\x0c\x5d\x0f\xde\x28\x68\xd8\x02\x0a\x3c\x63\x5f\x41\x63\x1c\x52\xa0\x37\x5a\xca\x30\x1d\x54\x51\x03\x82\x4a\x16\x1d\x15\x09\x61\x0c\x53\xb8\x83\x75\x34\x8b\x1e\x36\x1d\x0d\x35\xd7\x90\x8e\x06\x30\xa0\xa5\x06\x0c\xe9\x21\xdb\x2d\x26\xea\x84\x9e\x1a\x70\x89\x9e\x24\x23\x6c\x67\xf4\xfc\xf1\x34\x19\x6f\xa2\x11\x4c\xa2\x59\xa4\xff\x9d\x2e\xd6\xd1\xaa\xab\xaf\xe6\x1e\xd2\xd7\x00\x06\xf4\xd5\x80\x21\x7d\x02\xc9\xb0\x36\x63\xbc\xb4\xe2\x34\xd8\xf6\x55\x8a\xbc\xe4\x28\x3b\x5a\x0c\xd7\x90\x0e\x6b\x1c\xd0\x60\x8c\x81\xf9\x17\x28\x76\x18\xef\x89\x94\x28\x43\x12\x5a\xf6\x0b\x54\x18\x3c\x58\xbc\xed\xcc\xf4\xe2\x91\x5c\x28\x20\xf9\x8e\x0b\xaa\xb2\x02\x32\x22\x21\x23\xa9\x5e\x5a\x29\x6f\x24\xb6\x7c\x05\x54\xb6\xed\x7d\xa1\x2d\x7b\x40\x2b\x65\x8c\xa7\x2f\x31\xe5\xb1\x88\xf9\x3e\x28\xb7\x0b\x09\x2a\x36\xe7\xa7\x34\xc2\x1a\xe1\x7b\xb2\x43\x9b\x3e\xbe\x47\xdb\xb0\x4b\x73\x6f\x48\xcb\x1c\xd3\x46\x64\xd7\x43\x40\x67\x0f\xd2\x97\xda\x85\x9c\x51\xfb\x72\x54\xe1\xf4\xf6\x41\x41\xc5\x6b\x5a\xd0\x9c\x08\x9d\x30\x37\x62\xba\xb4\x9e\x47\xf0\x52\xda\x1c\x97\x8c\x2a\xdd\x1e\x1b\x9a\xb0\x5e\xeb\xe1\x8c\x62\x07\x3a\xad\xd9\x82\xce\xa8\x3e\x10\x1a\x3c\x08\x7a\x98\xb0\xe6\x4c\x2f\xc8\x8c\x1f\x6c\xb3\x7f\xd3\x1c\x63\xb7\x40\xf5\xb1\xc0\x5f\x61\xca\x18\x9f\xdc\xdb\x23\x4f\x95\x24\xcf\x8f\xb6\x04\x74\x3c\xf4\xad\xca\x5d\x91\x14\x17\x64\x87\xe1\x98\x98\x09\x9c\x09\x89\xc5\x9c\x8e\x88\xc1\x0c\x07\x44\x60\x62\x8f\xce\x33\x41\x69\xe3\xbe\x3b\x30\x5a\xb8\xbb\x5c\x12\x7d\xdb\xd2\x77\x04\xbd\xb3\xd9\x56\xa0\x17\x81\xb6\xb7\xe1\x28\x74\x70\x83\x91\x68\xe3\x86\xa3\xf1\xa5\xc4\x12\xcf\x85\xc2\x03\xfd\x8d\x38\xc8\xbd\x69\x38\xa9\xca\x50\x98\xa0\xe8\x3b\x96\xe2\x80\x4c\xa1\x30\x38\x57\x44\xc6\x1d\x98\x3b\x81\xa4\xa9\x7b\x9a\xb0\x5f\x56\xc3\x74\x30\xeb\xd6\xb5\x17\x4c\x6f\xbe\xc3\x91\xf4\x41\x83\x61\xf4\x40\xc3\x31\xd4\x1b\x9e\x8c\x53\x2a\x15\x65\xc9\xa9\x38\x76\x80\xa7\xb6\x54\xb2\xdf\x0b\xfe\x46\x0b\xa2\x30\x3f\x76\x36\xd8\x92\xd1\x2f\x25\x9a\x7d\x56\x7a\xf1\x25\x49\x82\x52\x06\x76\xd8\x8e\xdb\xe1\x90\x74\x81\x83\x61\xe9\x00\x03\xa1\xb1\xdd\xb5\x7d\xc7\x09\x45\xa4\x65\xbf\xa4\xa8\x1a\x9d\xb4\x77\x37\x71\x34\x01\x61\x6d\x7b\x5f\x4f\xcb\x1e\x90\xe1\x4e\x82\x81\x3e\xda\xb3\x5e\xd0\x10\x18\x74\xdd\x49\x93\x3c\x77\x9d\xb4\x27\xc7\x23\x0c\x88\xf1\xad\x7d\x29\x9e\x35\x20\x44\x15\xfb\xd8\x36\x52\x21\x21\x9e\xf5\x4c\xdf\xa9\xb0\xd8\x73\x41\xc4\xd1\xb5\x65\x90\x08\x34\x2f\x47\x9c\x41\x81\x05\x17\x47\xb3\x36\xeb\x6c\x35\xda\x3c\x1f\x01\x6d\xbe\xb5\xaf\xcd\xb3\x0e\x68\x4b\xa9\x7c\x3d\x23\xd0\x87\xfc\x0d\x95\x9a\xe6\x94\x46\xdf\xcd\x80\xd0\x16\x24\xac\xd6\x87\x9c\x4a\x67\x2c\xe9\xb7\x33\x39\x75\x90\x70\x85\x72\x45\x72\x58\xd3\x6f\xf6\x12\x6c\x2a\x54\x6b\xd3\xd5\xd9\x0b\x42\x29\x31\xb5\xaf\x1b\xc3\xc9\x75\xce\x4e\x65\xb8\x82\x9c\x48\xb3\x83\xf4\x84\xdf\xdd\xc1\x3d\xe7\x39\x12\xd6\x7d\x4d\x49\xe2\x2c\x7c\x84\x39\x4b\x50\xfd\x27\xb3\x9f\x3c\x90\x24\x43\xc8\xa8\xbf\x10\xb7\x65\x9e\xc7\xfa\xba\x18\xa2\x6c\x8c\x83\xab\xde\xee\x54\x7b\x14\x5b\x2e\x0a\x4c\x81\x80\x1e\x64\x03\x69\xae\xa1\x1d\x57\xff\xe5\x74\xd8\x95\x31\x7e\xaf\x2b\x3d\x08\x6e\x88\xfd\xb7\x7a\xdf\xa6\x2c\xc5\x37\x94\xb7\xa1\xc4\x9d\x2e\xa1\xd3\xde\xab\xe5\x41\x18\xd0\x62\x9f\xd3\x44\x37\xc0\xfa\x58\x67\xa4\x57\x47\x21\xdf\x9c\xd9\x82\x3f\x39\x87\x0a\x74\x7a\x2e\xb2\xeb\xcf\xbc\x90\xe9\xc6\xb3\x59\xbe\x5e\xf0\x69\x8e\xfa\x4a\x16\x8c\x7d\x65\x3b\x23\xde\x2c\x0b\x02\x15\x3c\x40\x7e\x42\x5e\x0f\x33\xe8\xac\x42\xda\x17\xec\x3a\xdd\x3d\x49\x12\x73\x4c\x94\xad\x1c\x41\xd8\x0e\x07\x8b\x6b\x00\x79\xc1\x51\xa6\x71\xee\x52\xeb\xd4\x9b\xf1\x20\x91\x88\x24\xd3\x73\x22\x20\x70\x8b\x02\x59\x82\xdd\xb4\x3b\xb7\xd6\xe3\xf0\xb4\xac\xfd\x07\x26\x63\x06\x4a\x3d\x09\x65\xc2\x26\xa4\x3a\x3d\x85\x0c\x93\x60\x6e\x02\xa8\x8b\xa7\x53\xad\xb8\x57\x3c\x56\x7f\x97\xd1\x04\x66\x73\x7d\x45\x5d\x34\xfa\x96\x4c\xb6\xba\xf5\x35\x8f\xcf\x82\x1f\xbc\xf9\xe9\x8a\x18\x0e\x50\x63\xbd\x60\x3e\x1a\xed\xa6\x70\x40\x81\x90\x72\x86\x50\x4a\xdd\x45\xdb\x48\x75\xdd\xf2\x43\xf0\x3c\x69\x8c\x17\x3a\xd5\xa9\xe0\x87\x2e\xfd\xd0\xa6\xda\x18\x7f\x54\xd3\xcb\xd1\x3e\xf0\x51\xd7\x2d\x76\x72\xce\x78\x6c\xb6\xbf\x58\x17\x49\x68\x06\x6d\xc0\x05\xb3\xa8\xff\x92\xe1\xef\xae\x2d\x87\x3b\xce\xd3\xf3\x5e\xbb\xa8\x1f\x70\xad\x29\xda\xfe\xef\xee\xa0\xe0\x6c\xc7\x3b\x07\x65\xca\x13\x19\x0b\x54\xa5\x18\x78\x55\x6d\x03\x2e\x79\xad\x73\x58\x48\x79\x52\x16\xed\x7e\xb6\x4d\x16\x68\x0a\x3a\x80\x7e\x4b\xd0\x06\x84\x9e\x1d\x51\xee\x39\x93\x78\xe2\xae\xd1\x85\x0c\x8a\xaa\x80\xe0\xfe\xfe\xac\x3b\xc1\x7a\x9b\x17\x28\xcb\x5c\xd5\x6d\x92\xf7\x1e\xd9\xa1\x0f\xbd\x4a\x76\x21\x81\xb7\xc9\x0e\x24\x20\xd5\xc4\xc2\xbd\x61\x0f\xa6\xae\xb2\x5f\xb2\x8a\xdc\x73\xf8\x50\xe2\x2a\xaa\xa1\xbc\xd5\xf6\x81\xb4\x55\x76\x4f\xca\xd5\xed\x55\xb4\xf8\x30\x5d\x44\xf0\x3b\xcc\x51\xec\x70\x23\x10\xaf\x9e\xc6\xab\xcd\x74\x33\x5d\x2e\xe0\xfe\x19\x14\x7f\x7e\x7e\x7e\x9e\xcf\x27\x93\x1b\xff\x97\x05\xb7\x57\xcb\xd5\x24\x5a\x69\xc4\x8d\xfb\x6d\xd4\xc8\xfd\x80\x69\x54\xff\xd2\x68\x54\xff\x3e\xa1\xfa\x61\xd1\xc8\xff\xc9\xd0\xa8\xf5\x5b\x85\xdb\xf7\x57\xff\x0b\x00\x00\xff\xff\x31\x43\x12\xf3\xa5\x25\x00\x00")

func _01_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initUpSql,
		"01_init.up.sql",
	)
}

func _01_initUpSql() (*asset, error) {
	bytes, err := _01_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6b, 0x48, 0xb5, 0xc, 0xa3, 0x60, 0x26, 0x69, 0x89, 0x8d, 0x4a, 0x11, 0x57, 0x32, 0x13, 0x6f, 0xea, 0x5c, 0x9a, 0x9a, 0x78, 0x9e, 0xb7, 0xb8, 0x15, 0xe8, 0x40, 0x68, 0x50, 0x5d, 0x48, 0x1c}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_init.down.sql": _01_initDownSql,

	"01_init.up.sql": _01_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"01_init.down.sql": &bintree{_01_initDownSql, map[string]*bintree{}},
	"01_init.up.sql":   &bintree{_01_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
