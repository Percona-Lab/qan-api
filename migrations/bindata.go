// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/sql/01_init.down.sql (20B)
// migrations/sql/01_init.up.sql (9.154kB)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x28\x49\x4c\xca\x49\x55\xc8\x4d\x2d\x29\xca\x4c\x2e\xb6\xe6\x02\x04\x00\x00\xff\xff\x6b\xf9\xb4\xa3\x14\x00\x00\x00")

func _01_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initDownSql,
		"01_init.down.sql",
	)
}

func _01_initDownSql() (*asset, error) {
	bytes, err := _01_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf5, 0xb9, 0x22, 0xf, 0xca, 0x89, 0xa5, 0x5, 0xf2, 0xed, 0x48, 0xd7, 0xe0, 0x9d, 0xec, 0x2, 0xab, 0x87, 0xf3, 0x9d, 0x3d, 0x5a, 0x71, 0x39, 0xe, 0x4a, 0x88, 0xde, 0x1d, 0x0, 0x1d, 0x4e}}
	return a, nil
}

var __01_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x5a\x4b\x73\xdb\xb8\xd2\xdd\xfb\x57\xf4\xce\x76\x95\x9c\xfa\xbe\x99\xbb\x98\x24\x35\x0b\xd9\x62\x12\xdd\xd2\xc3\x91\x94\x3b\xe3\x15\x03\x93\x2d\x12\xd7\x24\xc0\x00\xe0\xc8\x9a\x5f\x7f\x0b\x00\xdf\x04\x24\xc5\xb3\x4a\x45\x7d\xfa\x34\x4e\x37\x1e\x0d\x98\x0f\x9b\x60\xba\x0b\x60\x37\xbd\x5f\x04\x30\xff\x04\xab\xf5\x0e\x82\x3f\xe7\xdb\xdd\x16\x72\x54\x82\x46\xf2\xea\xe6\x0a\x00\xe0\x47\x89\xe2\x48\x63\xd8\x2a\x41\x59\x02\x0f\xeb\xe5\x32\x58\xed\xe0\x3a\x25\x32\x05\xbe\xb7\x76\xd8\x53\x96\xa0\x28\x04\x65\xea\x7a\x62\xfc\xe2\x50\xa2\xf8\x0b\xc5\xc8\x31\xe6\x39\x32\x45\x39\xfb\x00\xf3\x47\xe0\x02\x52\x2e\x15\x23\x39\x6a\xb6\xd9\x3d\x58\xb7\x86\x25\x26\x8a\x3c\x13\x89\x23\x9e\x47\x2e\x55\x22\x70\xfb\x75\xf1\x01\x6a\x50\x1b\x3b\x4a\x31\x27\x23\x9f\xe5\xb1\x07\xff\x08\x5d\x12\xeb\xd3\x50\x94\x12\x85\x19\xd6\x90\x24\xca\x28\x32\x05\xda\x0e\x1a\xd0\x78\x58\x43\xa8\xf5\xf8\x9c\xfa\x8a\x2b\xcf\xef\x19\x79\xc6\x4c\xbe\x7b\xc1\xe3\x77\x98\x0a\x41\x8e\x37\xd6\xfd\xb6\xf5\x7f\x28\xa5\xe2\x39\x58\xa4\x09\x2b\x07\xde\x7f\x91\xac\xc4\x0b\xfd\x0d\xb6\x26\x20\x89\x1e\x75\x59\x3a\x8a\x3c\x8f\x75\xa9\xf6\x14\x85\x2e\x8e\x01\x82\x4a\x89\x82\x88\x67\x19\x46\x0a\x08\x8b\x41\x22\x8b\xeb\x49\x53\x51\x56\xff\x0b\x25\x2f\x45\x84\x10\xb0\x32\xff\xed\xe6\x7a\x19\xec\x36\xf3\x87\x6d\xb8\x5d\x7f\xdb\x3c\x04\xe1\x7c\xf5\x9f\xe9\x62\x3e\xbb\x86\xdf\xe1\xff\x26\x70\xbd\x7c\xda\x7e\x5d\x84\xdb\xc5\xfa\x8f\xc5\xfa\xb3\xfe\xf1\xff\x9b\x1f\x1f\x83\xcd\xa7\xed\xc3\x97\x60\x39\xd5\xbf\xff\xd2\x91\xb5\xb5\x01\xf8\xbe\x0e\xf9\x01\x64\xc6\x0f\x19\x4f\x26\x50\xa0\xd8\x57\x45\x9d\x00\xaa\xe8\x5d\x35\xb8\x02\x05\xe5\x71\x28\x15\x11\x0a\x66\x44\xe1\x8e\xe6\xd8\x52\x9a\xff\x1d\x52\x64\xb5\x48\xca\x99\x0e\xf0\x5c\x46\x2f\xa8\xc0\xb8\x61\xdc\xe7\xca\x90\x25\x2a\x85\x6f\x73\xa6\x7e\xfd\xa5\xa5\x9a\x95\x82\xd4\xee\x1d\x32\xcb\x54\x31\x74\x56\xce\x28\xfd\xf9\x51\xfe\xc8\x20\xa6\x09\x4a\x15\x2a\x7c\x55\x1f\xab\xe5\x76\xa0\x2a\xe5\xa5\x32\x13\xb9\xe2\xc1\x57\x92\x17\xd9\x78\xb6\xae\x19\xb6\xcb\xb4\x06\xed\x05\xcf\x41\xa2\x82\x3d\x2f\x59\x0c\x74\x30\xa6\x0a\x16\xee\xb9\xc8\x89\xaa\xcb\x17\xfc\x39\x5d\x3e\x2e\x82\xf0\xd3\x7a\xb3\x9c\xee\x86\xe5\xab\xac\x75\xe1\x3e\xcd\x57\x9f\x83\xcd\xe3\x66\xbe\xda\x0d\x6b\x36\x67\x31\x8d\x88\x42\xd9\x9f\x4a\x02\x49\xd6\x1f\xa6\x04\x2a\xa1\x10\x3c\xa5\xcf\xb4\x4d\x39\x95\xa1\x12\x25\xd3\x0c\xb1\xc9\xf8\x6f\x2e\x6a\xba\x77\x70\x29\xce\x21\xe3\x2c\x31\xd3\xf6\x40\x24\x34\x44\x03\xe1\xea\x58\xe0\x50\xf6\xee\xe9\x71\x34\x67\x37\xd3\xd5\x6c\xbd\xac\x35\xeb\xb9\x1b\x6c\xad\x5e\x9d\x82\xe9\x76\x57\xfd\xf7\xd7\x09\x5c\xff\x31\xdf\x7d\x09\x83\xcd\x66\xbd\xd1\xbf\xfc\xcb\x99\x90\x83\x4e\x48\xbf\x54\x7a\x98\x05\x8d\x5e\x30\x86\xb2\x18\x0c\xb3\x9a\xf3\xe3\x6d\xae\xfa\x7d\x54\x77\xca\xe0\xdf\xdb\xf5\x0a\x6c\x61\xeb\x05\xc1\xca\x3c\xd4\x38\x8a\x32\xd4\x33\x2b\x3c\x10\xc1\x28\x4b\x24\x7c\xca\x38\xe9\xcd\xe8\x2f\xfc\x00\x39\x61\x47\xa8\xf0\x66\x78\xda\x07\x1a\x9f\xe1\x64\xfa\x5e\x5b\xde\x45\x3c\x6e\x36\x28\xbb\x54\x3a\x49\x58\x50\xa9\xf4\x80\x6b\xb4\xc3\xbb\x64\xaa\x76\xaf\x06\xd6\xf1\x9f\xe6\xda\xae\x19\x90\x44\x27\x86\x33\x12\x8b\x42\x70\xf1\x53\x52\x8d\xc7\x58\xa7\x25\xba\x4c\xe5\x82\x48\xa5\x23\x33\x3e\xf2\xfe\x19\x95\x2d\xcd\x29\x9d\x63\x6d\x15\x4d\x6d\xa7\x0c\x54\x4a\x65\x9f\xe0\xee\xae\xe9\x04\xcc\x96\x6e\xd8\x8e\xa1\xa2\x39\x86\x11\x53\x63\xd2\x5d\x8a\x7a\x77\x54\xa8\xcf\x77\xc0\x57\x8c\x4a\xb3\xdd\x69\x0f\x1d\x42\x62\xc4\x59\x6c\xf3\x98\x63\x33\xfb\x7a\xc4\xb2\xcc\xdf\x4c\xec\x24\xcc\x29\x1b\x13\x6e\x73\x92\x65\x28\x95\x3d\x07\x9b\x65\x12\xd6\x84\xbd\x3c\xf4\xe9\xc8\xeb\x98\xee\x9e\x26\xc9\x9b\xd8\x8a\xf7\xef\xc7\x6c\xef\xdf\xeb\x53\x25\xd2\x07\x6f\x66\xd8\x2e\xa3\xcd\x78\xf4\x32\x2a\xce\xd8\xe8\x4d\xb0\xa1\x55\x1c\x48\xf4\xa3\xa4\x02\x41\xbb\x48\x67\x76\x5b\xb2\x4e\x72\x1d\xc6\x36\x55\x63\x63\x47\x79\x6d\x14\xfc\x20\x43\xa9\x5b\x11\x87\x80\xd6\xe8\x15\xc0\xca\xfc\xd9\xf6\x29\x1a\xac\xbb\x12\xa5\xf5\xa8\x14\xc1\x36\x5f\xad\x82\x96\xcd\xa1\xa0\x63\x1c\x2b\x68\x8d\x3e\x05\x7a\xab\xa5\x0c\x63\xaf\x8a\x06\xe0\x54\xb2\x1a\xa8\x88\x08\x63\x18\xc3\x1d\x6c\x83\x45\xf0\xb0\x1b\x68\x68\xb8\x7c\x3a\x5a\x80\x47\x4b\x03\xf0\xe9\x21\xfb\x3d\x46\xea\x84\x9e\x06\x70\x89\x9e\x28\x25\x2c\x31\x7a\xbe\x3d\xce\xa6\xbb\x60\x02\xb3\x60\x11\xe8\x7f\xe7\xab\x6d\xb0\x19\xea\x6b\xb8\x7d\xfa\x5a\x80\x47\x5f\x03\xf0\xe9\x13\x48\xfc\xda\x8c\xf1\xd2\x19\xa7\xc1\xb6\xb3\x52\xe4\x39\x43\x39\xd0\x62\xb8\x7c\x3a\xac\xd1\xa3\xc1\x18\x1d\xe3\xcf\x51\x24\x18\x16\x44\x4a\x94\x2e\x09\x3d\xfb\x05\x2a\x0c\x1e\x2c\xde\xf6\x66\x7a\xf1\x48\x2e\x14\x90\x2c\xe1\x82\xaa\x34\x87\x94\x48\x48\x49\xac\x97\x56\xcc\x5b\x89\xbd\x58\x0e\x95\x7d\xfb\x58\x68\xcf\xee\xd0\x4a\x19\xe3\xf1\x73\x48\x79\x28\x42\x5e\x38\xe5\x0e\x21\x4e\xc5\x0f\xfa\xe0\x93\x46\x58\x2b\xbc\x20\x09\xda\xf2\xf1\x02\x6d\xcb\x2e\xcd\xcd\x21\x2e\x33\x8c\x5b\x91\xc3\x08\x0e\x9d\x23\xc8\x58\xea\x10\x72\x46\xed\xf3\x51\xb9\xcb\x3b\x06\x39\x15\x6f\x69\x4e\x33\x22\x74\xc1\x2a\x8f\xf9\xda\x46\x9e\xc0\x73\x69\x6b\x5c\x32\xaa\x74\x83\x6c\x68\xdc\x7a\x6d\x84\x33\x8a\x2b\xd0\x69\xcd\x16\x74\x46\xf5\x81\x50\xe7\x41\x30\xc2\xb8\x35\xa7\x7a\x41\xa6\xfc\x60\xdb\xfd\x9b\xf6\x18\xbb\x05\xaa\x8f\x05\xfe\x02\x73\xc6\xf8\xec\xde\x1e\x79\xaa\x24\x59\x76\xb4\x53\x40\xe7\x43\xdf\xab\xaa\x4b\x92\xe2\x82\x24\xe8\xce\x89\x19\xc0\x99\x94\x58\xcc\xe9\x8c\x18\x8c\x3f\x21\x02\x23\x7b\x74\x9e\x49\x4a\x1f\xf7\xd3\x89\xd1\xc2\xab\xeb\x25\xd1\xf7\x2d\x7d\x4b\xd0\x3b\x9b\x6d\x05\x46\x19\xe8\x47\xf3\x67\x61\x80\xf3\x66\xa2\x8f\xf3\x67\xe3\x47\x89\x25\x9e\x4b\x45\x07\xf4\x0f\xf2\x20\x0b\xd3\x70\x52\x95\xa2\x30\x49\xd1\xb7\x2c\xc5\x01\x99\x42\x61\x70\xd5\x24\x32\xe1\xc0\x5c\x0a\x24\x8d\xd1\x6e\x9e\xf6\xc7\xda\x4d\x27\xb3\x69\x5d\x47\xc9\xec\x8c\xd7\x9f\xc9\x2e\xc8\x9b\xc6\x0e\xc8\x9f\x43\xbd\xe1\xc9\x30\xa6\x52\x51\x16\x9d\xca\xe3\x00\x78\x6a\x4b\x25\x45\x21\xf8\x2b\xcd\x89\xc2\xec\x38\xd8\x60\x4b\x46\x7f\x94\x68\xf6\x59\xd9\xc9\x2f\x89\x22\x94\xd2\xb1\xc3\x0e\xc2\xfa\x53\x32\x04\x7a\xd3\x32\x00\x3a\x52\x63\xbb\x6b\xfb\x92\xe3\xca\x48\xcf\x7e\xc9\xa4\x6a\x75\xd2\xd1\xdd\xa4\xa2\x71\x08\xeb\xdb\xc7\x7a\x7a\x76\x87\x8c\xea\x24\xf0\xf4\xd1\x1d\xeb\x05\x0d\x81\x41\x37\x9d\x34\xc9\xb2\xaa\x93\xee\xc8\xe9\x10\x3a\xc4\x74\xad\x63\x29\x1d\xab\x43\x88\xca\x8b\xd0\x36\x52\x2e\x21\x1d\xeb\x99\xbe\x53\x61\x5e\x70\x41\xc4\xb1\x6a\xcb\x20\x12\x68\xde\x8e\x38\x83\x1c\x73\x2e\x8e\x66\x6d\x36\xd5\x6a\xb5\x75\x62\x38\xb4\x75\xad\x63\x6d\x1d\xab\x47\x5b\x4c\xe5\xcb\x19\x81\x5d\xc8\x3f\x50\xa9\x69\x4e\x69\xec\x86\xf1\x08\xed\x41\xdc\x6a\xbb\x90\x53\xe5\x0c\x25\xfd\xfb\x4c\x4d\x2b\x88\x7b\x86\x72\x45\x32\xd8\xd2\xbf\xed\x25\xd8\xcc\x50\xad\x4d\xcf\xce\x51\x12\x4a\x89\xb1\x7d\xdd\xf0\x17\xb7\x0a\x76\xaa\xc2\x35\xe4\x44\x99\x2b\xc8\x48\xf8\xdd\x1d\xdc\x73\x9e\x21\x61\xc3\xd7\x94\x28\x4c\xdd\x47\x58\x65\x71\xaa\xff\x6a\xf6\x93\x07\x12\xa5\x08\x29\xed\x2e\xc4\x7d\x99\x65\xa1\xbe\x2e\xba\x28\x5b\xa3\x77\xd5\xdb\x9d\xaa\x40\xb1\xe7\x22\xc7\x18\x08\x68\x27\x9b\x48\x73\x0d\x1d\x84\xfa\x2f\xa7\xfe\x50\xc6\xf8\xb3\xa1\xb4\x13\xdc\x10\xfb\x6f\xfd\xc2\x4d\x59\x8c\xaf\x28\x6f\x5d\x85\x3b\x3d\x85\x4e\x47\xaf\x97\x07\x61\x40\xf3\x22\xa3\x91\x6e\x80\xf5\xb1\xce\xc8\x68\x1e\xb9\x62\x73\x66\x27\xfc\xc9\x31\xd4\xa0\xd3\x63\x91\xc3\x78\xe6\x85\x4c\x37\x9e\xed\xf2\xed\x24\x9f\x66\xa8\xaf\x64\xce\xdc\xd7\xb6\x33\xe2\xcd\xb2\x20\x50\xc3\x1d\xe4\x27\xe4\x8d\x30\xde\x60\x35\xd2\xbe\x61\x37\xe5\x1e\x49\x92\x98\x61\xa4\xec\xcc\x11\x84\x25\xe8\x9d\x5c\x1e\xe4\x05\x47\x99\xc6\x55\x97\xda\x4a\xbd\xf1\x07\x89\x44\x44\xa9\x1e\x13\x01\x81\x7b\x14\xc8\x22\x1c\x96\xbd\x0a\x6b\x23\xfa\x87\x65\xed\x6f\x18\x8c\x71\x94\x7a\x10\xca\xa4\x4d\x48\x75\x7a\x08\x29\x46\xce\xda\x38\x50\x17\x0f\xa7\x5e\x71\x2f\x78\xac\xff\x32\xa3\x09\xcc\xe6\xfa\x82\x7a\xd2\xe8\x5b\x32\xd9\xeb\xd6\xd7\x3c\x3e\x0b\x7e\xe8\x8c\x4f\xcf\x08\x7f\x82\x5a\xeb\x05\xe3\xd1\xe8\x6a\x08\x07\x14\x08\x31\x67\x08\xa5\xd4\x5d\xb4\xcd\xd4\x30\x2c\x3f\x38\xcf\x93\xd6\x78\x61\x50\x5d\x0a\x7e\x18\xd2\xfb\x36\xd5\xd6\xf8\x56\x4d\xcf\x47\xfb\xc0\x47\xab\x6e\x71\x50\x73\xc6\x43\xb3\xfd\x85\x7a\x92\xb8\x46\xd0\x07\x5c\x30\x8a\xe6\x4f\x19\xdd\xdd\xb5\x17\x30\xe1\x3c\x3e\x1f\x75\x88\x7a\x43\x68\x4d\xd1\x8f\x7f\x77\x07\x39\x67\x09\x1f\x1c\x94\x31\x8f\x64\x28\x50\x95\xc2\xf3\xaa\xda\x07\x5c\xf2\x5a\x57\x61\x21\xe6\x51\x99\xf7\xfb\xd9\x3e\x99\xa3\x29\x18\x00\xc6\x2d\x41\x1f\xe0\x7a\x76\x44\x59\x70\x26\xf1\xc4\x5d\x63\x08\xf1\x8a\xaa\x81\x50\xfd\x05\x5a\x77\x82\xcd\x36\x2f\x50\x96\x99\x6a\xda\xa4\xce\x7b\xe4\x80\xde\xf5\x2a\x39\x84\x38\xde\x26\x07\x10\x87\x54\x93\x8b\xea\x0d\xdb\x5b\xba\xda\x7e\xc9\x2a\xaa\x9e\xc3\x7d\x85\xab\xa9\x7c\x75\x6b\xec\x9e\xb2\xd5\xf6\x8e\x94\xab\xdb\xab\x60\xf5\x79\xbe\x0a\xe0\x77\x58\xa2\x48\x70\x27\x10\xaf\x1e\xa7\x9b\xdd\x7c\x37\x5f\xaf\xe0\xfe\x09\x14\x7f\x7a\x7a\x7a\x5a\x2e\x67\xb3\x9b\xee\xb7\x05\xb7\x57\xeb\xcd\x2c\xd8\x68\xc4\x4d\xf5\x15\xcd\xa4\xf9\x2c\x66\xd2\xf9\xb4\x65\xd2\x7c\xb0\x32\xe9\x7c\x77\x32\xe9\x7f\x51\x32\xe9\x7d\xb7\x70\xfb\xf1\xea\x7f\x01\x00\x00\xff\xff\x82\x1f\x2d\x62\xc2\x23\x00\x00")

func _01_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initUpSql,
		"01_init.up.sql",
	)
}

func _01_initUpSql() (*asset, error) {
	bytes, err := _01_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x20, 0xff, 0xf, 0x3d, 0xee, 0xf7, 0x8e, 0x77, 0xdd, 0x7e, 0xfa, 0x69, 0x56, 0x12, 0xbc, 0xaf, 0xa0, 0xe3, 0xb1, 0x2, 0x5f, 0xce, 0xf7, 0xf3, 0x2e, 0x7a, 0x91, 0xda, 0x92, 0x41, 0x61, 0xc8}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_init.down.sql": _01_initDownSql,

	"01_init.up.sql": _01_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"01_init.down.sql": &bintree{_01_initDownSql, map[string]*bintree{}},
	"01_init.up.sql":   &bintree{_01_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
