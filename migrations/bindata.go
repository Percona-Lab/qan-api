// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/sql/01_init.down.sql (20B)
// migrations/sql/01_init.up.sql (6.937kB)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x28\x49\x4c\xca\x49\x55\x28\x2c\x4d\x2d\xca\x4c\x2d\xb6\xe6\x02\x04\x00\x00\xff\xff\x83\xb1\x39\x71\x14\x00\x00\x00")

func _01_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initDownSql,
		"01_init.down.sql",
	)
}

func _01_initDownSql() (*asset, error) {
	bytes, err := _01_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init.down.sql", size: 20, mode: os.FileMode(0644), modTime: time.Unix(1540386349, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1b, 0x7b, 0x5c, 0x8b, 0x18, 0x65, 0xe6, 0x8e, 0x6a, 0x1, 0x3c, 0x9a, 0x26, 0x44, 0x2a, 0x25, 0xdd, 0xf7, 0xd, 0xf5, 0xe4, 0x82, 0x28, 0xc9, 0x5, 0xde, 0x58, 0x51, 0xeb, 0x97, 0x16, 0xe7}}
	return a, nil
}

var __01_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x99\x4f\x73\xdb\x36\x13\xc6\xef\xfe\x14\x7b\x79\xc7\xf6\x8c\x9c\x77\x9a\xf4\x10\x27\x93\x83\x1c\x29\x89\x3a\x96\xe5\x4a\xea\x24\x3e\x31\x30\xb9\xa2\x50\x93\x00\x03\x80\x91\xd5\x4f\xdf\x01\xff\x02\x04\x40\x39\x3d\xca\xcf\xb3\x8f\x7f\xbb\x04\x21\x81\xfc\xb8\x9e\x4f\xb7\x73\xd8\x4e\x6f\x6e\xe7\xb0\xf8\x04\x77\xab\x2d\xcc\xbf\x2d\x36\xdb\x0d\xfc\x28\x51\x50\x94\x67\x17\x67\x00\x50\x7d\x3a\xd2\x04\x36\x4a\x50\x96\xc2\xc7\xd5\x72\x39\xbf\xdb\xc2\xf9\x9e\xc8\x3d\xf0\x5d\xad\xc3\x8e\xb2\x14\x45\x21\x28\x53\xe7\x93\xaa\x2e\x89\x24\x8a\x9f\x28\x9c\xc2\x84\xe7\xc8\x14\xe5\xec\x1d\x2c\xee\x81\x0b\xd8\x73\xa9\x18\xc9\x51\xa7\xcd\x6e\xa0\x2e\xeb\x52\x12\xa2\xc8\x23\x91\xe8\xe6\xb4\x02\x17\x10\xf3\x2c\xc3\x58\x87\x82\x4e\xea\x11\xe2\x3d\xe6\xc4\x29\xd5\x9e\xc4\x2c\xe2\x3b\x50\xe4\x31\x43\x09\x94\xc1\x3d\x97\x2a\x15\xb8\xf9\xf3\xb6\xcb\x29\x25\x8a\x0a\x71\x98\x14\x67\x14\x99\x02\xad\xdb\xff\xb9\x16\x22\xdd\x5b\xa8\xc8\xee\xbe\xa9\xfc\x9e\x91\x47\xcc\xe4\xab\x27\x3c\x7e\x87\xa9\x10\xe4\x78\x51\x97\x5f\xf6\xf5\x1f\x4b\xa9\x78\x0e\xb5\xb3\xfa\xb7\x72\x50\xfd\x93\x64\x25\xbe\xb0\xbe\xf2\xb6\x01\x24\xd5\xd4\x65\xe9\xb9\xe0\x8b\x44\x5f\xb6\x1d\x45\xa1\xc7\x55\x19\x41\xed\x89\x6a\xe7\x08\x84\x25\x20\x91\x25\x90\xa3\x12\x34\x6e\x23\x9b\x4f\x91\xe4\xa5\x88\xdd\x09\xce\x9f\x5f\xbd\x03\x99\xf1\x43\xc6\xd3\x09\x14\x28\x76\x50\x5f\xb5\x09\x2c\x39\x4b\x39\xcc\x6e\x26\x70\x8f\x22\xe6\x8c\xc0\xa6\x5a\x1b\x13\x40\x15\x37\xe9\x05\x0a\xca\x93\x48\x2a\x22\x14\xcc\x88\xc2\x2d\xcd\xb1\x4f\xaf\x3e\x1d\xf6\xc8\x06\x57\xfb\xb1\x8c\x9f\x50\x41\x55\x86\x89\x9d\x95\x21\x4b\xd5\x1e\xfe\x5a\x30\xf5\xe6\x75\x1f\x35\x2b\x05\x69\xcb\x8d\xb0\x3a\xa9\x49\x30\x6e\x03\xa7\xd1\xfc\x28\x7f\x64\x90\xd0\x14\xa5\x8a\x14\x3e\xab\xf7\xcd\xbd\x73\xa0\x6a\xcf\x4b\x05\x7a\x41\x37\x39\xf8\x4c\xf2\x22\x73\x87\xb5\x62\xd8\xdf\x73\xad\x69\x27\x78\x0e\x12\x15\xec\x78\xc9\x12\xbd\x82\x2d\xa6\xc6\x16\xed\xb8\xc8\x89\x82\x39\x2b\xf3\xb7\x17\xe7\xf3\x6f\xd3\xe5\xfd\xed\xfc\x1c\x3e\xc0\x6f\x13\x38\x9f\x2d\x3e\xcf\x37\x5b\xfd\xe9\xb5\xb1\x50\x16\x2c\xa1\x31\x51\x28\xed\x0b\x2d\x90\x64\x36\x83\x04\x2a\xa1\x10\x7c\x4f\x1f\x69\x3f\x4f\x2a\x23\x25\x4a\xa6\x13\x92\x6a\x9c\x6f\x7d\xd1\x74\xe7\xc9\x52\x9c\x43\xc6\x59\x5a\x2d\xaa\x03\x91\xd0\x05\x0d\xba\x52\xc7\x02\xdb\x9e\xd6\xd3\xbb\xd9\x6a\xd9\xb6\xb4\xb9\x5d\x7d\x6d\x7b\x9a\xc0\xf9\xa7\xe9\x66\xdb\x7c\x7c\x33\x81\xf3\xaf\x8b\xed\x97\x68\xbe\x5e\xaf\xd6\xfa\x2f\xbf\x7b\x9b\x3e\xe8\xa6\xed\x59\x6b\x94\x82\xc6\x4f\x98\x40\x59\x0c\x50\x9a\x85\xee\x5c\xb4\x3f\x36\xab\x3b\x10\xe4\xd0\xde\x09\xb0\xe3\x02\x52\xfa\x13\x99\x1d\xde\xc4\xb1\x32\x8f\x9a\x2d\x38\xd2\x4b\x23\x3a\x10\xc1\x28\x4b\x25\x7c\xca\x38\xb1\x96\xe4\x17\x7e\x80\x9c\xb0\x63\xbb\x65\x57\x78\xba\x06\xba\x9a\xe1\x6a\xf8\xde\x2a\xaf\x62\x9e\x74\x5b\x44\xbd\xd6\x8d\x21\xdc\x52\xa9\xf4\x4a\x6b\xdd\x9e\xea\x92\xa9\xb6\xbc\x01\x33\xea\xa7\xb9\xd6\x75\x02\x92\x78\x04\xc7\x69\x16\x85\xe0\xe2\x97\x5a\xad\x2a\xdc\x3e\xeb\xa0\x97\x75\x79\x4b\xa4\xd2\xff\x99\x71\xa7\xfa\x57\xba\xec\x63\xc6\xfa\x74\x7b\x6b\x62\x5a\x9d\x32\x50\x7b\x2a\xed\x80\xab\xab\x76\xf9\xd4\x9b\x6a\x95\x76\x8c\x14\xcd\x31\x8a\x99\x1a\x19\x98\xb6\x48\xe8\xed\xd5\xe4\xaa\xad\xa2\xdd\xa0\xcd\x2c\x59\xe6\x6e\xd6\xa6\xcc\xab\x3d\x3f\xcb\x9a\x6f\x0b\x33\x6e\xd8\xaa\x15\x97\x53\xe6\x89\xcb\x49\x96\xa1\x54\x75\x58\xb7\xa1\xbd\x24\x8e\x3c\xbb\x71\x37\x34\x4d\xff\x53\x5a\x71\x7d\xed\xa6\x5d\x5f\xeb\xef\x81\x58\x7f\xd7\x65\x55\xda\xcb\x62\x33\x1e\x3f\x39\x57\xc3\x15\x8d\xf1\xba\xa2\x31\x2c\x8f\xd8\xb7\xee\x8a\x46\x27\xad\x28\xf8\x41\x46\x52\x7f\x9b\x7b\x80\x7a\xd1\x03\xd4\x8b\x1e\x20\x43\x74\x81\x7a\x31\x04\xa4\xb7\x3a\xca\x30\x09\x42\x75\x86\x10\x58\x67\x08\xc1\xf5\x86\x00\x60\x67\x08\x41\x92\xdd\x0e\x63\x35\x02\xd9\x19\x42\x90\x9d\x21\x04\xd9\x1b\x02\x90\x9d\x21\x04\x29\x90\x84\x01\x2b\x31\x04\x57\x89\x21\xb0\x5a\x0c\x40\x55\xa2\x07\x28\x47\x91\x62\x54\x10\x29\x51\xfa\x98\x2c\xdd\x83\x65\xe9\x1e\x32\x5b\x77\xe1\x2c\xdd\xc3\x47\x19\xe3\xc9\x63\x44\x79\x24\x22\x5e\x78\x11\x87\x16\x0f\xe5\xd0\xe2\x01\x75\x2c\x2e\xeb\xd0\x72\x02\xf7\xf1\xa8\xfc\x33\x75\x4d\x27\x90\x6b\xd3\x09\xe8\xc6\x34\x8e\x5d\x9b\x4e\x80\x1f\x08\xf5\x6e\x3d\x8e\xe7\x04\x76\xe5\x39\x41\x5d\x7b\xc6\xa1\x2b\x4f\x98\x59\x60\x5c\xef\xa7\x27\xb8\x6d\x5f\x98\xdd\xf6\x85\xf9\x07\xbe\x60\x0f\xb6\x2f\xdc\xc7\x8f\x12\x4b\x3c\xd5\x84\x61\x0a\x77\x60\x98\xc2\xf8\xa6\x29\xc8\x6e\x98\xc2\xe0\x05\x49\x51\x46\x09\x95\x8a\xb2\x78\x0c\x7e\x60\x0c\x37\x30\x30\x86\x9b\x18\x1a\x83\x8d\x0c\x8c\x9e\x66\xea\xdf\x08\xf5\x09\xd2\xd7\x83\xa5\x7b\xd0\x2d\xdd\x43\x6c\xeb\x2e\xa8\xa5\x7b\xf8\x9a\x9d\x22\xf0\xb3\xc0\x50\x3d\x6c\x86\xea\x21\x33\x55\x97\xcb\x50\x3d\x54\x2a\x2f\xa2\xfa\xf9\x8b\x8f\xca\x50\x3d\x54\x86\xea\xa1\x32\x55\x97\xca\x50\x03\x54\x09\x95\x4f\x27\xd0\x4c\x4b\x80\xcf\xb4\x04\x20\x2d\x8b\x9f\xd4\xb4\x8c\x0d\x31\x92\xf4\x9f\x13\x93\x6c\x2c\x63\xe3\x6c\x2c\x63\x33\x6d\x2d\x23\x83\x6d\x2c\xbe\x3b\x25\x8e\xf6\xf6\x26\x65\xfc\xa2\xe7\x3c\x43\xc2\x86\x0f\x92\xda\x1a\xef\x19\xe5\x7f\x4a\x94\x08\x1f\x40\x96\xf9\xff\x63\xd6\xff\x30\xdf\x95\x59\x16\xc9\x98\x30\xdf\x40\x7a\xd1\x33\x8a\x4a\xfc\x9b\xd3\x70\x65\x25\x8e\x0e\x71\xfc\x22\x8c\x55\x72\x56\x5f\xf0\xd1\x84\xd6\xe4\xa3\xa7\x19\x4a\x2e\xbc\xf7\x79\xa7\x8d\xd5\x8d\x00\x38\x1e\x4f\x8e\xc4\x0c\x63\x55\xcf\x49\x10\x96\x62\x70\x94\x01\x67\x38\xb3\x36\x85\x93\x6a\xfd\x64\xfd\x1e\x63\x6f\x77\x1e\x97\x2f\x4b\xf7\x1f\x26\xe9\xd5\x60\xad\xfe\x45\x1d\x2c\xad\x4e\x52\x81\xca\xd0\x6a\xee\x45\x4f\x25\xe3\x11\x65\x09\x3e\x47\xa5\xf4\x9f\x6c\x6c\x83\x3f\x21\xe5\x3c\x39\x1d\x33\x74\x39\x59\x57\x57\x90\x57\xcf\x76\xed\x47\x1a\x09\x8f\xf5\x19\x43\x95\x22\x70\x42\xb4\x0d\x1e\x44\xdb\xe0\xd9\xbb\x06\x06\x77\xe7\xb2\x0d\xbe\xc3\x17\xca\x82\x33\x89\x23\x5f\xf2\x43\x8b\xef\x20\x36\xb0\xf8\x8e\x63\x43\x8b\xe7\x50\x36\xb0\x78\x70\xab\x7e\xf4\x9a\x18\x1b\x69\xab\x87\x26\xda\xea\xa1\x81\x76\x7a\x60\x9e\xad\x6e\xf0\x9d\x5d\x9e\xcd\xef\x3e\x2f\xee\xe6\xf0\x01\x96\xfa\xf8\xb6\x15\x88\x67\xf7\xd3\xf5\x76\xb1\x5d\xac\xee\xe0\xe6\x01\x14\x7f\x78\x78\x78\x58\x2e\x67\xb3\x0b\xf3\x29\xff\xe5\xd9\x6a\x3d\x9b\xaf\xb5\xe3\xa2\x79\x39\x35\xe9\xde\x36\x4d\x8c\x37\x46\x93\xee\x05\xd0\xc4\x78\x85\x33\xb1\x5f\xce\x4c\xac\x37\x08\x97\xef\xcf\xfe\x0d\x00\x00\xff\xff\xcc\x84\x37\x0d\x19\x1b\x00\x00")

func _01_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initUpSql,
		"01_init.up.sql",
	)
}

func _01_initUpSql() (*asset, error) {
	bytes, err := _01_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init.up.sql", size: 6937, mode: os.FileMode(0644), modTime: time.Unix(1551286295, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc5, 0x24, 0xb1, 0x67, 0x46, 0x94, 0xbf, 0x2d, 0x74, 0x88, 0xdf, 0x6c, 0xb7, 0x16, 0xc1, 0x47, 0x37, 0x9f, 0xa4, 0x22, 0x82, 0x3a, 0x8d, 0x52, 0x51, 0xc1, 0xf5, 0xbf, 0xb9, 0xac, 0xf9, 0x92}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_init.down.sql": _01_initDownSql,

	"01_init.up.sql": _01_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"01_init.down.sql": &bintree{_01_initDownSql, map[string]*bintree{}},
	"01_init.up.sql":   &bintree{_01_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
