// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/sql/01_init.down.sql (20B)
// migrations/sql/01_init.up.sql (9.99kB)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x28\x49\x4c\xca\x49\x55\xc8\x4d\x2d\x29\xca\x4c\x2e\xb6\xe6\x02\x04\x00\x00\xff\xff\x6b\xf9\xb4\xa3\x14\x00\x00\x00")

func _01_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initDownSql,
		"01_init.down.sql",
	)
}

func _01_initDownSql() (*asset, error) {
	bytes, err := _01_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf5, 0xb9, 0x22, 0xf, 0xca, 0x89, 0xa5, 0x5, 0xf2, 0xed, 0x48, 0xd7, 0xe0, 0x9d, 0xec, 0x2, 0xab, 0x87, 0xf3, 0x9d, 0x3d, 0x5a, 0x71, 0x39, 0xe, 0x4a, 0x88, 0xde, 0x1d, 0x0, 0x1d, 0x4e}}
	return a, nil
}

var __01_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x5a\x4f\x73\xdb\x38\xf2\xbd\xfb\x53\xf4\x2d\x4e\x95\x9d\xfa\xcd\x64\xea\x57\xc9\xa4\x72\x90\x6d\x25\xa3\x2d\x5b\xf6\x48\x9a\x9d\xf5\x89\x86\xc8\x96\x88\x35\x09\x30\x00\x18\x59\xf9\xf4\x5b\xf8\x43\x12\x24\x01\x49\xf1\x9c\x12\xab\x5f\x3f\xf4\x6b\x34\x80\x06\xa4\xeb\xc5\x74\xb2\x9a\xc2\x6a\x72\x75\x3b\x85\xaa\x2c\xdf\x95\xa8\x04\x4d\x25\x9c\x9f\x01\x5c\x5e\xc2\x1d\xa1\x0c\x32\x5a\x22\x53\x94\x33\x79\x06\xf0\xf4\xad\x46\xb1\xa7\xd9\x13\xdc\xf2\xdd\x35\x11\x19\x65\xa4\xa0\x6a\x7f\xbe\x54\x82\xb2\xed\x5b\xb8\xbe\xbf\xbb\x9b\xce\x57\xf0\x26\x27\x32\x07\xbe\x01\xe3\x00\x1b\xca\xb6\x28\x2a\x41\x99\x7a\x73\xa1\x79\x24\x8a\xef\x28\x8e\xd3\xcc\x1e\x80\x0b\xc8\xb9\x54\x8c\x94\xa8\x09\x6f\xae\xc0\x3a\x5b\xa2\x8c\x28\xb2\x26\x12\x8f\x53\x3d\x70\xa9\xb6\x02\x97\x7f\xde\xfe\x0e\x8d\x97\x0b\x26\xcd\xb1\x24\xc7\x19\xee\xf6\x3d\xe7\x4f\xe0\x53\x5a\x12\x4b\x58\x4b\x14\x3a\xde\xe3\x94\x69\x41\x91\x29\xd0\x0e\xa0\x3d\xac\xbf\xfd\x34\xd1\xb2\x4f\xa6\xe8\x67\xca\xf0\x5c\x5e\x02\x2c\x15\x61\x19\x11\x19\x14\x64\x8d\x85\x99\x43\x81\x55\x41\x53\xa2\xe7\x34\x91\x78\xc2\x08\x73\x97\x7a\xcf\x11\x24\xaa\x26\xd6\x5a\xaa\x53\xa6\xf2\xda\x02\x3d\x99\x7a\x1e\x69\x8a\x89\xda\x57\x27\xa4\x6a\xb5\xaf\x4c\x14\xce\xcb\x52\x20\xfb\x4e\x05\x67\xba\x44\x8f\x33\x4c\x3b\xb0\x17\x05\xf9\x71\xdc\x73\xf2\x9d\xd0\x82\xac\xa9\xb6\xc2\x0f\xce\x9c\xab\xc0\x2d\xe5\xec\xb8\xfb\xc2\xe0\xbc\x31\x19\xcf\x30\x29\x79\x86\xc5\x09\xd9\xe7\x19\x82\xc1\xba\x84\x73\xa6\x08\x65\x28\x92\xd3\x4a\xec\xba\xc1\x83\x5f\x18\xd7\xb5\x54\xbc\xf4\xaa\xc2\xfe\xef\xdd\x33\xee\x9f\x60\x22\x04\xd9\x9f\x87\x89\x7d\x66\x9f\xc3\xb0\x4b\x1b\xa2\xe3\xfa\x4e\x8a\x1a\x5f\xc9\x66\x7c\x1d\x1d\xd9\xea\xd5\x70\xca\xae\x33\xcb\xf4\x5e\xb5\xa1\x28\x74\xa5\x18\x3f\x50\x39\x51\x90\xf2\xa2\xc0\x54\x01\x61\x19\x48\x64\x19\xb8\xad\xce\x1f\xc0\x96\xe1\x94\xd5\xe5\x07\xbd\x01\x02\xbc\xe9\x3e\x4f\x28\xfb\x4e\x0a\x9a\xbd\x81\xcf\xf0\x7f\x17\xd6\x5a\xee\xe5\xb7\xe2\xb2\x42\xb1\x71\x6b\x1f\x3e\xc3\x2f\x3d\x9b\x2c\xf8\xae\xe0\x5b\x6d\xf8\xb5\x31\x70\xb6\xe5\xd9\xfa\xb2\x12\x7c\x43\x0b\x14\xda\xf6\xfe\x0c\xc0\x2f\x36\x13\xb6\x29\xf7\x5e\xec\x7c\xd3\x44\xfd\x3b\x38\xe6\x0b\xd0\xc3\xbb\xbd\xe7\x02\x50\xa5\xef\xac\xa2\x0a\x05\xe5\x59\x22\x15\x11\xea\x09\x6e\x88\xc2\x15\x2d\xd1\x5b\x4c\xfa\xaf\x5d\x8e\xac\x61\xd7\xf5\xc9\x37\xb0\xae\xd3\x67\x54\x60\xfc\x30\xeb\x71\x15\xc8\xb6\x2a\x7f\x82\xbf\x66\x4c\xbd\xff\xb5\xa3\xba\xa9\x05\x69\xdc\x3d\x32\xcb\x64\x19\xbc\xed\xff\xf8\x1c\x9a\xd4\x41\x46\xb7\x28\x55\xa2\xf0\x45\x7d\x72\x87\xc8\x8e\xaa\x9c\xd7\xca\xec\xbf\x6e\xf5\xbf\x90\xb2\x2a\xf0\x09\x2c\x49\xc7\x71\xcf\xb0\x3b\x7c\x1c\x0a\x36\x82\x97\x7a\xdf\x82\x0d\xaf\x59\x06\xb4\x1f\xa3\x43\x25\x1b\x2e\x4a\xa2\xfa\x75\x30\xfd\xcf\xe4\xee\xe1\x76\x9a\x7c\xb9\x5f\xdc\x4d\x56\xc9\x6c\xfe\xef\xc9\xed\xec\xc6\xaf\x05\x87\xf0\x4b\xe0\xcb\x6c\xfe\x75\xba\x78\x58\xcc\xe6\x2b\x53\x00\xfd\x49\x9e\xb1\x4c\x6f\xa5\x28\xfb\x73\x2c\x90\x14\xfd\xb0\x25\x50\x09\x95\xe0\x39\x5d\xd3\x76\x4a\xa8\x4c\x94\xa8\x99\x26\xc8\xec\x8c\x7c\x08\x51\xd3\x4d\x80\x4b\x71\x0e\x05\x67\x5b\xb3\x16\x76\x44\x42\xcb\xd4\x4f\xc4\x78\x39\x34\x69\x58\x3d\x3e\x4c\x43\x49\x58\x4c\xe6\x37\xf7\x77\x7e\x0e\x96\xb7\xf7\x7f\x4f\x97\x2b\x7f\x01\x7c\x99\x2c\x57\xee\xa3\xf7\xee\xa3\xbf\x67\xab\x3f\x92\xe9\x62\x71\xbf\xd0\x9f\xfe\x16\x4b\xd4\x4e\x27\xaa\x3f\xa5\x3a\xfc\x8a\xa6\xcf\x98\x41\x5d\xf5\xc3\x77\x4b\x65\x5c\x1b\x77\xae\xc9\x19\xd5\x07\x65\xf0\xaf\xe5\xfd\x1c\x6c\x05\xb8\x85\xc4\xea\x32\xd1\x30\x8a\x32\xd1\x05\x98\xec\x88\x60\x94\x6d\xe5\x13\x7c\x29\x38\xe9\xad\x84\x3f\xf8\x0e\x4a\xc2\xf6\xe0\x1c\x4c\x78\xda\x09\x1a\xa7\x61\xd1\x35\x9f\xbf\x4b\x79\xd6\xee\x94\x76\x81\x79\x29\xb8\xa5\xd2\xac\xfe\x06\x3d\xf2\xad\xf5\xba\xb2\xce\x2e\xa8\xde\xfe\x5f\x33\xe3\x8e\x24\x8d\x47\x32\xd2\x89\x42\x70\xf1\x73\x2a\x8d\xcb\x68\x5d\x19\x9e\x91\xc0\xff\xff\x2d\x20\xf0\x96\x48\xa5\x07\x66\x7c\xe0\xeb\x09\x1c\x39\xf7\xf5\x75\x14\x07\x14\x06\x54\x4d\x4a\x43\xd3\x68\xa2\x0c\x54\x4e\xa5\x4f\xa0\x1b\x62\x5b\x3a\x9a\xcd\x72\xed\x13\x45\x4b\x4c\x52\x1d\xde\x88\x72\x95\xa3\xde\x48\x15\x9a\x86\x03\x5f\x30\xad\xcd\xce\xa8\x5d\xf4\x00\x12\x53\xce\x32\x9b\xbf\x12\x9b\x82\xeb\x11\xcb\xba\x7c\x3d\x71\x88\xb0\xa4\x2c\x40\xb8\x2c\x49\x51\xa0\x54\xf6\xd4\x6d\x57\x46\xd2\x10\xfa\x69\xec\xd3\x91\x97\x00\xdd\x15\xdd\x6e\x5f\xc3\x56\x7d\xfc\x18\x60\xfb\xf8\x51\x1f\x72\xa9\x3e\xd8\x0b\xc3\x76\x12\x6d\xc1\xd3\xe7\xf1\xe4\x8c\x8c\xf1\x04\x1b\x5a\xc5\x81\xa4\xdf\x6a\x2a\x10\xb4\x8f\x0c\x65\xb7\x23\xf3\x93\x3b\x36\x7a\xa9\x1a\x19\x7d\xe5\xce\x28\xf8\x4e\x26\x52\xf7\x1f\x01\x01\x9d\x31\x2e\x80\xd5\xe5\xda\xf6\x41\x1a\xad\xbb\x1e\xa5\xf5\xa8\x1c\xc1\x5e\x19\x5a\x05\x1d\x5b\x40\x81\x67\x1c\x2b\xe8\x8c\x31\x05\x7a\x73\xa5\x0c\xb3\xa8\x8a\x16\x10\x56\x32\x1f\xa8\x48\x09\x63\x98\xc1\x25\x2c\xa7\xb7\xd3\xeb\x55\x5f\x43\xcb\x15\xd3\xd1\x01\x22\x5a\x5a\x40\x4c\x0f\xd9\x6c\x30\x55\x07\xf4\xb4\x80\x93\xf4\xa4\x39\x61\x5b\xa3\xe7\xaf\x87\x9b\xc9\x6a\x7a\x01\x37\xd3\xdb\xa9\xfe\x77\x36\x5f\x4e\x17\x03\x7d\x2d\x77\x4c\x5f\x07\x88\xe8\x6b\x01\x31\x7d\x02\x49\x5c\x9b\x31\x9e\x5c\x71\x1a\x6d\x9b\x2e\x45\xd6\x05\xca\xbe\x16\xc3\x15\xd3\x61\x8d\x11\x0d\xc6\x18\x88\xbf\x44\xb1\xc5\xa4\x22\x52\xa2\x0c\x49\xe8\xd9\x4f\x51\x61\x1c\xc0\x3a\xd8\x36\x4d\x2f\x1e\xc9\x85\x02\x52\x6c\xb9\xa0\x2a\x2f\x21\x27\x12\x72\x92\xe9\xa5\x95\xf1\x56\x62\x6f\xac\x80\xca\xbe\x7d\x2c\xb4\x67\x0f\x68\xa5\x8c\xf1\x6c\x9d\x50\x9e\x88\x84\x57\x41\xb9\x43\x48\x58\xb1\x39\x3d\xa5\x11\xd6\x09\xaf\xc8\x16\xed\xf4\xf1\x0a\x6d\x77\x2f\xcd\x25\x23\xab\x0b\xcc\x5a\x91\xc3\x11\x02\x3a\x47\x90\xb1\xd4\x21\xe4\x88\xda\xf5\x5e\x85\xa7\x77\x0c\x0a\x2b\x5e\xd2\x92\x16\x44\xe8\x09\x73\x2e\xb3\x7b\x3b\xf4\x05\xac\x6b\x3b\xc7\x35\xa3\x4a\xf7\xca\x86\x27\xa8\xd7\x8e\x70\x44\xb1\x03\x1d\xd6\x6c\x41\x47\x54\xef\x08\x0d\x1e\x04\x23\x4c\x44\x73\xae\x17\x64\xce\x77\xb6\xf3\x3f\xef\x8e\xb1\xb7\x40\xf5\xb1\xc0\x9f\x61\xc6\x18\xbf\xb9\xb2\x47\x9e\xaa\x49\x51\xec\x6d\x09\xe8\x7c\xe8\x2b\x97\xbb\x3f\x29\x2e\xc8\x16\x83\x39\x31\x01\x1c\x49\x89\xc5\x1c\xce\x88\xc1\xc4\x13\x22\x30\xb5\x47\xe7\x91\xa4\xf4\x71\x3f\x9f\x18\x2d\xdc\xdd\x3c\x89\xbe\x7a\xe9\x8b\x81\xde\xd9\x6c\x2b\x30\xcc\x40\x7f\xb4\x78\x16\x06\xb8\x68\x26\xfa\xb8\x78\x36\xbe\xd5\x58\xe3\xb1\x54\x78\xa0\x7f\x92\x07\x59\x99\x86\x93\xaa\x1c\x85\x49\x8a\xbe\x58\x29\x0e\xc8\x14\x0a\x83\x73\x45\x64\xc6\x03\x73\x19\x90\x34\x73\xef\x18\xf6\xc3\xc6\x4d\x27\xb3\x6d\x5d\x87\xc9\xf4\xe2\x8d\x67\xd2\x07\x45\xd3\xe8\x81\xe2\x39\xd4\xfb\x9d\x4c\x32\x2a\x15\x65\xe9\xa1\x3c\x0e\x80\x07\xb7\x54\x52\x55\x82\xbf\xd0\x92\x28\x2c\xf6\x83\x0d\xb6\x66\xf4\x5b\x8d\x66\x9f\x95\x5e\x7e\x49\x9a\xa2\x94\xe3\x1d\x76\x30\x6c\x3c\x25\x43\x60\x34\x2d\x03\x60\x20\x35\xb6\xb9\xb6\x8f\x3e\xa1\x8c\xf4\xec\x27\x15\x55\xa7\x93\x0e\xef\x26\x8e\x26\x20\xac\x6f\x1f\xeb\xe9\xd9\x03\x32\xdc\x49\x10\xe9\xa3\x3d\xeb\x29\x0d\x81\x81\xb7\x9d\x34\x29\x0a\xd7\x49\x77\x72\x3c\xc2\x80\x18\xdf\x3a\x96\xe2\x59\x03\x42\x54\x59\x25\xb6\x8f\x0a\x09\xf1\xac\xc7\xfa\x4e\x85\x65\xc5\x05\x11\x7b\xd7\x96\x41\x2a\x90\xe8\xed\x8d\x33\x28\xb1\xe4\x62\x6f\xd6\x66\x3b\x5b\xad\x36\x6f\x8c\x80\x36\xdf\x3a\xd6\xe6\x59\x23\xda\x32\x2a\x9f\x8f\x08\xf4\x21\xff\x44\xa5\xe6\x39\xa0\xd1\x1f\x26\x22\xb4\x07\x09\xab\xf5\x21\x87\xa6\x33\x91\xf4\xc7\x91\x39\x75\x90\x48\x85\x72\x45\x0a\x58\xd2\x1f\xf6\x12\x6c\x2a\x54\x6b\xd3\xd5\x39\x4a\x42\x2d\x31\xb3\x6f\x1b\xd1\xc9\x75\x83\x1d\x9a\xe1\x06\x72\x60\x9a\x1d\x64\x28\xfc\xf2\x12\xae\x38\x2f\x90\xb0\xe6\x29\xdb\xad\xe2\x34\xc9\xc3\x07\x98\xb3\x84\xb5\xff\x69\x76\x93\x6b\x92\xe6\x08\x39\xf5\x96\xe1\xa6\x2e\x8a\x44\xdf\x15\x43\x94\x9d\x31\xbe\xe6\xed\x3e\x55\xa1\xd8\x70\x51\x62\x06\x04\xb4\x97\x4d\xa3\xb9\x84\xf6\x87\xfa\x2f\xa7\xf1\xa1\x8c\xf1\xa7\x87\xd2\x5e\x70\x4e\xec\xbf\xcd\xd3\x37\x65\x19\xbe\xa0\x7c\x1b\x98\xb6\xc3\x05\x74\x64\xf4\x66\x71\x10\x06\xb4\xac\x0a\x9a\xea\xf6\x57\x1f\xea\x8c\x8c\xaa\x28\x30\x36\x67\xb6\xdc\x0f\xc6\xd0\x80\x8e\xc4\x22\x87\xe3\x99\xf7\x31\xdd\x76\x76\x8b\xb7\x4b\x3e\x2d\x50\xdf\xc7\x82\xb9\x6f\x6c\xc7\xc4\x9b\x45\x41\xa0\xc1\x8f\xc9\x0f\xc8\x1b\x61\xe2\x83\x35\x50\xfb\x68\xdd\x4e\xf7\x50\x92\xc4\x02\x53\x65\x2b\x47\x10\xb6\xc5\x68\x71\x45\x90\xa7\x1c\x64\x1a\xe8\xae\xb4\x4e\xbd\x21\x00\x89\x44\xa4\xb9\x8e\x89\x80\xc0\x0d\x0a\x64\x29\x0e\xa6\xdd\x0d\x6b\x47\x8c\x87\x65\xed\xaf\x09\xc6\x78\x4a\x1d\x84\x32\x69\x13\x52\x1d\x0c\x21\xc7\x34\x38\x37\x01\xd4\xe9\xe1\x34\x2b\xee\x19\xf7\xcd\x57\x34\x9a\xc1\x6c\xad\xcf\xa8\x8b\x46\xdf\x91\xc9\x46\x37\xbe\xe6\xe1\x59\xf0\x5d\x17\x9f\xae\x88\x78\x82\x3a\xeb\x29\xf1\x68\xb8\x0b\x61\x87\x02\x21\xe3\x0c\xa1\x96\xba\x87\xb6\x99\x1a\x0c\xcb\x77\xc1\xd3\xa4\x33\x9e\x3a\xa8\x9e\x0a\xbe\x1b\xd0\xc7\x36\xd5\xce\xf8\x6a\x4d\xeb\xbd\x7d\xde\xa3\xae\x57\xec\xcf\x39\xe3\x89\xd9\xfd\x12\x5d\x23\xa1\x08\xfa\x80\x53\xa2\x68\xbf\xc0\xf0\x77\x57\x7f\xc0\x2d\xe7\xd9\xf1\x51\x87\xa8\xd7\x0c\xad\x39\xfc\xf1\x2f\x2f\xc1\x7c\x53\xdc\x3f\x26\x33\x9e\xca\x44\xa0\xaa\x45\xe4\x45\xb5\x0f\x38\xe9\xa5\xce\x81\x21\xe3\x69\x5d\xf6\x7a\xd9\x3e\x59\xa0\x21\x18\x00\xc6\xed\x40\x1f\x10\x7a\x72\x44\x59\x71\x26\xf1\xc0\x3d\x63\x08\x89\x8b\x6a\x90\x60\x91\xa6\x0b\x6c\x37\x79\x81\xb2\x2e\x54\xdb\x22\x75\x6f\x91\x03\xfa\xd0\x8b\xe4\x10\x12\x78\x97\x1c\x40\x02\x52\x4d\x2e\xdc\xf3\x75\x74\xea\x1a\xfb\x49\x6b\xc8\x3d\x85\x47\x26\xae\xa1\x8a\xcd\x5b\x6b\x8f\x4c\x5b\x63\xf7\xa5\x9c\xbd\x85\xe9\xfc\xeb\x6c\x3e\x85\xcf\x70\x87\x62\x8b\x2b\x81\x08\x0f\x93\xc5\x6a\xb6\x9a\xdd\xcf\xe1\xea\x11\x14\x7f\x7c\x7c\x7c\xbc\xbb\xbb\xb9\x39\xf7\x7f\x83\xf0\xf6\xec\x7e\x71\x33\x5d\xc0\xd5\xe3\x19\x80\xfd\x3a\xd9\xfd\x94\xec\xc2\xfc\x61\x7f\xd2\x65\xff\xdf\xfc\xbe\xca\x59\xec\x6f\x1b\xcc\xff\x9b\xdf\x55\xd9\xbf\xbc\x5f\x49\xd9\x0f\xfc\x01\xcd\x97\xc8\xcb\xe9\x6a\x35\x9b\x7f\x5d\xda\x95\x95\x6c\x05\x61\x75\x41\x04\x55\x7b\xf8\x0c\x1f\x7e\xf9\xf8\xeb\xa7\x33\x80\xff\x05\x00\x00\xff\xff\xfd\x4c\xcc\x07\x06\x27\x00\x00")

func _01_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initUpSql,
		"01_init.up.sql",
	)
}

func _01_initUpSql() (*asset, error) {
	bytes, err := _01_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6a, 0xfe, 0x8f, 0x11, 0xee, 0xe7, 0x77, 0x29, 0x12, 0xf9, 0xf8, 0x42, 0x78, 0x61, 0xc8, 0x29, 0xa0, 0x52, 0xbb, 0xeb, 0xd8, 0xf8, 0x63, 0x2d, 0x8d, 0xea, 0x80, 0xc, 0x5b, 0x33, 0xcc, 0x5a}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_init.down.sql": _01_initDownSql,

	"01_init.up.sql": _01_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"01_init.down.sql": &bintree{_01_initDownSql, map[string]*bintree{}},
	"01_init.up.sql":   &bintree{_01_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
