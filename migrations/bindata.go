// Code generated by go-bindata.
// sources:
// migrations/sql/01_init.down.sql
// migrations/sql/01_init.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x28\x49\x4c\xca\x49\x55\x28\x2c\x4d\x2d\xca\x4c\x2d\xb6\xe6\x02\x04\x00\x00\xff\xff\x83\xb1\x39\x71\x14\x00\x00\x00")

func _01_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initDownSql,
		"01_init.down.sql",
	)
}

func _01_initDownSql() (*asset, error) {
	bytes, err := _01_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init.down.sql", size: 20, mode: os.FileMode(420), modTime: time.Unix(1540386349, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __01_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x98\x5d\x6f\xdb\x36\x14\x86\xef\xfd\x2b\x78\x97\x18\x28\x8a\x2d\x19\x86\xf5\xa2\x17\xce\xa2\x76\x06\xf2\x51\x38\x1e\x3a\x5f\x31\xb4\x74\x22\x73\x91\x48\x95\xa4\x1a\x7b\xbf\x7e\x90\x28\xc9\xfc\x38\x54\xee\xe2\xf3\xbc\x21\x9f\x43\x4b\xb4\xc4\x3f\x37\xd9\x6a\x9b\x91\xed\xea\xe6\x2e\x23\x3f\x5a\x50\x1c\x34\xb9\x5c\x10\x52\xf0\x12\xb4\x21\x4f\x46\x71\x51\x7e\x98\x0a\xd4\xc0\xd1\xab\xee\xa9\x06\xf5\x13\x54\x50\xcb\x0f\x50\x33\xbf\xd6\x6a\x50\x82\xd5\xe0\x54\xf3\x8a\x83\x30\xf4\x20\xbd\x99\x9e\x2b\xb6\x87\x4a\x7f\x7c\x85\xd3\x33\x59\x29\xc5\x4e\x97\x16\x2e\x5d\xfa\x93\x55\x2d\x20\x9c\x95\xdd\x90\x6d\xcb\x0b\x67\xc8\x06\x14\x97\x05\xd5\x86\x29\x43\x6e\x99\x81\x2d\xaf\xc1\x01\x15\x88\xd2\x1c\xc8\xdf\x6b\x61\xae\xaf\xba\x3a\x1c\x59\xdd\x54\xae\xeb\x50\xa1\x2f\x52\xd5\xcc\x90\x4c\xb4\xf5\x1f\x97\x17\xd9\x3f\xab\xfb\x6f\x77\xd9\x05\xf9\x4c\x7e\xf9\x40\x2e\x6e\xd7\x5f\xb3\xa7\x6d\xf7\xe9\xd7\x5e\x86\x6b\x6a\x54\x2b\x72\x66\xa0\x88\x47\xa7\xe6\xd4\xc0\x30\xd2\x82\x10\x42\x2e\x36\xab\x87\xdb\xc7\x7b\x3b\x9a\xad\x3c\xdd\x3d\x7e\x1f\x87\x1c\x4a\x5f\x56\x4f\xdb\xa1\x74\x35\x94\xbe\xaf\xb7\x7f\xd1\x6c\xb3\x79\xdc\x74\xd5\xeb\x05\x21\x4b\x77\x9e\x1a\x8c\xe2\xb9\x76\xba\x11\x6d\x4d\xbb\xaf\xfb\x44\xdf\xb8\x39\xd0\x37\xa6\x04\x17\xa5\xee\x1d\x7f\xff\xad\x5f\xe7\xb1\xf6\x31\x97\x05\xb6\xd0\x6e\xa0\x15\x66\x4c\xd8\x11\x96\xc8\x24\xa0\x94\x54\xde\x14\xb6\x92\x9c\x60\xc2\xf3\xc3\x77\x97\xec\x79\xd0\x71\x4a\xc3\x6b\xa0\xb9\x30\xce\xb2\x7b\x48\xb7\x35\xf9\x52\x49\x86\xb1\x9a\x8b\x34\x63\xc7\x24\x6b\x3e\x7d\x4a\xb2\x43\xe9\x74\x70\x7d\xb5\xb4\x81\x4a\xe6\xaf\xb8\xea\x99\x44\xa6\x67\x14\x89\x3a\x28\xf4\x3c\xa3\x48\xf3\x8c\x26\xcb\x81\x0f\x9a\x4a\xbe\x69\xaa\xbb\x1b\x6b\xd4\x1c\x17\xfb\x4c\x3a\x4d\x9c\x74\x96\x09\xc2\x8e\x09\xd2\x39\xe2\xc4\x5b\xc8\xe1\x52\x18\x78\x77\xbd\x73\x01\x05\x6e\x39\x51\xd4\x74\xa2\xa8\xed\x99\x62\xc6\x13\x45\xad\x27\x3a\x63\xce\x5e\x5e\x20\x37\x29\xf3\x89\xa2\xe6\x13\x45\xcd\xcf\x14\x33\x9f\x28\x6a\x3e\xd1\x19\x73\x05\x2c\x61\xdd\x13\xd4\xb8\x27\xa8\xad\x25\x98\x69\x4f\x50\xcb\x9e\xe0\x86\x35\xa8\x12\x68\xc3\xb4\x06\x1d\x49\x7a\x30\xf4\xf4\x60\xa8\xea\xc3\xc0\xd6\x83\xa1\xb0\x07\x71\x67\x2e\x84\x2c\xf6\x94\x4b\xaa\xa8\x6c\x62\xed\x90\x87\xe6\x21\x0f\xe5\x23\x1e\xf8\x87\x3c\x6c\x21\xe4\xef\x77\xb1\x3f\x19\x64\xf9\xe3\xc4\x5c\x27\x36\x31\xd7\xcb\x90\x98\xe9\xc6\x26\xe6\xfa\xb1\x89\xf7\x3b\x7a\x63\xdc\x6e\x85\xde\x36\x1a\x25\xa2\x9d\x3b\x4a\x44\x1b\x78\x9c\x08\xf7\xf1\x28\x11\x6d\xe7\x51\x22\xb1\xab\x0f\x39\x05\xb9\xfd\x05\x98\xed\xca\x4f\xa5\x3a\xf3\x53\xa9\xee\x82\x54\xa2\x43\x3f\x95\xea\xd2\x4f\xcd\x77\xfa\xa3\x85\x16\xe6\xdb\x74\x22\xa9\x1e\x9d\x48\xaa\x41\x37\x92\xe8\xce\x89\xa4\x5a\x73\x22\xf3\x7d\x35\xac\x04\x4d\x0b\xae\x0d\x17\x79\xfc\x1b\x8d\xa7\x12\x77\x5b\x90\x4a\xdc\x71\x61\x0a\xbf\xeb\x82\x54\xe2\xce\x0b\x52\xf8\xdd\x67\x9f\xa4\xec\x73\x7a\xd4\xa0\x07\xc3\xbe\x3c\x18\xb6\xe3\xc3\xa0\x0b\x0f\x86\xf2\x1e\xc4\x9d\x87\x5d\x0d\x7b\x6c\x72\x50\xe8\xeb\xa0\xd0\xd6\x45\x81\xab\x83\x42\x53\x07\xe1\x9e\xa6\x6e\xa8\x61\xfb\x0a\xd9\xa4\x1d\x14\x7a\x3a\x28\xf4\x74\x51\xe0\xe9\xa0\xd0\xd3\x41\x69\xcf\x82\xeb\xd7\x39\x59\x97\x63\xc6\x2e\xc7\xb4\x3d\x8e\xb8\xbb\x1c\x6b\xc0\xe5\xef\xac\x36\xd5\xfc\xbf\xb9\x25\x1f\x78\x72\xdd\x07\x9e\x5c\xfc\x91\xa7\xbe\x81\x81\x27\xbf\x86\x81\x27\xee\xc7\x9c\x1e\x78\x7c\xf1\xbe\xb4\x55\x45\x75\xce\x04\x4e\xfe\x95\x3c\x26\xce\x84\x49\x22\x85\x5d\xd9\x68\x54\x5e\x81\x96\x0a\x11\x19\x41\xea\x3f\x35\x54\x90\x1b\xab\xa5\x98\x28\x01\x97\x1b\x62\x36\x31\x0b\xf3\x03\xe4\xc8\x34\x9d\x43\xe2\xbf\x7b\xd4\xbf\xd7\x60\x04\x5d\x45\x21\x29\x17\x05\x1c\x69\xab\x91\xd7\x01\x21\x69\x29\x65\x91\x8e\x94\xaa\xd1\xc6\x3d\xab\x29\x55\xc3\xbd\x17\xcf\xe7\x8a\xed\xb9\x30\xee\xe1\x8b\xf3\xc2\x3a\x52\xef\xf0\x65\xe0\x8b\x25\xc9\x1e\xbe\xae\x1f\x32\xf2\x99\xdc\x77\x8f\xb9\x5b\x05\x40\xbe\xad\x36\xdb\xf5\x76\xfd\xf8\x40\x6e\x76\xc4\xc8\xdd\x6e\xb7\xbb\xbf\xbf\x74\xcf\x63\x96\x8b\xc7\xcd\x6d\xb6\x21\x37\xbb\x05\x21\xf6\x1c\xc4\x9e\x35\x7d\xb0\x7f\x8f\x27\x4c\xd3\xc7\xf1\x20\xe9\xcc\xfb\xd3\x26\xfb\xd1\x39\x52\xb2\x05\x77\xaa\x05\x21\xcb\xc5\xff\x01\x00\x00\xff\xff\xbf\x4b\x71\x62\xf3\x12\x00\x00")

func _01_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initUpSql,
		"01_init.up.sql",
	)
}

func _01_initUpSql() (*asset, error) {
	bytes, err := _01_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init.up.sql", size: 4851, mode: os.FileMode(420), modTime: time.Unix(1541839663, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_init.down.sql": _01_initDownSql,
	"01_init.up.sql": _01_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"01_init.down.sql": &bintree{_01_initDownSql, map[string]*bintree{}},
	"01_init.up.sql": &bintree{_01_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

