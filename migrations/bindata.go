// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/sql/01_init.down.sql (20B)
// migrations/sql/01_init.up.sql (9.028kB)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x28\x49\x4c\xca\x49\x55\xc8\x4d\x2d\x29\xca\x4c\x2e\xb6\xe6\x02\x04\x00\x00\xff\xff\x6b\xf9\xb4\xa3\x14\x00\x00\x00")

func _01_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initDownSql,
		"01_init.down.sql",
	)
}

func _01_initDownSql() (*asset, error) {
	bytes, err := _01_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf5, 0xb9, 0x22, 0xf, 0xca, 0x89, 0xa5, 0x5, 0xf2, 0xed, 0x48, 0xd7, 0xe0, 0x9d, 0xec, 0x2, 0xab, 0x87, 0xf3, 0x9d, 0x3d, 0x5a, 0x71, 0x39, 0xe, 0x4a, 0x88, 0xde, 0x1d, 0x0, 0x1d, 0x4e}}
	return a, nil
}

var __01_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x5a\x5d\x53\x23\xb7\x12\x7d\xe7\x57\xf4\x1b\x50\x65\xb6\xea\x26\xf7\x21\xbb\x5b\x79\x00\x3c\x9b\xf8\x16\x60\x82\x9d\x4a\x78\x9a\x95\x67\xda\x33\xba\xcc\x48\x83\xa4\x59\xe3\xfc\xfa\x94\x3e\xe6\x5b\xb2\xbd\xec\x13\x05\x7d\xfa\xb4\x4e\xab\x25\xb5\xc4\xdc\x3e\x45\xd7\xeb\x08\xd6\xd7\x37\x77\x11\x2c\xbe\xc0\xc3\x72\x0d\xd1\xdf\x8b\xd5\x7a\x05\x25\x2a\x41\x13\x79\x76\x71\x06\x00\xf0\x5a\xa3\xd8\xd3\x14\x56\x4a\x50\x96\xc1\xed\xf2\xfe\x3e\x7a\x58\xc3\x79\x4e\x64\x0e\x7c\x6b\xed\xb0\xa5\x2c\x43\x51\x09\xca\xd4\xf9\xcc\xf8\xa5\xb1\x44\xf1\x0d\xc5\xc4\x31\xe5\x25\x32\x45\x39\xfb\x04\x8b\x47\xe0\x02\x72\x2e\x15\x23\x25\x6a\xb6\xf9\x0d\x58\xb7\x96\x25\x25\x8a\x6c\x88\xc4\x09\xcf\x23\x97\x2a\x13\xb8\xfa\xe3\xee\x13\x34\xa0\x2e\x76\x92\x63\x49\x26\x3e\xf7\xfb\x01\xfc\x33\xf4\x49\xac\x4f\x4b\x51\x4b\x14\x66\x58\x63\x92\xa4\xa0\xc8\x14\x68\x3b\x68\x40\xeb\x61\x0d\xb1\xd6\x13\x72\x1a\x2a\x76\x9e\x5f\x0b\xb2\xc1\x42\x7e\x78\xc1\xfd\x57\xb8\x16\x82\xec\x2f\xac\xfb\x65\xe7\x7f\x5b\x4b\xc5\x4b\xb0\x48\x13\x56\x8e\xbc\xbf\x91\xa2\xc6\x13\xfd\x0d\xb6\x21\x20\x99\x1e\x75\x5d\x7b\x26\x79\x91\xea\xa9\xda\x52\x14\x7a\x72\x0c\x10\x54\x4e\x14\x24\xbc\x28\x30\x51\x40\x58\x0a\x12\x59\xda\x14\x8d\xa3\x74\xbf\xc5\x92\xd7\x22\x99\x66\x30\x7a\xfb\xf0\x09\x64\xc1\x77\x05\xcf\x66\x50\xa1\xd8\xba\xe4\xcf\xe0\x9e\xb3\x8c\xc3\xfc\x66\x06\x8f\x28\x12\xce\x08\xac\x4c\x3d\xcc\x00\x55\xe2\xd8\x2b\x14\x94\xa7\xb1\x54\x44\x28\x98\x13\x85\x6b\x5a\x62\xc7\x6e\x7e\xdb\xe5\xc8\x9a\x51\x52\xce\xf4\xf0\x37\x75\xf2\x82\x0a\x8c\x1b\xa6\x43\xae\x02\x59\xa6\x72\xf8\x73\xc1\xd4\xcf\x3f\x75\x54\xf3\x5a\x90\xc6\xbd\x47\x66\x99\x1c\x43\xaf\xf4\x27\x42\xcb\xbd\x7c\x2d\x20\xa5\x19\x4a\x15\x2b\x7c\x53\x9f\xdd\x7a\xd9\x51\x95\xf3\x5a\x99\x4a\x74\x3c\xf8\x46\xca\xaa\x98\x26\x6b\xc9\xb0\x5b\x67\x0d\x68\x2b\x78\x09\x12\x15\x6c\x79\xcd\x52\xa0\xa3\x31\x39\x58\xbc\xe5\xa2\x24\x0a\x22\x56\x97\xbf\x5c\x9c\x47\x7f\x5f\xdf\x3f\xde\x45\xe7\xf0\x2b\xfc\x67\x06\xe7\xf3\xc5\x6f\xd1\x6a\xad\x7f\xfb\xa9\x57\x28\x0b\x96\xd2\x84\x28\x94\xc3\x89\x16\x48\x8a\xe1\x18\x24\x50\x09\x95\xe0\x39\xdd\xd0\x2e\x9f\x54\xc6\x4a\xd4\x4c\x33\xa4\x26\x9d\xbf\xf8\xa8\xe9\xd6\xc3\xa5\x38\x87\x82\xb3\xcc\x14\xd5\x8e\x48\x68\x89\x46\xaa\xd4\xbe\xc2\x46\xd3\xd3\xf5\xc3\x7c\x79\xdf\x48\x5a\xdd\x2d\xff\x6a\x34\xcd\xe0\xfc\xcb\xf5\x6a\xed\x7e\xfd\x79\x06\xe7\x7f\x2d\xd6\xbf\xc7\xd1\xd3\xd3\xf2\x49\xff\xe5\xbf\x5e\xd1\x3b\x2d\x7a\x98\x6b\x3d\x94\x8a\x26\x2f\x98\x42\x5d\x8d\x86\xe2\x0a\x7d\x32\x69\xff\x5b\x2d\x1f\x40\x90\x5d\xb3\x12\x60\xcb\x05\x64\xf4\x1b\xb2\x21\xb9\xa3\x63\x75\x19\xeb\xbf\x53\x94\xb1\x2e\x8d\x78\x47\x04\xa3\x2c\x93\xf0\xa5\xe0\x64\x50\x92\xbf\xf3\x1d\x94\x84\xed\xc1\xe1\xcd\xf0\xb4\x0f\xb4\x3e\xe3\x6a\xf8\xda\x58\x3e\x24\x3c\x6d\xb7\x08\x5b\xeb\xbd\x24\xdc\x51\xa9\x74\xa5\x35\x68\x8f\x77\xcd\x54\xe3\xee\x06\xd6\xf3\xbf\x2e\xb5\x5d\x33\x20\x49\x0e\x0c\x67\x22\x16\x85\xe0\xe2\xbb\xa4\x1a\x8f\xa9\x4e\x4b\x74\x9a\xca\x3b\x22\x95\x8e\xcc\xf8\xc4\xfb\x7b\x54\x76\x34\x87\x74\x4e\xb5\x39\x9a\xc6\x4e\x19\xa8\x9c\xca\x21\xc1\xd5\x55\x7b\x16\x9b\x4d\xd5\xb0\xed\x63\x45\x4b\x8c\x13\xa6\xa6\xa4\xeb\x1c\xf5\xf6\xa6\x50\x9f\xb0\x80\x6f\x98\xd4\x66\xbf\xd2\x1e\x3a\x84\xc4\x84\xb3\xd4\xe6\xb1\x44\xf5\xa1\xd9\xad\xfb\xc4\xb2\x2e\xdf\x4d\xec\x25\x2c\x29\x9b\x12\xae\x4a\x52\x14\x28\x95\x3d\x89\xda\xfd\x2d\x6e\x08\x07\x79\x18\xd2\x91\xb7\x29\xdd\x0d\xcd\xb2\x77\xb1\x55\x1f\x3f\x4e\xd9\x3e\x7e\xd4\xc7\x42\xa2\x8f\xbe\xc2\xb0\x9d\x46\x5b\xf0\xe4\x65\x32\x39\x53\x63\x30\xc1\x86\x56\x71\x20\xc9\x6b\x4d\x05\x82\x76\x91\xde\xec\x76\x64\xbd\xe4\x7a\x8c\x5d\xaa\xa6\xc6\x9e\xf2\xc6\x28\xf8\x4e\xc6\x52\x37\x03\x1e\x01\x9d\x31\x28\x80\xd5\xe5\xc6\x76\x0a\x1a\xac\xfb\x02\xa5\xf5\xa8\x1c\xc1\xb6\x3f\x9d\x82\x8e\xcd\xa3\xa0\x67\x9c\x2a\xe8\x8c\x21\x05\x7a\x6b\xa5\x0c\xd3\xa0\x8a\x16\xe0\x55\xf2\x30\x52\x91\x10\xc6\x30\x85\x2b\x58\x45\x77\xd1\xed\x7a\xa4\xa1\xe5\x0a\xe9\xe8\x00\x01\x2d\x2d\x20\xa4\x87\x6c\xb7\x98\xa8\x03\x7a\x5a\xc0\x29\x7a\x92\x9c\xb0\xcc\xe8\xf9\xf3\x71\x7e\xbd\x8e\x66\x30\x8f\xee\x22\xfd\x73\xf1\xb0\x8a\x9e\xc6\xfa\x5a\xee\x90\xbe\x0e\x10\xd0\xd7\x02\x42\xfa\x04\x92\xb0\x36\x63\x3c\xb5\xe2\x34\xd8\xb6\x46\x8a\x6c\x0a\x94\x23\x2d\x86\x2b\xa4\xc3\x1a\x03\x1a\x8c\xd1\x33\xfe\x12\x45\x86\x71\x45\xa4\x44\xe9\x93\x30\xb0\x9f\xa0\xc2\xe0\xc1\xe2\x6d\xff\xa5\x17\x8f\xe4\x42\x01\x29\x32\x2e\xa8\xca\x4b\xc8\x89\x84\x9c\xa4\x7a\x69\xa5\xbc\x93\x38\x88\xe5\x51\x39\xb4\x4f\x85\x0e\xec\x1e\xad\x94\x31\x9e\x6e\x62\xca\x63\x11\xf3\xca\x2b\x77\x0c\xf1\x2a\xbe\xd5\x07\x9f\x34\xc2\x3a\xe1\x15\xc9\xd0\x4e\x1f\xaf\xd0\xf6\xdc\xd2\xdc\x09\xd2\xba\xc0\xb4\x13\x39\x8e\xe0\xd1\x39\x81\x4c\xa5\x8e\x21\x47\xd4\x6e\xf6\xca\x3f\xbd\x53\x90\x57\xf1\x8a\x96\xb4\x20\x42\x4f\x98\xf3\x58\x2c\x6d\xe4\x19\x6c\x6a\x3b\xc7\x35\xa3\x4a\x37\xc1\x86\xc6\xaf\xd7\x46\x38\xa2\xd8\x81\x0e\x6b\xb6\xa0\x23\xaa\x77\x84\x7a\x0f\x82\x09\xc6\xaf\x39\xd7\x0b\x32\xe7\x3b\xdb\xd2\x5f\x74\xc7\xd8\x25\x50\x7d\x2c\xf0\x17\x58\x30\xc6\xe7\x37\xf6\xc8\x53\x35\x29\x8a\xbd\x2d\x01\x9d\x0f\x7d\x31\x72\xb7\x1c\xc5\x05\xc9\xd0\x9f\x13\x33\x80\x23\x29\xb1\x98\xc3\x19\x31\x98\x70\x42\x04\x26\xf6\xe8\x3c\x92\x94\x21\xee\xbb\x13\xa3\x85\xbb\xfb\x21\xd1\x77\x2a\x73\x6b\x10\x06\x9a\xbc\x4c\xab\x62\x18\x2d\x9c\x85\x11\x2e\x98\x89\x21\x2e\x9c\x8d\xd7\x1a\x6b\x3c\x96\x8a\x1e\xe8\x07\xf2\x20\x2b\xd3\x70\x52\x95\xa3\x30\x49\xd1\xb7\x2c\xc5\x01\x99\x42\x61\x70\xae\x88\x4c\x38\x30\x97\x02\x49\x53\xb4\x9b\xa7\xfd\x63\xe3\xa6\x93\xd9\xb6\xae\x93\x64\xf6\xc6\x1b\xce\x64\x1f\x14\x4c\x63\x0f\x14\xce\xa1\xde\xf0\x64\x9c\x52\xa9\x28\x4b\x0e\xe5\x71\x04\x3c\xb4\xa5\x92\xaa\x12\xfc\x8d\x96\x44\x61\xb1\x1f\x6d\xb0\x35\xa3\xaf\x35\x9a\x7d\x56\xf6\xf2\x4b\x92\x04\xa5\xf4\xec\xb0\xa3\xb0\xe1\x94\x8c\x81\xc1\xb4\x8c\x80\x9e\xd4\xd8\xee\xda\x3e\xc5\xf8\x32\x32\xb0\x9f\x52\x54\x9d\x4e\x3a\xb9\x9b\x38\x1a\x8f\xb0\xa1\x7d\xaa\x67\x60\xf7\xc8\x70\x27\x41\xa0\x8f\xee\x59\x4f\x68\x08\x0c\xba\xed\xa4\x49\x51\xb8\x4e\xba\x27\xa7\x47\xe8\x11\xd3\xb7\x4e\xa5\xf4\xac\x1e\x21\xaa\xac\x62\xdb\x48\xf9\x84\xf4\xac\x47\xfa\x4e\x85\x65\xc5\x05\x11\x7b\xd7\x96\x41\x22\xd0\xbc\x0f\x71\x06\x25\x96\x5c\xec\xcd\xda\x6c\x67\xab\xd3\xd6\x8b\xe1\xd1\xd6\xb7\x4e\xb5\xf5\xac\x01\x6d\x29\x95\x2f\x47\x04\xf6\x21\x3f\xa0\x52\xd3\x1c\xd2\xd8\x0f\x13\x10\x3a\x80\xf8\xd5\xf6\x21\x87\xa6\x33\x96\xf4\x9f\x23\x73\xea\x20\xfe\x0a\xe5\x8a\x14\xb0\xa2\xff\xd8\x4b\xb0\xa9\x50\xad\x4d\x57\xe7\x24\x09\xb5\xc4\xd4\xbe\x6e\x84\x27\xd7\x05\x3b\x34\xc3\x0d\xe4\xc0\x34\x3b\xc8\x44\xf8\xd5\x15\xdc\x70\x5e\x20\x61\xe3\xd7\x94\x24\xce\xfd\x47\x98\xb3\x78\xd5\xff\x61\xf6\x93\x5b\x92\xe4\x08\x39\xed\x2f\xc4\x6d\x5d\x14\xb1\xbe\x2e\xfa\x28\x3b\x63\x70\xd5\xdb\x9d\xaa\x42\xb1\xe5\xa2\xc4\x14\x08\x68\x27\x9b\x48\x73\x0d\x1d\x85\xfa\x3f\xa7\xe1\x50\xc6\xf8\xbd\xa1\xb4\x13\x5c\x10\xfb\xb3\x79\xa2\xa6\x2c\xc5\x37\x94\x97\xbe\x89\x3b\x5c\x42\x87\xa3\x37\xcb\x83\x30\xa0\x65\x55\xd0\x44\x37\xc0\xfa\x58\x67\x64\x52\x47\xbe\xd8\x9c\xd9\x82\x3f\x38\x86\x06\x74\x78\x2c\x72\x1c\xcf\xbc\x90\xe9\xc6\xb3\x5b\xbe\xbd\xe4\xd3\x02\xf5\x95\xcc\x9b\xfb\xc6\x76\x44\xbc\x59\x16\x04\x1a\xb8\x87\xfc\x80\xbc\x09\x26\x18\xac\x41\xda\x37\xec\x76\xba\x27\x92\x24\x16\x98\x28\x5b\x39\x82\xb0\x0c\x83\xc5\x15\x40\x9e\x70\x94\x69\x9c\xbb\xd4\x3a\xf5\xc6\x1f\x24\x12\x91\xe4\x7a\x4c\x04\x04\x6e\x51\x20\x4b\x70\x3c\xed\x2e\xac\x8d\x18\x1e\x96\xb5\xbf\x63\x30\xc6\x51\xea\x41\x28\x93\x36\x21\xd5\xe1\x21\xe4\x98\x78\xe7\xc6\x83\x3a\x79\x38\xcd\x8a\x7b\xc1\x7d\xf3\xdf\x17\x4d\x60\x36\xd7\x17\xd4\x45\xa3\x6f\xc9\x64\xab\x5b\x5f\xf3\xf8\x2c\xf8\xae\x37\x3e\x5d\x11\xe1\x04\x75\xd6\x13\xc6\xa3\xd1\x6e\x08\x3b\x14\x08\x29\x67\x08\xb5\xd4\x5d\xb4\xcd\xd4\x38\x2c\xdf\x79\xcf\x93\xce\x78\x62\x50\x3d\x15\x7c\x37\xa6\x0f\x6d\xaa\x9d\xf1\xbd\x9a\x36\x7b\xfb\xc0\x47\x5d\xb7\x38\x9a\x73\xc6\x63\xb3\xfd\xc5\xba\x48\x7c\x23\x18\x02\x4e\x18\x45\xfb\xaf\x8c\xfe\xee\x3a\x08\x98\x71\x9e\x1e\x8f\x3a\x46\xbd\x23\xb4\xa6\x18\xc6\xbf\xba\x82\xd2\xfc\xff\x75\x78\x50\xa6\x3c\x91\xb1\x40\x55\x8b\xc0\xab\xea\x10\x70\xca\x6b\x9d\xc3\x42\xca\x93\xba\x1c\xf6\xb3\x43\x32\x4f\x53\x30\x02\x4c\x5b\x82\x21\xc0\xf7\xec\x88\xb2\xe2\x4c\xe2\x81\xbb\xc6\x18\x12\x14\xd5\x00\xc1\xfd\x0b\x59\x77\x82\xed\x36\x2f\x50\xd6\x85\x6a\xdb\xa4\xde\x7b\xe4\x88\xde\xf7\x2a\x39\x86\x78\xde\x26\x47\x10\x8f\x54\x93\x0b\xf7\x86\x1d\x9c\xba\xc6\x7e\xca\x2a\x72\xcf\xe1\xa1\x89\x6b\xa8\x42\xf3\xd6\xda\x03\xd3\xd6\xd8\x7b\x52\xce\x2e\xcf\xa2\x87\xdf\x16\x0f\x11\xfc\x0a\xf7\x28\x32\x5c\x0b\xc4\xb3\xc7\xeb\xa7\xf5\x62\xbd\x58\x3e\xc0\xcd\x33\x28\xfe\xfc\xfc\xfc\x7c\x7f\x3f\x9f\x5f\xf4\x3f\x0e\xb8\x3c\x5b\x3e\xcd\xa3\x27\x8d\xb8\x70\xdf\xb1\xcc\xda\x0f\x53\x66\xbd\x8f\x4b\x66\xed\x27\x23\xb3\xde\x97\x1f\xb3\xe1\x37\x1d\xb3\xc1\x87\x07\x97\x9f\xcf\xfe\x0d\x00\x00\xff\xff\xe1\x1b\xc4\x5c\x44\x23\x00\x00")

func _01_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initUpSql,
		"01_init.up.sql",
	)
}

func _01_initUpSql() (*asset, error) {
	bytes, err := _01_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x12, 0x9, 0x11, 0xba, 0xbf, 0xbf, 0x7a, 0xb0, 0x9c, 0xe4, 0x71, 0x44, 0x49, 0x1f, 0x6d, 0x1a, 0xb2, 0x69, 0x85, 0x24, 0x4, 0xb9, 0x92, 0x79, 0x1f, 0x64, 0x5b, 0xfd, 0xad, 0x77, 0x9c, 0x31}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_init.down.sql": _01_initDownSql,

	"01_init.up.sql": _01_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"01_init.down.sql": &bintree{_01_initDownSql, map[string]*bintree{}},
	"01_init.up.sql":   &bintree{_01_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
