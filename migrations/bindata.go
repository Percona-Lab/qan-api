// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/sql/01_init.down.sql (20B)
// migrations/sql/01_init.up.sql (9.984kB)
// migrations/sql/02_postgresql_columns.down.sql (979B)
// migrations/sql/02_postgresql_columns.up.sql (2.04kB)
// migrations/sql/03_add_agent_type.down.sql (233B)
// migrations/sql/03_add_agent_type.up.sql (270B)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x28\x49\x4c\xca\x49\x55\xc8\x4d\x2d\x29\xca\x4c\x2e\xb6\xe6\x02\x04\x00\x00\xff\xff\x6b\xf9\xb4\xa3\x14\x00\x00\x00")

func _01_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initDownSql,
		"01_init.down.sql",
	)
}

func _01_initDownSql() (*asset, error) {
	bytes, err := _01_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf5, 0xb9, 0x22, 0xf, 0xca, 0x89, 0xa5, 0x5, 0xf2, 0xed, 0x48, 0xd7, 0xe0, 0x9d, 0xec, 0x2, 0xab, 0x87, 0xf3, 0x9d, 0x3d, 0x5a, 0x71, 0x39, 0xe, 0x4a, 0x88, 0xde, 0x1d, 0x0, 0x1d, 0x4e}}
	return a, nil
}

var __01_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x5a\x4f\x73\xdb\x38\xf2\xbd\xfb\x53\xf4\x2d\x4e\x95\x3d\xf5\x9b\x64\xea\x57\xc9\xa4\x72\x90\x6d\x25\xa3\x2d\x5b\xf6\x48\x9a\x9d\xf5\x89\x86\xc8\x96\x88\x35\x09\x30\x00\x18\x59\xf9\xf4\x5b\xf8\x43\x12\x24\x01\x49\xf1\x9c\x12\xab\x5f\x3f\xf4\x6b\x34\x80\x06\xa4\xeb\xc5\x74\xb2\x9a\xc2\x6a\x72\x75\x3b\x85\x12\x95\xa0\xa9\x84\xf3\x33\x80\xcb\x4b\xb8\x23\x94\x41\x46\x4b\x64\x8a\x72\x26\xcf\x00\x9e\xbe\xd5\x28\xf6\x34\x7b\x82\x5b\xbe\xbb\x26\x22\xa3\x8c\x14\x54\xed\xcf\x97\x4a\x50\xb6\x7d\x0b\xd7\xf7\x77\x77\xd3\xf9\x0a\xde\xe4\x44\xe6\xc0\x37\x60\x1c\x60\x43\xd9\x16\x45\x25\x28\x53\x6f\x2e\x34\x8f\x44\xf1\x1d\xc5\x71\x9a\xd9\x03\x70\x01\x39\x97\x8a\x91\x12\x35\xe1\xcd\x15\x58\x67\x4b\x94\x11\x45\xd6\x44\xe2\x71\xaa\x07\x2e\xd5\x56\xe0\xf2\xcf\xdb\xdf\xa1\xf1\x72\xc1\xa4\x39\x96\xe4\x38\xc3\xdd\xbe\xe7\xfc\x09\x7c\x4a\x4b\x62\x09\x6b\x89\x42\xc7\x7b\x9c\x32\x2d\x28\x32\x05\xda\x01\xb4\x87\xf5\xb7\x9f\x26\x5a\xf6\xc9\x14\xfd\x4c\x19\x9e\xcb\x4b\x80\xa5\x22\x2c\x23\x22\x83\x82\xac\xb1\x30\x73\x28\xb0\x2a\x68\x4a\xf4\x9c\x26\x12\x4f\x18\x61\xee\x52\xef\x39\x82\x44\xd5\xc4\x5a\x4b\x75\xca\x54\x5e\x5b\xa0\x27\x53\xcf\x23\x4d\x31\x51\xfb\xea\x84\x54\xad\xf6\x95\x89\xc2\x79\x59\x0a\x64\xdf\xa9\xe0\x4c\x97\xe8\x71\x86\x69\x07\xf6\xa2\x20\x3f\x8e\x7b\x4e\xbe\x13\x5a\x90\x35\xd5\x56\xf8\xc1\x99\x73\x15\xb8\xa5\x9c\x1d\x77\x5f\x18\x9c\x37\x26\xe3\x19\x26\x25\xcf\xb0\x38\x21\xfb\x3c\x43\x30\x58\x97\x70\xce\x14\xa1\x0c\x45\x72\x5a\x89\x5d\x37\x78\xf0\x0b\xe3\xba\x96\x8a\x97\x5e\x55\xd8\xff\xfd\xf2\x8c\xfb\x27\x98\x08\x41\xf6\xe7\x61\x62\x9f\xd9\xe7\x30\xec\xd2\x86\xe8\xb8\xbe\x93\xa2\xc6\x57\xb2\x19\x5f\x47\x47\xb6\x7a\x35\x9c\xb2\xeb\xcc\x32\xbd\x57\x6d\x28\x0a\x5d\x29\xc6\x0f\x54\x4e\x14\xa4\xbc\x28\x30\x55\x40\x58\x06\x12\x59\xd6\x6c\x75\xfe\x00\xb6\x0c\xa7\xac\x2e\x3f\xe8\x0d\x10\xe0\x4d\xf7\x79\x42\xd9\x77\x52\xd0\xec\x0d\x7c\x86\xff\xbb\xb0\xd6\x72\x2f\xbf\x15\x97\x15\x8a\x8d\x5b\xfb\xf0\x19\x7e\xed\xd9\x64\xc1\x77\x05\xdf\x6a\xc3\xbb\xc6\xc0\xd9\x96\x67\xeb\xcb\x4a\xf0\x0d\x2d\x50\x68\xdb\xfb\x33\x00\xbf\xd8\x4c\xd8\xa6\xdc\x7b\xb1\xf3\x4d\x13\xf5\xef\xe0\x98\x2f\x40\x0f\xef\xf6\x9e\x0b\x40\x95\xfe\x62\x15\x55\x28\x28\xcf\x12\xa9\x88\x50\x4f\x70\x43\x14\xae\x68\x89\xde\x62\xd2\x7f\xed\x72\x64\x0d\xbb\xae\x4f\xbe\x81\x75\x9d\x3e\xa3\x02\xe3\x87\x59\x8f\xab\x40\xb6\x55\xf9\x13\xfc\x35\x63\xea\xfd\xbb\x8e\xea\xa6\x16\xa4\x71\xf7\xc8\x2c\x93\x65\xf0\xb6\xff\xe3\x73\x68\x52\x07\x19\xdd\xa2\x54\x89\xc2\x17\xf5\xc9\x1d\x22\x3b\xaa\x72\x5e\x2b\xb3\xff\xba\xd5\xff\x42\xca\xaa\xc0\x27\xb0\x24\x1d\xc7\x3d\xc3\xee\xf0\x71\x28\xd8\x08\x5e\xea\x7d\x0b\x36\xbc\x66\x19\xd0\x7e\x8c\x0e\x95\x6c\xb8\x28\x89\xea\xd7\xc1\xf4\x3f\x93\xbb\x87\xdb\x69\xf2\xe5\x7e\x71\x37\x59\x25\xb3\xf9\xbf\x27\xb7\xb3\x1b\xbf\x16\x1c\xc2\x2f\x81\x2f\xb3\xf9\xd7\xe9\xe2\x61\x31\x9b\xaf\x4c\x01\xf4\x27\x79\xc6\x32\xbd\x95\xa2\xec\xcf\xb1\x40\x52\xf4\xc3\x96\x40\x25\x54\x82\xe7\x74\x4d\xdb\x29\xa1\x32\x51\xa2\x66\x9a\x20\xb3\x33\xf2\x21\x44\x4d\x37\x01\x2e\xc5\x39\x14\x9c\x6d\xcd\x5a\xd8\x11\x09\x2d\x53\x3f\x11\xe3\xe5\xd0\xa4\x61\xf5\xf8\x30\x0d\x25\x61\x31\x99\xdf\xdc\xdf\xf9\x39\x58\xde\xde\xff\x3d\x5d\xae\xfc\x05\xf0\x65\xb2\x5c\xb9\x8f\xde\xbb\x8f\xfe\x9e\xad\xfe\x48\xa6\x8b\xc5\xfd\x42\x7f\xfa\x5b\x2c\x51\x3b\x9d\xa8\xfe\x94\xea\xf0\x2b\x9a\x3e\x63\x06\x75\xd5\x0f\xdf\x2d\x95\x71\x6d\xdc\xb9\x26\x67\x54\x1f\x94\xc1\xbf\x96\xf7\x73\xb0\x15\xe0\x16\x12\xab\xcb\x44\xc3\x28\xca\x44\x17\x60\xb2\x23\x82\x51\xb6\x95\x4f\xf0\xa5\xe0\xa4\xb7\x12\xfe\xe0\x3b\x28\x09\xdb\x83\x73\x30\xe1\x69\x27\x68\x9c\x86\x45\xd7\x7c\xfe\x4b\xca\xb3\x76\xa7\xb4\x0b\xcc\x4b\xc1\x2d\x95\x66\xf5\x37\xe8\x91\x6f\xad\xd7\x95\x75\x76\x41\xf5\xf6\xff\x9a\x19\x77\x24\x69\x3c\x92\x91\x4e\x14\x82\x8b\x9f\x53\x69\x5c\x46\xeb\xca\xf0\x8c\x04\xfe\xff\x6f\x01\x81\xb7\x44\x2a\x3d\x30\xe3\x03\x5f\x4f\xe0\xc8\xb9\xaf\xaf\xa3\x38\xa0\x30\xa0\x6a\x52\x1a\x9a\x46\x13\x65\xa0\x72\x2a\x7d\x02\xdd\x10\xdb\xd2\xd1\x6c\x96\x6b\x9f\x28\x5a\x62\x92\xea\xf0\x46\x94\xab\x1c\xf5\x46\xaa\xd0\x34\x1c\xf8\x82\x69\x6d\x76\x46\xed\xa2\x07\x90\x98\x72\x96\xd9\xfc\x95\xd8\x14\x5c\x8f\x58\xd6\xe5\xeb\x89\x43\x84\x25\x65\x01\xc2\x65\x49\x8a\x02\xa5\xb2\xa7\x6e\xbb\x32\x92\x86\xd0\x4f\x63\x9f\x8e\xbc\x04\xe8\xae\xe8\x76\xfb\x1a\xb6\xea\xe3\xc7\x00\xdb\xc7\x8f\xfa\x90\x4b\xf5\xc1\x5e\x18\xb6\x93\x68\x0b\x9e\x3e\x8f\x27\x67\x64\x8c\x27\xd8\xd0\x2a\x0e\x24\xfd\x56\x53\x81\xa0\x7d\x64\x28\xbb\x1d\x99\x9f\xdc\xb1\xd1\x4b\xd5\xc8\xe8\x2b\x77\x46\xc1\x77\x32\x91\xba\xff\x08\x08\xe8\x8c\x71\x01\xac\x2e\xd7\xb6\x0f\xd2\x68\xdd\xf5\x28\xad\x47\xe5\x08\xf6\xca\xd0\x2a\xe8\xd8\x02\x0a\x3c\xe3\x58\x41\x67\x8c\x29\xd0\x9b\x2b\x65\x98\x45\x55\xb4\x80\xb0\x92\xf9\x40\x45\x4a\x18\xc3\x0c\x2e\x61\x39\xbd\x9d\x5e\xaf\xfa\x1a\x5a\xae\x98\x8e\x0e\x10\xd1\xd2\x02\x62\x7a\xc8\x66\x83\xa9\x3a\xa0\xa7\x05\x9c\xa4\x27\xcd\x09\xdb\x1a\x3d\x7f\x3d\xdc\x4c\x56\xd3\x0b\xb8\x99\xde\x4e\xf5\xbf\xb3\xf9\x72\xba\x18\xe8\x6b\xb9\x63\xfa\x3a\x40\x44\x5f\x0b\x88\xe9\x13\x48\xe2\xda\x8c\xf1\xe4\x8a\xd3\x68\xdb\x74\x29\xb2\x2e\x50\xf6\xb5\x18\xae\x98\x0e\x6b\x8c\x68\x30\xc6\x40\xfc\x25\x8a\x2d\x26\x15\x91\x12\x65\x48\x42\xcf\x7e\x8a\x0a\xe3\x00\xd6\xc1\xb6\x69\x7a\xf1\x48\x2e\x14\x90\x62\xcb\x05\x55\x79\x09\x39\x91\x90\x93\x4c\x2f\xad\x8c\xb7\x12\x7b\x63\x05\x54\xf6\xed\x63\xa1\x3d\x7b\x40\x2b\x65\x8c\x67\xeb\x84\xf2\x44\x24\xbc\x0a\xca\x1d\x42\xc2\x8a\xcd\xe9\x29\x8d\xb0\x4e\x78\x45\xb6\x68\xa7\x8f\x57\x68\xbb\x7b\x69\x2e\x19\x59\x5d\x60\xd6\x8a\x1c\x8e\x10\xd0\x39\x82\x8c\xa5\x0e\x21\x47\xd4\xae\xf7\x2a\x3c\xbd\x63\x50\x58\xf1\x92\x96\xb4\x20\x42\x4f\x98\x73\x99\xdd\xdb\xa1\x2f\x60\x5d\xdb\x39\xae\x19\x55\xba\x57\x36\x3c\x41\xbd\x76\x84\x23\x8a\x1d\xe8\xb0\x66\x0b\x3a\xa2\x7a\x47\x68\xf0\x20\x18\x61\x22\x9a\x73\xbd\x20\x73\xbe\xb3\x9d\xff\x79\x77\x8c\xbd\x05\xaa\x8f\x05\xfe\x0c\x33\xc6\xf8\xcd\x95\x3d\xf2\x54\x4d\x8a\x62\x6f\x4b\x40\xe7\x43\x5f\xb9\xdc\xfd\x49\x71\x41\xb6\x18\xcc\x89\x09\xe0\x48\x4a\x2c\xe6\x70\x46\x0c\x26\x9e\x10\x81\xa9\x3d\x3a\x8f\x24\xa5\x8f\xfb\xf9\xc4\x68\xe1\xee\xe6\x49\xf4\xd5\x4b\x5f\x0c\xf4\xce\x66\x5b\x81\x61\x06\xfa\xa3\xc5\xb3\x30\xc0\x45\x33\xd1\xc7\xc5\xb3\xf1\xad\xc6\x1a\x8f\xa5\xc2\x03\xfd\x93\x3c\xc8\xca\x34\x9c\x54\xe5\x28\x4c\x52\xf4\xc5\x4a\x71\x40\xa6\x50\x18\x9c\x2b\x22\x33\x1e\x98\xcb\x80\xa4\x99\x7b\xc7\xb0\x1f\x36\x6e\x3a\x99\x6d\xeb\x3a\x4c\xa6\x17\x6f\x3c\x93\x3e\x28\x9a\x46\x0f\x14\xcf\xa1\xde\xef\x64\x92\x51\xa9\x28\x4b\x0f\xe5\x71\x00\x3c\xb8\xa5\x92\xaa\x12\xfc\x85\x96\x44\x61\xb1\x1f\x6c\xb0\x35\xa3\xdf\x6a\x34\xfb\xac\xf4\xf2\x4b\xd2\x14\xa5\x1c\xef\xb0\x83\x61\xe3\x29\x19\x02\xa3\x69\x19\x00\x03\xa9\xb1\xcd\xb5\x7d\xf4\x09\x65\xa4\x67\x3f\xa9\xa8\x3a\x9d\x74\x78\x37\x71\x34\x01\x61\x7d\xfb\x58\x4f\xcf\x1e\x90\xe1\x4e\x82\x48\x1f\xed\x59\x4f\x69\x08\x0c\xbc\xed\xa4\x49\x51\xb8\x4e\xba\x93\xe3\x11\x06\xc4\xf8\xd6\xb1\x14\xcf\x1a\x10\xa2\xca\x2a\xb1\x7d\x54\x48\x88\x67\x3d\xd6\x77\x2a\x2c\x2b\x2e\x88\xd8\xbb\xb6\x0c\x52\x81\x44\x6f\x6f\x9c\x41\x89\x25\x17\x7b\xb3\x36\xdb\xd9\x6a\xb5\x79\x63\x04\xb4\xf9\xd6\xb1\x36\xcf\x1a\xd1\x96\x51\xf9\x7c\x44\xa0\x0f\xf9\x27\x2a\x35\xcf\x01\x8d\xfe\x30\x11\xa1\x3d\x48\x58\xad\x0f\x39\x34\x9d\x89\xa4\x3f\x8e\xcc\xa9\x83\x44\x2a\x94\x2b\x52\xc0\x92\xfe\xb0\x97\x60\x53\xa1\x5a\x9b\xae\xce\x51\x12\x6a\x89\x99\x7d\xdb\x88\x4e\xae\x1b\xec\xd0\x0c\x37\x90\x03\xd3\xec\x20\x43\xe1\x97\x97\x70\xc5\x79\x81\x84\x35\x4f\xd9\x6e\x15\xa7\x49\x1e\x3e\xc0\x9c\x25\xac\xfd\x4f\xb3\x9b\x5c\x93\x34\x47\xc8\xa9\xb7\x0c\x37\x75\x51\x24\xfa\xae\x18\xa2\xec\x8c\xf1\x35\x6f\xf7\xa9\x0a\xc5\x86\x8b\x12\x33\x20\xa0\xbd\x6c\x1a\xcd\x25\xb4\x3f\xd4\x7f\x39\x8d\x0f\x65\x8c\x3f\x3d\x94\xf6\x82\x73\x62\xff\x6d\x9e\xbe\x29\xcb\xf0\x05\xe5\xdb\xc0\xb4\x1d\x2e\xa0\x23\xa3\x37\x8b\x83\x30\xa0\x65\x55\xd0\x54\xb7\xbf\xfa\x50\x67\x64\x54\x45\x81\xb1\x39\xb3\xe5\x7e\x30\x86\x06\x74\x24\x16\x39\x1c\xcf\xbc\x8f\xe9\xb6\xb3\x5b\xbc\x5d\xf2\x69\x81\xfa\x3e\x16\xcc\x7d\x63\x3b\x26\xde\x2c\x0a\x02\x0d\x7e\x4c\x7e\x40\xde\x08\x13\x1f\xac\x81\xda\x47\xeb\x76\xba\x87\x92\x24\x16\x98\x2a\x5b\x39\x82\xb0\x2d\x46\x8b\x2b\x82\x3c\xe5\x20\xd3\x40\x77\xa5\x75\xea\x0d\x01\x48\x24\x22\xcd\x75\x4c\x04\x04\x6e\x50\x20\x4b\x71\x30\xed\x6e\x58\x3b\x62\x3c\x2c\x6b\x7f\x4d\x30\xc6\x53\xea\x20\x94\x49\x9b\x90\xea\x60\x08\x39\xa6\xc1\xb9\x09\xa0\x4e\x0f\xa7\x59\x71\xcf\xb8\x6f\xbe\xa2\xd1\x0c\x66\x6b\x7d\x46\x5d\x34\xfa\x8e\x4c\x36\xba\xf1\x35\x0f\xcf\x82\xef\xba\xf8\x74\x45\xc4\x13\xd4\x59\x4f\x89\x47\xc3\x5d\x08\x3b\x14\x08\x19\x67\x08\xb5\xd4\x3d\xb4\xcd\xd4\x60\x58\xbe\x0b\x9e\x26\x9d\xf1\xd4\x41\xf5\x54\xf0\xdd\x80\x3e\xb6\xa9\x76\xc6\x57\x6b\x5a\xef\xed\xf3\x1e\x75\xbd\x62\x7f\xce\x19\x4f\xcc\xee\x97\xe8\x1a\x09\x45\xd0\x07\x9c\x12\x45\xfb\x05\x86\xbf\xbb\xfa\x03\x6e\x39\xcf\x8e\x8f\x3a\x44\xbd\x66\x68\xcd\xe1\x8f\x7f\x79\x09\xe6\x9b\xe2\xfe\x31\x99\xf1\x54\x26\x02\x55\x2d\x22\x2f\xaa\x7d\xc0\x49\x2f\x75\x0e\x0c\x19\x4f\xeb\xb2\xd7\xcb\xf6\xc9\x02\x0d\xc1\x00\x30\x6e\x07\xfa\x80\xd0\x93\x23\xca\x8a\x33\x89\x07\xee\x19\x43\x48\x5c\x54\x83\x04\x8b\x34\x5d\x60\xbb\xc9\x0b\x94\x75\xa1\xda\x16\xa9\x7b\x8b\x1c\xd0\x87\x5e\x24\x87\x90\xc0\xbb\xe4\x00\x12\x90\x6a\x72\xe1\x9e\xaf\xa3\x53\xd7\xd8\x4f\x5a\x43\xee\x29\x3c\x32\x71\x0d\x55\x6c\xde\x5a\x7b\x64\xda\x1a\xbb\x2f\xe5\xec\x2d\x4c\xe7\x5f\x67\xf3\x29\x7c\x86\x3b\x14\x5b\x5c\x09\x44\x78\x98\x2c\x56\xb3\xd5\xec\x7e\x0e\x57\x8f\xa0\xf8\xe3\xe3\xe3\xe3\xdd\xdd\xcd\xcd\xb9\xff\x1b\x84\xb7\x67\xf7\x8b\x9b\xe9\x02\xae\x1e\xcf\x00\xec\xd7\xc9\xee\xa7\x64\x17\xe6\x0f\xfb\x93\x2e\xfb\xff\xe6\xf7\x55\xce\x62\x7f\xdb\x60\xfe\xdf\xfc\xae\xca\xfe\xe5\xfd\x4a\xca\x7e\xe0\x0f\x68\xbe\x44\x5e\x4e\x57\xab\xd9\xfc\xeb\xd2\xae\xac\x64\x2b\x08\xab\x0b\x22\xa8\xda\xc3\x67\xf8\xf0\xeb\xc7\x77\x9f\xce\xfe\x17\x00\x00\xff\xff\x9f\xe0\x57\x65\x00\x27\x00\x00")

func _01_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initUpSql,
		"01_init.up.sql",
	)
}

func _01_initUpSql() (*asset, error) {
	bytes, err := _01_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x80, 0x4a, 0xb6, 0x61, 0x75, 0xb2, 0xf0, 0x9d, 0xca, 0x46, 0xa5, 0xbd, 0x6d, 0xa0, 0x58, 0xa5, 0x99, 0x44, 0xe1, 0x11, 0xd2, 0x9f, 0x1f, 0x94, 0xb7, 0x81, 0xb4, 0xac, 0x1b, 0xf, 0xc3, 0xb2}}
	return a, nil
}

var __02_postgresql_columnsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd0\x4d\x0e\x82\x30\x10\xc5\xf1\xbd\xa7\xe8\x01\xbc\x81\x2b\x54\x76\x28\x86\xe0\xba\x7c\x4d\x42\x43\x8b\xa6\x1d\xe3\xf5\x0d\x1a\x12\xad\x94\xd7\xfd\x3f\xbf\x69\x5f\x92\x95\x69\x21\xca\x64\x9f\xa5\xc2\x10\x5b\xd5\xba\x8d\x10\xc7\x22\xbf\x88\x43\x9e\x5d\x4f\x67\x51\x19\xe9\xfa\xda\x52\x27\x1b\x3d\x38\xd9\x2b\x96\xed\xc8\xd5\x16\x67\xee\x61\x50\x66\xa9\xee\x62\xb8\x77\x17\xe1\x75\xca\xb2\xa2\x28\x72\x4e\x23\xd4\xa7\x55\xcc\x34\xc6\xa8\x73\x1a\x50\xf5\xad\xad\x35\x1c\xd2\xab\xb0\xb5\x36\xa3\x9f\x61\x0d\x8c\xb8\x50\x62\x13\x4c\xb8\x50\x06\x4c\x26\x73\xc7\x9f\xf6\x2a\x68\x81\xe7\xfd\x87\x01\xb1\xd1\xc3\xe7\x22\x2b\x43\x21\xed\x37\x5a\x91\xa6\x63\x04\xa9\xaf\x6a\xb2\x76\xaf\x00\x00\x00\xff\xff\x92\x15\x3e\x17\xd3\x03\x00\x00")

func _02_postgresql_columnsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__02_postgresql_columnsDownSql,
		"02_postgresql_columns.down.sql",
	)
}

func _02_postgresql_columnsDownSql() (*asset, error) {
	bytes, err := _02_postgresql_columnsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "02_postgresql_columns.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xba, 0xff, 0x8a, 0x34, 0x78, 0x29, 0x20, 0x64, 0xd4, 0x9c, 0x10, 0x61, 0x92, 0xf3, 0x20, 0xc, 0x39, 0xb0, 0xf0, 0x75, 0x33, 0x2e, 0x61, 0x44, 0x22, 0x32, 0x16, 0x53, 0x75, 0xb5, 0x32, 0xd4}}
	return a, nil
}

var __02_postgresql_columnsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x3b\x4f\xc3\x30\x14\x85\xf7\xfe\x8a\xbb\x15\xa4\x8a\x01\x46\xa6\xd2\x96\xa9\x0f\x09\x85\x39\x75\x9c\x5b\x72\x15\x3f\x2a\xfb\x56\x15\xfc\x7a\xe4\x3e\x20\x7d\xd0\xd8\x11\x4b\xa6\xf3\xe9\x7c\xbe\x39\xc3\x69\x36\x79\x83\x6c\xf8\x32\x9d\x80\x46\x76\x24\x7d\x0f\x60\x38\x1e\xc3\x68\x31\x7d\x9f\xcd\x61\xa9\x73\x5f\x09\x87\x65\x5e\xa8\xda\xe7\x15\x71\x2e\x0d\x2f\xe1\x55\x59\xc1\x4f\x8f\x83\xd6\xb4\xdf\xe8\x9f\x34\x8c\x16\xb3\xd9\x64\x9e\x41\x3f\xb3\x2c\x14\x98\x8d\x2e\xd0\x81\x5d\xc1\x9e\x82\x42\x59\x59\x7b\x90\x42\x56\x08\x15\xb1\x87\xe2\x13\xb8\x42\xf0\x2c\x18\x35\x1a\xee\xdf\x6e\x74\x28\xca\x04\xc1\x5d\xbc\x8b\x61\x00\x2f\xdc\x1e\x5a\xe4\x4a\x72\x4c\x98\xe2\x77\x24\xba\x28\x1e\xd8\x64\xcb\xad\x23\x66\x34\x09\x96\x47\xa2\x8b\xe5\x81\x8d\xb2\x54\x56\x0a\x15\xbb\xc3\xb3\x70\x9c\xdb\x0e\xda\xab\x25\x8e\xb0\x51\x17\xb1\xc1\xf3\x74\xb2\x5d\xc2\x02\x1b\x5d\x71\x03\xbc\x02\x74\xf0\x4b\x99\x5f\xa3\x31\x6e\x7d\x57\x80\x0e\x8a\x29\xdb\x63\xd4\xeb\xe8\xdf\x7b\x16\x8e\x53\x0b\x50\xf2\xcf\xfd\x6d\x8a\x3b\xdc\x65\x3e\x5d\x2e\xe5\x6c\x85\xaa\xf7\x37\x60\xd2\xd8\xe2\x76\x9a\xbd\xe5\x15\x02\xa7\xdd\xe0\xd7\xe1\x1b\x70\x32\x1f\x07\xd3\x01\x90\x01\x4d\x4a\x91\x47\x69\x4d\xe9\xe1\x8e\x56\xc0\x4e\xc8\x3a\x27\x1b\x6a\x42\x96\x3c\xa0\x11\x85\xc2\x72\x00\x96\x2b\x74\x5b\xf2\x08\x5f\xe8\xec\xfd\x5f\x2f\x0a\x17\xc0\xd8\x27\x35\xc2\x9d\xde\x14\xf8\x7f\x7d\x53\x0f\xe0\xf9\x3b\x00\x00\xff\xff\xb5\x67\xf1\x34\xf8\x07\x00\x00")

func _02_postgresql_columnsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__02_postgresql_columnsUpSql,
		"02_postgresql_columns.up.sql",
	)
}

func _02_postgresql_columnsUpSql() (*asset, error) {
	bytes, err := _02_postgresql_columnsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "02_postgresql_columns.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe2, 0x1d, 0xed, 0x3f, 0xb, 0xb3, 0x8d, 0x0, 0x6e, 0x61, 0xd9, 0x9f, 0x1, 0x3e, 0xeb, 0xe5, 0x5c, 0x54, 0x66, 0xbf, 0xcf, 0xd5, 0xc0, 0x15, 0xcf, 0xf, 0x81, 0xc6, 0x35, 0x31, 0x5a, 0x93}}
	return a, nil
}

var __03_add_agent_typeDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xcd\x4a\xc4\x30\x18\x45\xf7\xf3\x14\x77\x17\x85\x8e\xf8\xb3\x11\xc5\x45\x1d\x23\x08\xcd\x14\x24\x2e\x5c\xcd\xc4\xf4\x6b\x1b\xc8\x9f\x49\x54\xfa\xf6\x12\xaa\xe8\xf6\x1c\xb8\xe7\xb6\x9d\xe4\xcf\x90\xed\x7d\xc7\xe1\xa8\x24\xa3\x33\x44\xff\xf0\xf4\xf8\x8a\x5d\xdf\xbd\x88\x3d\x8e\x6a\x22\x5f\x0e\x65\x89\x74\x04\xf7\x1f\xee\xfa\x64\x03\xb0\x3f\x7a\x30\xfe\x53\x59\x33\x30\xdc\xe1\xbc\xa9\xce\x2d\xf9\xdd\x6e\x23\xa5\x31\xeb\x99\x9c\xaa\xe6\xe2\x9f\xc9\x36\x7c\xd9\x30\x55\x7c\xb9\xe2\xe0\xa7\x30\xbc\x6d\x63\x0a\xa3\xb1\x94\xaa\xb9\xda\x00\xa7\xd8\xf5\x42\xf0\xbd\x04\x6b\x6b\x0f\x72\x89\x84\x32\xab\x02\x1d\xac\x25\x5d\x10\xc6\xdf\xdf\x37\xf8\xd9\x6d\x50\xd3\x58\xdb\x0d\xa8\xe8\x33\x76\xfb\x1d\x00\x00\xff\xff\xf5\x7c\x8f\xa8\xe9\x00\x00\x00")

func _03_add_agent_typeDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__03_add_agent_typeDownSql,
		"03_add_agent_type.down.sql",
	)
}

func _03_add_agent_typeDownSql() (*asset, error) {
	bytes, err := _03_add_agent_typeDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "03_add_agent_type.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x22, 0xa4, 0x18, 0x3c, 0x12, 0x1b, 0x61, 0xa3, 0x28, 0x96, 0x96, 0x58, 0xc5, 0x18, 0xa0, 0x95, 0xdb, 0xf8, 0xfc, 0xb5, 0x86, 0xad, 0x3d, 0xdc, 0xb4, 0xf9, 0xac, 0x96, 0x9e, 0xdf, 0xbb, 0x8f}}
	return a, nil
}

var __03_add_agent_typeUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\x4f\x4b\xc3\x40\x10\x47\xef\xfd\x14\xbf\x5b\x14\x52\xf1\xdf\x41\x14\x0f\xb1\x46\x10\x92\x06\x24\x1e\x3c\xb5\xeb\x76\xb2\x0d\xec\x3f\x77\x47\x25\xdf\x5e\xa6\x51\xec\x61\x2f\xef\x2d\x33\x6f\xaa\xa6\xaf\x5f\xd0\x57\x0f\x4d\x0d\x47\x9c\x46\x9d\xd1\x76\x8f\xcf\x4f\x6f\x58\x75\xcd\x6b\xbb\xc6\x56\x19\xf2\xbc\xe1\x29\xd2\x16\xb5\xff\x74\x37\x27\x0b\xa0\xf8\xa7\x9b\xd1\x7f\x29\x3b\xee\x0a\xdc\xe3\xbc\x14\xe7\xa6\xfc\x61\x97\x91\xd2\x90\xf5\x9e\x9c\x12\x73\x71\x64\xb2\x0d\xdf\x36\x18\xc1\x97\x33\x0e\xde\x84\xdd\xfb\x32\xa6\x30\x8c\x96\x92\x98\xab\x83\x89\x21\xb3\x49\x74\x98\x67\x32\x2b\x96\x47\x8e\x3c\x67\xf9\x74\xbd\x00\x4e\xb1\xea\xda\xb6\x5e\xf7\x28\x2a\x89\x42\x3f\x45\x02\xef\x15\x43\x07\x6b\x49\x33\xc2\xf0\x77\xdc\x2d\x7e\x97\x97\x90\x3e\xcc\x81\x25\x88\xf5\x59\x71\xf7\x13\x00\x00\xff\xff\x6e\xa0\x3b\x29\x0e\x01\x00\x00")

func _03_add_agent_typeUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__03_add_agent_typeUpSql,
		"03_add_agent_type.up.sql",
	)
}

func _03_add_agent_typeUpSql() (*asset, error) {
	bytes, err := _03_add_agent_typeUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "03_add_agent_type.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x60, 0xfb, 0x74, 0x75, 0xaa, 0xed, 0x12, 0xc4, 0xfd, 0xf4, 0x7, 0x2a, 0x33, 0xa, 0xd0, 0x6b, 0xea, 0x23, 0x4e, 0x77, 0x74, 0x40, 0xec, 0xc1, 0x17, 0xcc, 0x65, 0x30, 0xf, 0x7b, 0x2b, 0xa5}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_init.down.sql": _01_initDownSql,

	"01_init.up.sql": _01_initUpSql,

	"02_postgresql_columns.down.sql": _02_postgresql_columnsDownSql,

	"02_postgresql_columns.up.sql": _02_postgresql_columnsUpSql,

	"03_add_agent_type.down.sql": _03_add_agent_typeDownSql,

	"03_add_agent_type.up.sql": _03_add_agent_typeUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"01_init.down.sql":               &bintree{_01_initDownSql, map[string]*bintree{}},
	"01_init.up.sql":                 &bintree{_01_initUpSql, map[string]*bintree{}},
	"02_postgresql_columns.down.sql": &bintree{_02_postgresql_columnsDownSql, map[string]*bintree{}},
	"02_postgresql_columns.up.sql":   &bintree{_02_postgresql_columnsUpSql, map[string]*bintree{}},
	"03_add_agent_type.down.sql":     &bintree{_03_add_agent_typeDownSql, map[string]*bintree{}},
	"03_add_agent_type.up.sql":       &bintree{_03_add_agent_typeUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
