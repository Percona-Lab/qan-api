// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/sql/01_init.down.sql (20B)
// migrations/sql/01_init.up.sql (9.921kB)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x28\x49\x4c\xca\x49\x55\xc8\x4d\x2d\x29\xca\x4c\x2e\xb6\xe6\x02\x04\x00\x00\xff\xff\x6b\xf9\xb4\xa3\x14\x00\x00\x00")

func _01_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initDownSql,
		"01_init.down.sql",
	)
}

func _01_initDownSql() (*asset, error) {
	bytes, err := _01_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf5, 0xb9, 0x22, 0xf, 0xca, 0x89, 0xa5, 0x5, 0xf2, 0xed, 0x48, 0xd7, 0xe0, 0x9d, 0xec, 0x2, 0xab, 0x87, 0xf3, 0x9d, 0x3d, 0x5a, 0x71, 0x39, 0xe, 0x4a, 0x88, 0xde, 0x1d, 0x0, 0x1d, 0x4e}}
	return a, nil
}

var __01_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x5a\x5d\x77\xdb\x36\xd2\xbe\xf7\xaf\x98\x3b\xdb\xe7\x48\x3d\x6f\x9b\x77\x77\x93\xe6\xf4\x42\xb6\x99\x56\x7b\x6c\xd9\x95\xd4\x6d\x7d\xc5\x40\xe4\x48\xc4\x9a\x04\x68\x00\x8c\xac\xfc\xfa\x3d\xf8\x20\x09\x92\xa0\xa4\xa4\xbd\x49\xad\x79\xe6\xe3\x99\xc1\x00\x03\x48\xb7\xcb\x68\xb6\x8e\x60\x3d\xbb\xb9\x8f\x60\xfe\x09\x16\x8f\x6b\x88\xfe\x9a\xaf\xd6\x2b\x28\x50\x09\x9a\xc8\x8b\xab\x0b\x00\x80\xe9\x14\x1e\x08\x65\x90\xd2\x02\x99\xa2\x9c\x49\xf3\xf1\x6b\x85\xe2\x40\x53\x58\x29\x41\xd9\x0e\x6e\x1f\x1f\x1e\xa2\xc5\x1a\x2e\x33\x22\x33\xe0\x5b\x2b\x87\x2d\x65\x3b\x14\xa5\xa0\x4c\x5d\x4e\x8c\x9e\x44\xf1\x05\xc5\x40\x6d\xfe\x04\x5c\x40\xc6\xa5\x62\xa4\x40\x6d\xe0\xee\xc6\x61\x9d\x62\x4a\x14\xd9\x10\x89\x03\xd5\x27\x2e\xd5\x4e\xe0\xea\xf7\xfb\x9f\x1b\x50\xed\x2c\xc9\xb0\x20\x03\x8d\x87\x43\x07\xfc\x11\x7c\x13\x56\xc7\x19\xa8\x24\x0a\x13\x50\xdf\x44\x92\x53\x64\xca\xc8\x41\x03\x1c\xde\x7e\x1c\x6b\x1e\x63\x2a\x5d\xa6\x4e\x6f\x3a\x05\x58\x29\xc2\x52\x22\x52\xc8\xc9\x06\x73\x9b\x65\x81\x65\x4e\x13\xa2\xd3\x1e\x4b\x1c\xda\x5c\xb8\x64\x79\x38\x90\xa8\x9a\x68\x2a\xa9\x02\xc9\xbe\x75\x9f\x7b\x01\xe8\x54\xd3\x04\x63\x75\x28\x87\x64\xd7\xfa\x43\xbe\xad\x41\x4e\x05\xd9\x17\x2a\x38\xd3\xab\x62\xa0\x11\x79\x32\xcf\x0b\xf9\x3a\x40\xce\xbe\x10\x9a\x93\x0d\xcd\xa9\x3a\xc0\x57\xce\x6a\xa8\xc0\x9d\x26\xd3\x87\x2f\xed\xc7\x9e\x4d\xc6\x53\x8c\x0b\x9e\x62\x3e\xcc\x0e\x4f\x11\x8c\xa8\x4e\x08\x67\x8a\x50\x86\x22\x0e\x16\xf5\xb6\x16\x43\xb7\x34\xb7\x95\x54\xbc\xf0\xeb\xf2\xd9\xfe\xff\x0f\x2f\x78\xf8\x0c\x33\x21\xc8\xe1\xca\x1a\xbb\xf6\xac\xf9\x5a\xc6\xa2\x74\x26\x6b\xed\x2f\x24\xaf\xf0\x4c\x7d\x83\xad\x0d\x90\x9d\x5e\x65\x81\xee\x9b\xa7\xba\x47\xb7\x14\x85\xae\x97\x81\x81\xca\x88\x82\x84\xe7\x39\x26\x0a\x08\x4b\x41\x22\x4b\xeb\x26\xef\x18\x34\xc5\x8f\x58\x55\xbc\xb7\xad\xaf\xff\xbb\x6c\x45\x31\x65\x5f\x48\x4e\xd3\x4b\xf8\x05\xfe\x6f\xd2\x22\xca\xa2\x98\x1a\x94\x16\xfc\xe8\x09\x4c\x69\xf0\xad\xe4\x42\xa1\xd0\xc2\x9f\x3c\x61\x71\x90\xaf\x79\xda\x11\xbf\xf3\xc5\x9c\xed\x78\xba\xe9\xc8\xff\xdf\x77\x6a\x5b\x56\x76\x00\xff\xf0\x00\xaf\x84\x4d\x8d\x8f\x69\x89\x62\x6b\xbb\xba\x0d\xf3\x9f\x41\xa4\xcc\xf9\x3e\xe7\xbb\x16\xf6\xaf\x3e\xcc\x46\x35\x2d\x05\xdf\xd2\x1c\x45\x8b\x7c\xef\x21\x45\xda\x0d\xeb\x83\x1f\xb7\xe0\x6f\xda\x57\x07\xf0\xa3\x9f\x4e\x7c\x53\x7a\xd3\xe9\x21\x7e\x34\x00\x6f\x79\xcc\x4c\x71\x4d\x6b\x76\x2a\xcc\xb7\x75\x6d\x7f\x06\xc7\x67\x02\x3a\x05\x6e\x67\x9b\x00\xaa\xe4\x07\x57\xf7\x12\x05\xe5\x69\x2c\x15\x11\x0a\xee\x88\xc2\x35\x2d\xd0\x6b\x7c\xfd\xd7\x3e\x43\x56\x5b\xd7\xbd\xc7\xb7\xb0\xa9\x92\x17\x54\x60\xd4\x30\xed\xda\xca\x91\xed\x54\x06\x7f\xcc\x99\x7a\xf7\x53\x6b\xea\xae\x12\xa4\x56\xf7\x8c\x59\x4b\xce\x82\x77\x5a\x0c\x56\xb6\x29\x10\xa4\x74\x87\x52\xc5\x0a\xdf\xd4\x47\x77\xc4\xec\xa9\xca\x78\xa5\xcc\x6e\x5e\xef\x4c\x6f\xa4\x28\xf3\x61\x7f\x3f\x32\x6c\x8f\xa6\x1a\xb4\x15\xbc\xd0\x7b\x26\x6c\x79\xc5\x52\xa0\xbd\x98\x1c\x2c\xde\x72\x51\x10\xe5\xba\xe3\x32\xfa\x6b\xf6\xf0\x74\x1f\xc5\x9f\x1e\x97\x0f\xb3\x75\x3c\x5f\xfc\x67\x76\x3f\xbf\xb3\x8d\x01\xb5\xd4\xb6\x03\x5c\x7e\x9a\x2f\x7e\x8d\x96\x4f\xcb\xf9\x62\x6d\x9a\xc0\x2b\xe2\x9c\xa5\x7a\xdb\x46\xd9\xad\xa1\x40\x92\x77\xc3\x94\x40\x25\x94\x82\x67\x74\x43\xdb\x94\x53\x19\x2b\x51\x31\x6d\x21\x35\x19\x7f\x1f\x32\x4d\xb7\x01\x5b\x8a\x73\xc8\x39\xdb\x99\x1d\x61\x4f\x24\x34\x86\x7a\xc4\xbd\x4d\xa1\xa1\xbd\x7e\x7e\x8a\xfa\xa4\x97\xb3\xc5\xdd\xe3\x43\xcd\x79\x75\xff\xf8\x67\xb4\xb2\x7c\x75\x0a\x66\xab\xb5\xfb\xf3\xdd\x04\x2e\xff\x9c\xaf\x7f\x8b\xa3\xe5\xf2\x71\x69\xda\x3a\x98\x90\xbd\x4e\x48\xb7\x54\x3a\xcc\x92\x26\x2f\x98\x42\x55\xf6\xc2\x74\x6b\x7e\x78\xd6\xbb\xcf\x07\x75\xa7\x0c\xfe\xbd\x7a\x5c\x80\x2d\x6c\xdd\x10\xac\x2a\x62\x8d\xa3\x28\x63\xbd\xb2\xe2\x3d\x11\x8c\xb2\x9d\x84\x4f\x39\x27\x9d\x15\xfd\x1b\xdf\x43\x41\xd8\x01\x1c\xde\x84\xa7\x75\xa0\xd1\xe9\x2f\xa6\xcf\xb5\xe4\x87\x84\xa7\xcd\xce\x6f\x5b\xc5\x4b\xc2\x3d\x95\xa6\x8f\x6b\x74\x40\xbb\x62\xaa\x56\x77\x81\xf9\x27\x87\x16\x6b\x03\x48\x92\x23\xd1\x0c\xb8\xa2\x10\x5c\x7c\x13\x53\xa3\x31\xa4\x69\x0d\x9d\x47\xf2\x9e\x48\xa5\x3d\x33\x3e\xd0\xfe\x06\x92\xad\x95\x63\x34\x87\xd4\x66\x85\x31\x53\xcb\x29\x03\x95\x51\xd9\x35\x30\x9d\x36\x23\xb1\xfe\xd3\x5a\x3b\xc4\x8a\x16\x18\x27\x4c\x0d\x8d\xae\x33\xd4\x7b\xa3\x42\x33\xff\xe0\x1b\x26\x95\xd9\xec\xb4\x86\x76\x21\x31\xe1\x2c\xb5\x69\x2c\xb0\x59\x7b\x1d\xc3\xb2\x2a\xbe\xdb\x70\xd0\x60\x41\xd9\xd0\xe0\xaa\x20\x79\x8e\x52\xd9\xf1\xa2\x69\x92\xb8\x36\xd8\xc9\x43\xd7\x1c\x79\x1b\x9a\xbb\xa1\xbb\xdd\x77\x59\x2b\x3f\x7c\x18\x5a\xfb\xf0\x41\x9f\x29\x89\x9e\x68\x72\x63\xed\x3c\xb3\x39\x4f\x5e\x06\xc5\x19\x0a\x47\x13\x6c\xcc\x2a\x0e\x24\x79\xad\xa8\x40\xd0\x2a\x32\x98\xdd\xd6\x98\x97\xdc\x80\xb0\x4d\xd5\x50\xe8\x31\xaf\x85\x82\xef\x65\x2c\xf5\xd4\x15\x20\xd0\x0a\x47\x09\xb0\xaa\xd8\xd8\x01\x50\x83\xf5\xb8\xa7\x34\x1f\x95\xa1\xbb\x9f\xb4\x0c\x5a\x6b\x01\x06\x9e\x70\xc8\xa0\x15\x8e\x31\xd0\x1b\x2d\x65\x98\x8e\xb2\x68\x00\x41\x26\x8b\x1e\x8b\x84\x30\x86\x29\x4c\x61\x15\xdd\x47\xb7\xeb\x1e\x87\xc6\xd6\x18\x8f\x16\x30\xc2\xa5\x01\x8c\xf1\x21\xdb\x2d\x26\xea\x08\x9f\x06\x70\x0e\x9f\x24\x23\x6c\x67\xf8\xfc\xf1\x74\x37\x5b\x47\x13\xb8\x8b\xee\x23\xfd\xef\x7c\xb1\x8a\x96\x7d\x7e\x8d\xed\x31\x7e\x2d\x60\x84\x5f\x03\x18\xe3\x27\x90\x8c\x73\x33\xc2\x73\x57\x9c\x06\xdb\xb9\x4a\x91\x4d\x8e\xb2\xc7\xc5\xd8\x1a\xe3\x61\x85\x23\x1c\x8c\x30\x10\x7f\x81\x62\x87\x71\x49\xa4\x44\x19\xa2\xd0\x91\x9f\xc1\xc2\xe0\xc1\xe2\xed\x64\xa6\x9b\x47\x72\xa1\x80\xe4\x3b\x2e\xa8\xca\x0a\xc8\x88\x84\x8c\xa4\xba\xb5\x52\xde\x52\xec\xf8\x0a\xb0\xec\xca\x87\x44\x3b\xf2\x00\x57\xca\x98\xbe\x17\x51\x1e\x8b\x98\x97\x41\xba\x7d\x48\x90\xb1\x39\x3f\xa5\x21\xd6\x12\x2f\xc9\x0e\x6d\xf9\x78\x89\x76\x60\x97\xe6\xde\x90\x56\x39\xa6\x2d\xc9\xbe\x87\x00\xcf\x01\x64\x48\xb5\x0f\x39\xc1\x76\x73\x50\xe1\xf2\x0e\x41\x41\xc6\x2b\x5a\xd0\x9c\x08\x5d\x30\xa7\x31\x7f\xb4\x9e\x27\xb0\xa9\x6c\x8d\x2b\x46\x95\x1e\x8f\x8d\x99\x30\x5f\xeb\xe1\x04\x63\x07\x3a\xce\xd9\x82\x4e\xb0\xde\x13\x1a\x3c\x08\x06\x98\x30\xe7\x4c\x37\x64\xc6\xf7\x76\xd8\xbf\x6a\x8f\xb1\x6b\xa0\xfa\x58\xe0\x2f\x30\x67\x8c\xdf\xdd\xd8\x23\x4f\x55\x24\xcf\x0f\x76\x09\xe8\x7c\xe8\x5b\x95\xbb\x22\x29\x2e\xc8\x0e\xc3\x39\x31\x01\x9c\x48\x89\xc5\x1c\xcf\x88\xc1\x8c\x27\x44\x60\x62\x8f\xce\x13\x49\xe9\xe2\xbe\x39\x31\x9a\xb8\xbb\x5c\x12\x7d\xdb\xd2\x77\x04\xbd\xb3\xd9\x51\x60\x90\x81\xae\xb7\xf1\x2c\xf4\x70\xa3\x99\xe8\xe2\xc6\xb3\xf1\x5a\x61\x85\xa7\x52\xe1\x81\xfe\x46\x1e\x64\x69\x06\x4e\xaa\x32\x14\x26\x29\xfa\x8e\xa5\x38\x20\x53\x28\x0c\xce\x2d\x22\xe3\x0e\xcc\x9d\x40\xd2\xd4\x3d\x4d\xd8\x0f\x6b\x35\x9d\xcc\x66\x74\x1d\x24\xd3\x8b\x77\x3c\x93\x3e\x68\x34\x8d\x1e\x68\x3c\x87\x7a\xc3\x93\x71\x4a\xa5\xa2\x2c\x39\x96\xc7\x1e\xf0\xd8\x96\x4a\xca\x52\xf0\x37\x5a\x10\x85\xf9\xa1\xb7\xc1\x56\x8c\xbe\x56\x68\xf6\x59\xe9\xe5\x97\x24\x09\x4a\x19\xd8\x61\x7b\x6e\xc7\x53\xd2\x07\x8e\xa6\xa5\x07\x0c\xa4\xc6\x4e\xd7\xf6\x1d\x27\x94\x91\x8e\xfc\x9c\x45\xd5\xf2\xa4\x83\xbb\x89\x33\x13\x20\xd6\x95\x0f\xf9\x74\xe4\x01\x1a\xee\x24\x18\x99\xa3\x3d\xe9\x19\x03\x81\x41\x37\x93\x34\xc9\x73\x37\x49\x7b\x74\x3c\x83\x01\x32\xbe\x74\x48\xc5\x93\x06\x88\xa8\xa2\x8c\xed\x20\x15\x22\xe2\x49\x4f\xcc\x9d\x0a\x8b\x92\x0b\x22\x0e\x6e\x2c\x83\x44\xa0\x79\x39\xe2\x0c\x0a\x2c\xb8\x38\x98\xde\x6c\xaa\xd5\x72\xf3\x7c\x04\xb8\xf9\xd2\x21\x37\x4f\x3a\xc2\x2d\xa5\xf2\xe5\x04\x41\x1f\xf2\x37\x58\x6a\x33\xc7\x38\xfa\x6e\x46\x88\x76\x20\x61\xb6\x3e\xe4\x58\x39\x63\x49\xbf\x9e\xa8\xa9\x83\x84\x57\x28\x57\x24\x87\x15\xfd\x6a\x2f\xc1\x66\x85\x6a\x6e\x7a\x75\x0e\x92\x50\x49\x4c\xed\xeb\xc6\x78\x71\x9d\xb3\x63\x15\xae\x21\x47\xca\xec\x20\x03\xe2\xd3\x29\xdc\x70\x9e\x23\x61\xfd\xd7\x94\x24\xce\xc2\x47\x98\x93\x04\xd9\xff\x6e\xf6\x93\x5b\x92\x64\x08\x19\xf5\x1b\x71\x5b\xe5\x79\xac\xaf\x8b\x21\x93\xad\x70\xb4\xeb\xed\x4e\x55\xa2\xd8\x72\x51\x60\x0a\x04\xb4\x92\x4d\xa4\xb9\x86\xf6\x5c\xfd\x97\xd3\x71\x57\x46\xf8\xad\xae\xb4\x12\x5c\x11\xfb\x6f\xfd\xbe\x4d\x59\x8a\x6f\x28\xaf\x43\x85\x3b\xbe\x84\x8e\x7b\xaf\xdb\x83\x30\xa0\x45\x99\xd3\x44\x0f\xc0\xcc\x7e\x05\xd1\x5f\x47\x21\xdf\x9c\xd9\x05\x7f\x34\x86\x1a\x74\x3c\x16\xd9\xf7\x67\x5e\xc8\xf4\xe0\xd9\xb6\xaf\x97\x7c\x9a\xa3\xbe\x92\x05\x73\x5f\xcb\x4e\x90\x37\x6d\x41\xa0\x86\x07\x8c\x1f\xa1\x37\xc0\x8c\x3a\xab\x91\xf6\x05\xbb\x29\xf7\x80\x92\xc4\x1c\x13\x65\x57\x8e\x20\x6c\x87\xa3\x8b\x6b\x04\x79\xc6\x51\xa6\x71\xee\x52\xeb\xd8\x1b\x7d\x90\x48\x44\x92\xe9\x98\x08\x08\xdc\xa2\x40\x96\x60\xbf\xec\xce\xad\xf5\x38\x1e\x96\x95\x7f\x47\x30\x46\x51\xea\x20\x94\x49\x9b\x90\xea\x78\x08\x19\x26\xc1\xda\x04\x50\x67\x87\x53\x77\xdc\x0b\x1e\xea\xef\x65\xb4\x01\xb3\xb9\xbe\xa0\x5e\x34\xfa\x96\x4c\xb6\x7a\xf4\x35\x8f\xcf\x82\xef\xbd\xf8\xf4\x8a\x18\x4f\x50\x2b\x3d\x23\x1e\x8d\x76\x21\xec\x51\x20\xa4\x9c\x21\x54\x52\x4f\xd1\x36\x53\x7d\xb7\x7c\x1f\x3c\x4f\x5a\xe1\x99\x4e\x75\x29\xf8\xbe\x6f\x7e\x6c\x53\x6d\x85\xdf\xcb\x69\x73\xb0\x0f\x7c\xd4\x4d\x8b\xbd\x9a\x33\x1e\x9b\xed\x2f\xd6\x8b\x24\x14\x41\x17\x70\x46\x14\xcd\x37\x19\xfe\xee\xda\x71\xb8\xe3\x3c\x3d\xed\xb5\x8f\xfa\x0e\xd7\xda\x44\xd7\xff\x74\x0a\xe6\x8b\xe6\xde\x41\x99\xf2\x44\xc6\x02\x55\x25\x46\x5e\x55\xbb\x80\x73\x5e\xeb\x1c\x16\x52\x9e\x54\x45\x77\x9e\xed\x1a\x0b\x0c\x05\x3d\xc0\x70\x24\xe8\x02\x42\xcf\x8e\x28\x4b\xce\x24\x1e\xb9\x6b\xf4\x21\xa3\xa4\x6a\x20\xb8\xef\x9f\xf5\x24\xd8\x6c\xf3\x02\x65\x95\xab\x66\x4c\xf2\xde\x23\x7b\xe6\x43\xaf\x92\x7d\x48\xe0\x6d\xb2\x07\x09\x50\x35\xb9\x70\x6f\xd8\xa3\xa5\xab\xe5\xe7\x74\x91\x7b\x0e\x1f\x2b\x5c\x6d\x6a\xac\x6e\x8d\x7c\xa4\x6c\xb5\xdc\xa3\x72\x71\x7d\x11\x2d\x7e\x9d\x2f\x22\xf8\x05\x1e\x50\xec\x70\x2d\x10\x2f\x9e\x66\xcb\xf5\x7c\x3d\x7f\x5c\xc0\xcd\x33\x28\xfe\xfc\xfc\xfc\xfc\xf0\x70\x77\x77\xe5\xff\xb2\xe0\xfa\xe2\x71\x79\x17\x2d\x35\xe2\xca\xfd\x6e\x6c\xe2\x7e\xdc\x35\x69\x7e\x85\x35\x69\x7e\x9f\x50\xff\xe8\x6a\xe2\xff\x9c\x6a\xd2\xf9\xad\xc2\xf5\xc7\x8b\xff\x05\x00\x00\xff\xff\x07\x6c\x36\xc7\xc1\x26\x00\x00")

func _01_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initUpSql,
		"01_init.up.sql",
	)
}

func _01_initUpSql() (*asset, error) {
	bytes, err := _01_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xee, 0xb1, 0xe6, 0x33, 0xd3, 0x12, 0x50, 0xb4, 0x14, 0x1, 0x49, 0x9b, 0xc5, 0x99, 0x4, 0x96, 0xef, 0xca, 0xb4, 0x58, 0x7d, 0x6d, 0xf6, 0xf9, 0xf9, 0x92, 0x56, 0x4f, 0xa1, 0xa7, 0xba, 0x12}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_init.down.sql": _01_initDownSql,

	"01_init.up.sql": _01_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"01_init.down.sql": &bintree{_01_initDownSql, map[string]*bintree{}},
	"01_init.up.sql":   &bintree{_01_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
