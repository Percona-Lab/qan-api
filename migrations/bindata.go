// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/sql/01_init.down.sql (20B)
// migrations/sql/01_init.up.sql (9.645kB)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x28\x49\x4c\xca\x49\x55\xc8\x4d\x2d\x29\xca\x4c\x2e\xb6\xe6\x02\x04\x00\x00\xff\xff\x6b\xf9\xb4\xa3\x14\x00\x00\x00")

func _01_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initDownSql,
		"01_init.down.sql",
	)
}

func _01_initDownSql() (*asset, error) {
	bytes, err := _01_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf5, 0xb9, 0x22, 0xf, 0xca, 0x89, 0xa5, 0x5, 0xf2, 0xed, 0x48, 0xd7, 0xe0, 0x9d, 0xec, 0x2, 0xab, 0x87, 0xf3, 0x9d, 0x3d, 0x5a, 0x71, 0x39, 0xe, 0x4a, 0x88, 0xde, 0x1d, 0x0, 0x1d, 0x4e}}
	return a, nil
}

var __01_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x5a\x4f\x77\xdb\xb6\xf2\xdd\xfb\x53\xcc\xce\xf6\x39\x52\xcf\xef\xd7\xbc\x45\xd3\x9c\x2c\x64\x9b\x69\xf5\x8e\x2d\xb9\x92\xfa\x5a\xaf\x18\x88\x1c\x89\x78\x26\x01\x06\x00\x23\x2b\x9f\xfe\x1d\xfc\x21\x09\x92\xa0\xa4\xa4\xdd\xa4\xd6\x5c\xdc\xc1\x9d\x19\x00\x03\x48\xf7\xab\x68\xb6\x89\x60\x33\xbb\x7b\x8c\x60\xfe\x09\x16\xcb\x0d\x44\x7f\xcf\xd7\x9b\x35\x14\xa8\x04\x4d\xe4\xd5\xcd\x15\x00\xc0\x74\x0a\x4f\x84\x32\x48\x69\x81\x4c\x51\xce\xa4\xf9\xf8\x4b\x85\xe2\x48\x53\x58\x2b\x41\xd9\x1e\xee\x97\x4f\x4f\xd1\x62\x03\xd7\x19\x91\x19\xf0\x9d\xb5\xc3\x8e\xb2\x3d\x8a\x52\x50\xa6\xae\x27\x66\x9c\x44\xf1\x15\xc5\x60\xd8\xfc\x19\xb8\x80\x8c\x4b\xc5\x48\x81\x9a\xe0\xe1\xce\x61\xdd\xc0\x94\x28\xb2\x25\x12\x07\x43\x9f\xb9\x54\x7b\x81\xeb\x3f\x1e\x7f\x6d\x40\xb5\xb3\x24\xc3\x82\x0c\x46\x3c\x1d\x3b\xe0\x0f\xe0\x53\xd8\x31\x8e\xa0\x92\x28\xcc\x84\xfa\x14\x49\x4e\x91\x29\x63\x07\x0d\x70\x78\xfb\x71\xac\x75\x8c\x0d\xe9\x2a\x75\xe3\xa6\x53\x80\xb5\x22\x2c\x25\x22\x85\x9c\x6c\x31\xb7\x51\x16\x58\xe6\x34\x21\x3a\xec\xb1\xc4\x21\xe7\xc2\x05\xcb\xc3\x81\x44\xd5\xcc\xa6\x92\x2a\x10\xec\x7b\xf7\xb9\x37\x01\x1d\x6a\x9a\x60\xac\x8e\xe5\x50\xec\x46\x7f\xc8\x77\x35\xc8\x0d\x41\xf6\x95\x0a\xce\x74\x55\x0c\x46\x44\x9e\xcd\xf3\x42\xbe\x0d\x90\xb3\xaf\x84\xe6\x64\x4b\x73\xaa\x8e\xf0\x8d\xb3\x1a\x2a\x70\xaf\xc5\xf4\xe1\x2b\xfb\xb1\xc7\xc9\x78\x8a\x71\xc1\x53\xcc\x87\xd1\xe1\x29\x82\x31\xd5\x01\xe1\x4c\x11\xca\x50\xc4\xc1\xa4\xde\xd7\x66\xe8\xa6\xe6\xbe\x92\x8a\x17\x7e\x5e\x3e\xdb\xff\xff\xe9\x15\x8f\x9f\x61\x26\x04\x39\xde\x58\xb2\x5b\x8f\xcd\x1f\x65\x18\xa5\xa3\xac\x47\x7f\x25\x79\x85\x17\x8e\x37\xd8\x9a\x80\xec\x75\x95\x05\x56\xdf\x3c\xd5\x6b\x74\x47\x51\xe8\x7c\x19\x18\xa8\x8c\x28\x48\x78\x9e\x63\xa2\x80\xb0\x14\x24\xb2\xb4\x5e\xe4\x1d\x42\x93\xfc\x88\x55\xc5\x2f\x76\xe9\xeb\xff\xae\x5b\x53\x4c\xd9\x57\x92\xd3\xf4\x1a\x3e\xc2\xff\x4d\x5a\x44\x71\x94\x5f\xf2\x69\x89\x62\xe7\xd6\x0e\x7c\x84\xff\x1f\xd8\x65\xce\x0f\x39\xdf\x6b\xe3\xcf\xbe\x91\xb3\x3d\x4f\xb7\xd3\x52\xf0\x1d\xcd\x51\x68\xfb\x3b\x63\xf6\x42\x31\x33\x42\x4c\x19\x76\xd4\xf0\x5d\xad\xe3\x57\x70\xfc\x13\xd0\x13\x71\xab\x78\x02\xa8\x92\x9f\x9c\xc6\x12\x05\xe5\x69\x2c\x15\x11\x0a\x1e\x88\xc2\x0d\x2d\xd0\x2b\x72\xfd\xd7\x21\x43\x56\xb3\xeb\x3a\xe3\x3b\xd8\x56\xc9\x2b\x2a\x30\xc3\x30\xed\x72\xe5\xc8\xf6\x2a\x83\x3f\xe7\x4c\xbd\xfb\xb9\xa5\x7a\xa8\x04\xa9\x87\x7b\x64\x96\xc9\x31\x78\x3b\xe3\x20\x8b\x26\x60\x90\xd2\x3d\x4a\x15\x2b\x7c\x53\x1f\xdc\x76\x7a\xa0\x2a\xe3\x95\x32\x3b\x57\xbd\x0a\xdf\x48\x51\xe6\xc3\x5a\x5e\x32\x6c\xb7\xe1\x1a\xb4\x13\xbc\xd0\xfb\x03\xec\x78\xc5\x52\xa0\xbd\x39\x39\x58\xbc\xe3\xa2\x20\xca\x55\xc2\x75\xf4\xf7\xec\xe9\xf9\x31\x8a\x3f\x2d\x57\x4f\xb3\x4d\x3c\x5f\xfc\x67\xf6\x38\x7f\xb0\x45\x00\xb5\xd5\xe6\x1c\xae\x3f\xcd\x17\xbf\x45\xab\xe7\xd5\x7c\xb1\x31\x99\xf6\x92\x38\x67\xa9\xde\xa2\x50\x76\x73\x28\x90\xe4\xdd\x69\x4a\xa0\x12\x4a\xc1\x33\xba\xa5\x6d\xc8\xa9\x8c\x95\xa8\x98\x66\x48\x4d\xc4\x7f\x09\x51\xd3\x5d\x80\x4b\x71\x0e\x39\x67\x7b\x53\xfd\x07\x22\xa1\x21\xea\x09\xf7\x16\x40\x23\x7b\xf3\xf2\x1c\xf5\x45\xaf\x66\x8b\x87\xe5\x53\xad\x79\xfd\xb8\xfc\x2b\x5a\x5b\xbd\x3a\x04\xb3\xf5\xc6\xfd\xf9\x6e\x02\xd7\x7f\xcd\x37\xbf\xc7\xd1\x6a\xb5\x5c\xe9\x4f\xfe\x15\x0c\xc8\x41\x07\xa4\x9b\x2a\x3d\xcd\x92\x26\xaf\x98\x42\x55\xf6\xa6\xe9\x6a\x7e\x78\xae\xb9\xcf\x07\x79\xa7\x0c\xfe\xbd\x5e\x2e\xc0\x26\xb6\x5e\x10\xac\x2a\x62\x8d\xa3\x28\x63\x5d\x59\xf1\x81\x08\x46\xd9\x5e\xc2\xa7\x9c\x93\x4e\x45\xff\xce\x0f\x50\x10\x76\x04\x87\x37\xd3\xd3\x63\xa0\x19\xd3\x2f\xa6\xcf\xb5\xe5\xa7\x84\xa7\xcd\x2e\x67\x97\x8a\x17\x84\x47\x2a\xcd\x3a\xae\xd1\x81\xd1\x15\x53\xf5\x70\x37\x31\x7f\x97\xd4\x66\x4d\x80\x24\x39\x31\x9b\x81\x56\x14\x82\x8b\xef\x52\x6a\x46\x0c\x65\x5a\xa2\xcb\x44\x3e\x12\xa9\xb4\x67\xc6\x07\xa3\xbf\x43\x64\xcb\x72\x4a\xe6\x50\xda\xac\x30\x34\xb5\x9d\x32\x50\x19\x95\x5d\x82\xe9\xb4\x69\xff\xf4\x9f\x96\xed\x18\x2b\x5a\x60\x9c\x30\x35\x24\xdd\x64\xa8\xf7\x46\x85\xe6\xac\xc7\x37\x4c\x2a\xb3\xd9\xe9\x11\xda\x85\xc4\x84\xb3\xd4\x86\xb1\xc0\xa6\xf6\x3a\xc4\xb2\x2a\x7e\x98\x38\x48\x58\x50\x36\x24\x5c\x17\x24\xcf\x51\x2a\x7b\x94\x36\x8b\x24\xae\x09\x3b\x71\xe8\xd2\x91\xb7\x21\xdd\x1d\xdd\xef\x7f\x88\xad\x7c\xff\x7e\xc8\xf6\xfe\xbd\x3e\x53\x12\x7d\x7a\xe7\x86\xed\x32\xda\x9c\x27\xaf\x83\xe4\x0c\x8d\xa3\x01\x36\xb4\x8a\x03\x49\xbe\x54\x54\x20\xe8\x21\x32\x18\xdd\x96\xcc\x0b\x6e\xc0\xd8\x86\x6a\x68\xf4\x94\xd7\x46\xc1\x0f\x32\x96\xba\xc3\x08\x08\x68\x8d\xa3\x02\x58\x55\x6c\x6d\xb3\xa3\xc1\xba\xb5\x51\x5a\x8f\xca\xd0\xf5\xe2\xad\x82\x96\x2d\xa0\xc0\x33\x0e\x15\xb4\xc6\x31\x05\x7a\xa3\xa5\x0c\xd3\x51\x15\x0d\x20\xa8\x64\xd1\x53\x91\x10\xc6\x30\x85\x29\xac\xa3\xc7\xe8\x7e\xd3\xd3\xd0\x70\x8d\xe9\x68\x01\x23\x5a\x1a\xc0\x98\x1e\xb2\xdb\x61\xa2\x4e\xe8\x69\x00\x97\xe8\x49\x32\xc2\xf6\x46\xcf\x9f\xcf\x0f\xb3\x4d\x34\x81\x87\xe8\x31\xd2\xff\xce\x17\xeb\x68\xd5\xd7\xd7\x70\x8f\xe9\x6b\x01\x23\xfa\x1a\xc0\x98\x3e\x81\x64\x5c\x9b\x31\x5e\x5a\x71\x1a\x6c\xfb\x2a\x45\xb6\x39\xca\x9e\x16\xc3\x35\xa6\xc3\x1a\x47\x34\x18\x63\x60\xfe\x05\x8a\x3d\xc6\x25\x91\x12\x65\x48\x42\xc7\x7e\x81\x0a\x83\x07\x8b\xb7\x9d\x99\x5e\x3c\x92\x0b\x05\x24\xdf\x73\x41\x55\x56\x40\x46\x24\x64\x24\xd5\x4b\x2b\xe5\xad\xc4\x8e\xaf\x80\xca\xae\x7d\x28\xb4\x63\x0f\x68\xa5\x8c\xf1\x74\x1b\x53\x1e\x8b\x98\x97\x41\xb9\x7d\x48\x50\xb1\x39\x3f\xa5\x11\xd6\x0a\x2f\xc9\x1e\x6d\xfa\x78\x89\xb6\x61\x97\xe6\xde\x90\x56\x39\xa6\xad\xc8\xbe\x87\x80\xce\x01\x64\x28\xb5\x0f\x39\xa3\x76\x7b\x54\xe1\xf4\x0e\x41\x41\xc5\x6b\x5a\xd0\x9c\x08\x9d\x30\x37\x62\xbe\xb4\x9e\x27\xb0\xad\x6c\x8e\x2b\x46\x95\x6e\x8f\x0d\x4d\x58\xaf\xf5\x70\x46\xb1\x03\x9d\xd6\x6c\x41\x67\x54\x1f\x08\x0d\x1e\x04\x03\x4c\x58\x73\xa6\x17\x64\xc6\x0f\xb6\xd9\xbf\x69\x8f\xb1\x5b\xa0\xfa\x58\xe0\xaf\x30\x67\x8c\x3f\xdc\xd9\x23\x4f\x55\x24\xcf\x8f\xb6\x04\x74\x3c\xf4\xad\xca\x5d\x91\x14\x17\x64\x8f\xe1\x98\x98\x09\x9c\x09\x89\xc5\x9c\x8e\x88\xc1\x8c\x07\x44\x60\x62\x8f\xce\x33\x41\xe9\xe2\xbe\x3b\x30\x5a\xb8\xbb\x5c\x12\x7d\xdb\xd2\x77\x04\xbd\xb3\xd9\x56\x60\x10\x81\xae\xb7\xf1\x28\xf4\x70\xa3\x91\xe8\xe2\xc6\xa3\xf1\xa5\xc2\x0a\xcf\x85\xc2\x03\xfd\x83\x38\xc8\xd2\x34\x9c\x54\x65\x28\x4c\x50\xf4\x1d\x4b\x71\x40\xa6\x50\x18\x9c\x2b\x22\xe3\x0e\xcc\x9d\x40\xd2\xd4\x3d\x4d\xd8\x0f\xeb\x61\x3a\x98\x4d\xeb\x3a\x08\xa6\x37\xdf\xf1\x48\xfa\xa0\xd1\x30\x7a\xa0\xf1\x18\xea\x0d\x4f\xc6\x29\x95\x8a\xb2\xe4\x54\x1c\x7b\xc0\x53\x5b\x2a\x29\x4b\xc1\xdf\x68\x41\x14\xe6\xc7\xde\x06\x5b\x31\xfa\xa5\x42\xb3\xcf\x4a\x2f\xbe\x24\x49\x50\xca\xc0\x0e\xdb\x73\x3b\x1e\x92\x3e\x70\x34\x2c\x3d\x60\x20\x34\xb6\xbb\xb6\xef\x38\xa1\x88\x74\xec\x97\x14\x55\xab\x93\x0e\xee\x26\x8e\x26\x20\xac\x6b\x1f\xea\xe9\xd8\x03\x32\xdc\x49\x30\xd2\x47\x7b\xd6\x0b\x1a\x02\x83\x6e\x3a\x69\x92\xe7\xae\x93\xf6\xe4\x78\x84\x01\x31\xbe\x75\x28\xc5\xb3\x06\x84\xa8\xa2\x8c\x6d\x23\x15\x12\xe2\x59\xcf\xf4\x9d\x0a\x8b\x92\x0b\x22\x8e\xae\x2d\x83\x44\xa0\x79\x39\xe2\x0c\x0a\x2c\xb8\x38\x9a\xb5\xd9\x64\xab\xd5\xe6\xf9\x08\x68\xf3\xad\x43\x6d\x9e\x75\x44\x5b\x4a\xe5\xeb\x19\x81\x3e\xe4\x1f\xa8\xd4\x34\xa7\x34\xfa\x6e\x46\x84\x76\x20\x61\xb5\x3e\xe4\x54\x3a\x63\x49\xbf\x9d\xc9\xa9\x83\x84\x2b\x94\x2b\x92\xc3\x9a\x7e\xb3\x97\x60\x53\xa1\x5a\x9b\xae\xce\x41\x10\x2a\x89\xa9\x7d\xdd\x18\x4f\xae\x73\x76\x2a\xc3\x35\xe4\x44\x9a\x1d\x64\x20\x7c\x3a\x85\x3b\xce\x73\x24\xac\xff\x9a\x92\xc4\x59\xf8\x08\x73\x96\xa0\xfa\x3f\xcc\x7e\x72\x4f\x92\x0c\x21\xa3\xfe\x42\xdc\x55\x79\x1e\xeb\xeb\x62\x88\xb2\x35\x8e\xae\x7a\xbb\x53\x95\x28\x76\x5c\x14\x98\x02\x01\x3d\xc8\x06\xd2\x5c\x43\x7b\xae\xfe\xcb\xe9\xb8\x2b\x63\xfc\x5e\x57\x7a\x10\xdc\x10\xfb\x6f\xfd\xbe\x4d\x59\x8a\x6f\x28\x6f\x43\x89\x3b\x5d\x42\xa7\xbd\xd7\xcb\x83\x30\xa0\x45\x99\xd3\x44\x37\xc0\xfa\x58\x67\x64\x50\x47\x21\xdf\x9c\xd9\x82\x3f\x39\x87\x1a\x74\x7a\x2e\xb2\xef\xcf\xbc\x90\xe9\xc6\xb3\x5d\xbe\x5e\xf0\x69\x8e\xfa\x4a\x16\x8c\x7d\x6d\x3b\x23\xde\x2c\x0b\x02\x35\x3c\x40\x7e\x42\xde\x00\x33\xea\xac\x46\xda\x17\xec\x26\xdd\x03\x49\x12\x73\x4c\x94\xad\x1c\x41\xd8\x1e\x47\x8b\x6b\x04\x79\xc1\x51\xa6\x71\xee\x52\xeb\xd4\x9b\xf1\x20\x91\x88\x24\xd3\x73\x22\x20\x70\x87\x02\x59\x82\xfd\xb4\x3b\xb7\xd6\xe3\xf8\xb4\xac\xfd\x07\x26\x63\x06\x4a\x3d\x09\x65\xc2\x26\xa4\x3a\x3d\x85\x0c\x93\x60\x6e\x02\xa8\x8b\xa7\x53\xaf\xb8\x57\x3c\xd6\xdf\xcb\x68\x02\xb3\xb9\xbe\xa2\x2e\x1a\x7d\x4b\x26\x3b\xdd\xfa\x9a\xc7\x67\xc1\x0f\xde\xfc\x74\x45\x8c\x07\xa8\xb5\x5e\x30\x1f\x8d\x76\x53\x38\xa0\x40\x48\x39\x43\xa8\xa4\xee\xa2\x6d\xa4\xfa\x6e\xf9\x21\x78\x9e\xb4\xc6\x0b\x9d\xea\x54\xf0\x43\x9f\x7e\x6c\x53\x6d\x8d\x3f\xaa\x69\x7b\xb4\x0f\x7c\xd4\x75\x8b\xbd\x9c\x33\x1e\x9b\xed\x2f\xd6\x45\x12\x9a\x41\x17\x70\xc1\x2c\x9a\x6f\x32\xfc\xdd\xb5\xe3\x70\xcf\x79\x7a\xde\x6b\x1f\xf5\x03\xae\x35\x45\xd7\xff\x74\x0a\xe6\x2b\xe0\xde\x41\x99\xf2\x44\xc6\x02\x55\x25\x46\x5e\x55\xbb\x80\x4b\x5e\xeb\x1c\x16\x52\x9e\x54\x45\xb7\x9f\xed\x92\x05\x9a\x82\x1e\x60\xd8\x12\x74\x01\xa1\x67\x47\x94\x25\x67\x12\x4f\xdc\x35\xfa\x90\x51\x51\x35\x10\xdc\xf7\xcf\xba\x13\x6c\xb6\x79\x81\xb2\xca\x55\xd3\x26\x79\xef\x91\x3d\xfa\xd0\xab\x64\x1f\x12\x78\x9b\xec\x41\x02\x52\x4d\x2c\xdc\x1b\xf6\x68\xea\x6a\xfb\x25\xab\xc8\x3d\x87\x8f\x25\xae\xa6\x1a\xcb\x5b\x63\x1f\x49\x5b\x6d\xf7\xa4\x5c\xdd\x5e\x45\x8b\xdf\xe6\x8b\x08\x3e\xc2\x13\x8a\x3d\x6e\x04\xe2\xd5\xf3\x6c\xb5\x99\x6f\xe6\xcb\x05\xdc\xbd\x80\xe2\x2f\x2f\x2f\x2f\x4f\x4f\x0f\x0f\x37\xfe\x2f\x0b\x6e\xaf\x96\xab\x87\x68\xa5\x11\x37\xee\x37\x52\x13\xf7\x43\xa6\x49\xf3\x8b\xa3\x49\xf3\xfb\x84\xfa\x07\x46\x13\xff\xa7\x43\x93\xce\x6f\x15\x6e\x3f\x5c\xfd\x2f\x00\x00\xff\xff\x15\x2f\x55\x48\xad\x25\x00\x00")

func _01_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initUpSql,
		"01_init.up.sql",
	)
}

func _01_initUpSql() (*asset, error) {
	bytes, err := _01_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x39, 0x15, 0x68, 0xdb, 0x9a, 0x7c, 0x7c, 0x7f, 0x58, 0x77, 0x11, 0x9b, 0xa4, 0x88, 0x38, 0xed, 0x19, 0xdc, 0x55, 0xd0, 0xf7, 0xb2, 0x8e, 0x7b, 0x89, 0xbc, 0x35, 0xa6, 0x76, 0xaa, 0xce, 0xe8}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_init.down.sql": _01_initDownSql,

	"01_init.up.sql": _01_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"01_init.down.sql": &bintree{_01_initDownSql, map[string]*bintree{}},
	"01_init.up.sql":   &bintree{_01_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
