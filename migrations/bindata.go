// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/sql/01_init.down.sql (20B)
// migrations/sql/01_init.up.sql (9.675kB)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x28\x49\x4c\xca\x49\x55\xc8\x4d\x2d\x29\xca\x4c\x2e\xb6\xe6\x02\x04\x00\x00\xff\xff\x6b\xf9\xb4\xa3\x14\x00\x00\x00")

func _01_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initDownSql,
		"01_init.down.sql",
	)
}

func _01_initDownSql() (*asset, error) {
	bytes, err := _01_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf5, 0xb9, 0x22, 0xf, 0xca, 0x89, 0xa5, 0x5, 0xf2, 0xed, 0x48, 0xd7, 0xe0, 0x9d, 0xec, 0x2, 0xab, 0x87, 0xf3, 0x9d, 0x3d, 0x5a, 0x71, 0x39, 0xe, 0x4a, 0x88, 0xde, 0x1d, 0x0, 0x1d, 0x4e}}
	return a, nil
}

var __01_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x5a\x4d\x73\xe3\x36\xd2\xbe\xfb\x57\xf4\xcd\x76\x95\x94\x7a\xdf\x64\x0f\x99\x4c\xe5\x20\xdb\x9c\x44\x5b\xb6\xe4\x48\xca\x26\x3e\x71\x20\xb2\x25\x62\x4d\x02\x34\x00\x8e\xac\xf9\xf5\x5b\xf8\x20\x09\x92\xa0\xa4\x99\xe4\x32\xb1\xfa\xe9\xa7\xf1\x74\xe3\xa3\x01\xe9\x7e\x15\xcd\x36\x11\x6c\x66\x77\x8f\x11\xcc\x3f\xc1\x62\xb9\x81\xe8\xef\xf9\x7a\xb3\x86\x02\x95\xa0\x89\xbc\xba\xb9\x02\x00\x98\x4e\xe1\x89\x50\x06\x29\x2d\x90\x29\xca\x99\x34\x1f\xbf\x55\x28\x8e\x34\x85\xb5\x12\x94\xed\xe1\x7e\xf9\xf4\x14\x2d\x36\x70\x9d\x11\x99\x01\xdf\x59\x3b\xec\x28\xdb\xa3\x28\x05\x65\xea\x7a\x62\xfc\x24\x8a\x2f\x28\x06\x6e\xf3\x67\xe0\x02\x32\x2e\x15\x23\x05\x6a\x82\x87\x3b\x87\x75\x8e\x29\x51\x64\x4b\x24\x0e\x5c\x9f\xb9\x54\x7b\x81\xeb\x3f\x1e\x7f\x69\x40\x75\xb0\x24\xc3\x82\x0c\x3c\x9e\x8e\x1d\xf0\x47\xf0\x29\xac\x8f\x23\xa8\x24\x0a\x33\xa0\x3e\x45\x92\x53\x64\xca\xd8\x41\x03\x1c\xde\x7e\x1c\x6b\x1d\x63\x2e\x5d\xa5\xce\x6f\x3a\x05\x58\x2b\xc2\x52\x22\x52\xc8\xc9\x16\x73\x9b\x65\x81\x65\x4e\x13\xa2\xd3\x1e\x4b\x1c\x72\x2e\x5c\xb2\x3c\x1c\x48\x54\xcd\x68\x2a\xa9\x02\xc9\xbe\x77\x9f\x7b\x03\xd0\xa9\xa6\x09\xc6\xea\x58\x0e\xc5\x6e\xf4\x87\x7c\x57\x83\x9c\x0b\xb2\x2f\x54\x70\xa6\x67\xc5\xc0\x23\xf2\x6c\x5e\x14\xf2\x75\x80\x9c\x7d\x21\x34\x27\x5b\x9a\x53\x75\x84\xaf\x9c\xd5\x50\x81\x7b\x2d\xa6\x0f\x5f\xd9\x8f\x3d\x4e\xc6\x53\x8c\x0b\x9e\x62\x3e\xcc\x0e\x4f\x11\x8c\xa9\x4e\x08\x67\x8a\x50\x86\x22\x0e\x16\xf5\xbe\x36\x43\xb7\x34\xf7\x95\x54\xbc\xf0\xeb\xf2\xd9\xfe\xff\x0f\xaf\x78\xfc\x0c\x33\x21\xc8\xf1\xc6\x92\xdd\x7a\x6c\xbe\x97\x61\x94\x8e\xb2\xf6\xfe\x42\xf2\x0a\x2f\xf4\x37\xd8\x9a\x80\xec\xf5\x2c\x0b\xac\xbe\x79\xaa\xd7\xe8\x8e\xa2\xd0\xf5\x32\x30\x50\x19\x51\x90\xf0\x3c\xc7\x44\x01\x61\x29\x48\x64\x69\xbd\xc8\x3b\x84\xa6\xf8\x11\xab\x8a\x9f\xed\xd2\xd7\xff\x5d\xb7\xa6\x98\xb2\x2f\x24\xa7\xe9\x35\xfc\x0a\xff\x37\x69\x11\x6f\x84\x4d\x8b\xa3\x7c\xcb\xa7\x25\x8a\x9d\x5d\x3f\x53\xe3\xa6\x91\xff\x1f\x44\xca\x9c\x1f\x72\xbe\x6f\x61\x3f\xf6\x61\x9c\xed\x79\xba\x9d\x96\x82\xef\x68\x8e\xa2\x45\xfe\x64\x80\x5e\xa2\x66\x46\xa6\x99\xa4\x1d\xad\x7c\x57\xab\xfc\x05\x5c\xbc\x09\xe8\x21\xba\x35\x3e\x01\x54\xc9\x0f\x2e\x03\x25\x0a\xca\xd3\x58\x2a\x22\x14\x3c\x10\x85\x1b\x5a\xa0\xb7\x04\xf4\x5f\x87\x0c\x59\xcd\xae\x67\x21\xdf\xc1\xb6\x4a\x5e\x51\x81\x71\xc3\xb4\xcb\x95\x23\xdb\xab\x0c\xfe\x9c\x33\xf5\xd3\x8f\x2d\xd5\x43\x25\x48\xed\xee\x91\x59\x26\xc7\xe0\xed\x9b\x83\x1a\x9b\x04\x42\x4a\xf7\x28\x55\xac\xf0\x5d\x7d\x74\x9b\xed\x81\xaa\x8c\x57\xca\xec\x6b\xf5\x1a\x7d\x27\x45\x99\x0f\x67\xfa\x92\x61\xbb\x49\xd7\xa0\x9d\xe0\x85\xde\x3d\x60\xc7\x2b\x96\x02\xed\x8d\xc9\xc1\xe2\x1d\x17\x05\x51\x6e\x9e\x5c\x47\x7f\xcf\x9e\x9e\x1f\xa3\xf8\xd3\x72\xf5\x34\xdb\xc4\xf3\xc5\x7f\x66\x8f\xf3\x07\x3b\x45\xa0\xb6\xda\x79\x00\xd7\x9f\xe6\x8b\xdf\xa2\xd5\xf3\x6a\xbe\xd8\x98\x9a\x7b\x45\x9c\xb3\x54\x6f\x60\x28\xbb\x35\x14\x48\xf2\xee\x30\x25\x50\x09\xa5\xe0\x19\xdd\xd2\x36\xe5\x54\xc6\x4a\x54\x4c\x33\xa4\x26\xe3\x3f\x87\xa8\xe9\x2e\xc0\xa5\x38\x87\x9c\xb3\xbd\x59\x1b\x07\x22\xa1\x21\xea\x09\xf7\x96\x47\x23\x7b\xf3\xf2\x1c\xf5\x45\xaf\x66\x8b\x87\xe5\x53\xad\x79\xfd\xb8\xfc\x2b\x5a\x5b\xbd\x3a\x05\xb3\xf5\xc6\xfd\xf9\xd3\x04\xae\xff\x9a\x6f\x7e\x8f\xa3\xd5\x6a\xb9\xd2\x9f\xfc\x2b\x98\x90\x83\x4e\x48\xb7\x54\x7a\x98\x25\x4d\x5e\x31\x85\xaa\xec\x0d\xd3\xcd\xf9\xe1\xa9\xe7\x3e\x1f\xd4\x9d\x32\xf8\xf7\x7a\xb9\x00\x5b\xd8\x7a\x41\xb0\xaa\x88\x35\x8e\xa2\x8c\xf5\xcc\x8a\x0f\x44\x30\xca\xf6\x12\x3e\xe5\x9c\x74\x66\xf4\xef\xfc\x00\x05\x61\x47\x70\x78\x33\x3c\xed\x03\x8d\x4f\x7f\x32\x7d\xae\x2d\x3f\x24\x3c\x6d\xf6\x40\xbb\x54\xbc\x24\x3c\x52\x69\xd6\x71\x8d\x0e\x78\x57\x4c\xd5\xee\x6e\x60\xfe\x1e\xaa\xcd\x9a\x00\x49\x72\x62\x34\x03\xad\x28\x04\x17\xdf\xa4\xd4\x78\x0c\x65\x5a\xa2\xcb\x44\x3e\x12\xa9\x74\x64\xc6\x07\xde\xdf\x20\xb2\x65\x39\x25\x73\x28\x6d\x56\x18\x9a\xda\x4e\x19\xa8\x8c\xca\x2e\xc1\x74\xda\x34\x87\xfa\x4f\xcb\x76\x8c\x15\x2d\x30\x4e\x98\x1a\x92\x6e\x32\xd4\x7b\xa3\x42\xd3\x09\xe0\x3b\x26\x95\xd9\xec\xb4\x87\x0e\x21\x31\xe1\x2c\xb5\x69\x2c\xb0\x99\x7b\x1d\x62\x59\x15\xdf\x4d\x1c\x24\x2c\x28\x1b\x12\xae\x0b\x92\xe7\x28\x95\x3d\x68\x9b\x45\x12\xd7\x84\x9d\x3c\x74\xe9\xc8\xfb\x90\xee\x8e\xee\xf7\xdf\xc5\x56\x7e\xf8\x30\x64\xfb\xf0\x41\x9f\x29\x89\x3e\xdb\x73\xc3\x76\x19\x6d\xce\x93\xd7\x41\x71\x86\xc6\xd1\x04\x1b\x5a\xc5\x81\x24\x6f\x15\x15\x08\xda\x45\x06\xb3\xdb\x92\x79\xc9\x0d\x18\xdb\x54\x0d\x8d\x9e\xf2\xda\x28\xf8\x41\xc6\x52\xf7\x1f\x01\x01\xad\x71\x54\x00\xab\x8a\xad\x6d\x85\x34\x58\x37\x3e\x4a\xeb\x51\x19\xba\x4e\xbd\x55\xd0\xb2\x05\x14\x78\xc6\xa1\x82\xd6\x38\xa6\x40\x6f\xb4\x94\x61\x3a\xaa\xa2\x01\x04\x95\x2c\x7a\x2a\x12\xc2\x18\xa6\x30\x85\x75\xf4\x18\xdd\x6f\x7a\x1a\x1a\xae\x31\x1d\x2d\x60\x44\x4b\x03\x18\xd3\x43\x76\x3b\x4c\xd4\x09\x3d\x0d\xe0\x12\x3d\x49\x46\xd8\xde\xe8\xf9\xf3\xf9\x61\xb6\x89\x26\xf0\x10\x3d\x46\xfa\xdf\xf9\x62\x1d\xad\xfa\xfa\x1a\xee\x31\x7d\x2d\x60\x44\x5f\x03\x18\xd3\x27\x90\x8c\x6b\x33\xc6\x4b\x67\x9c\x06\xdb\xbe\x4a\x91\x6d\x8e\xb2\xa7\xc5\x70\x8d\xe9\xb0\xc6\x11\x0d\xc6\x18\x18\x7f\x81\x62\x8f\x71\x49\xa4\x44\x19\x92\xd0\xb1\x5f\xa0\xc2\xe0\xc1\xe2\x6d\x67\xa6\x17\x8f\xe4\x42\x01\xc9\xf7\x5c\x50\x95\x15\x90\x11\x09\x19\x49\xf5\xd2\x4a\x79\x2b\xb1\x13\x2b\xa0\xb2\x6b\x1f\x0a\xed\xd8\x03\x5a\x29\x63\x3c\xdd\xc6\x94\xc7\x22\xe6\x65\x50\x6e\x1f\x12\x54\x6c\xce\x4f\x69\x84\xb5\xc2\x4b\xb2\x47\x5b\x3e\x5e\xa2\x6d\xd8\xa5\xb9\x37\xa4\x55\x8e\x69\x2b\xb2\x1f\x21\xa0\x73\x00\x19\x4a\xed\x43\xce\xa8\xdd\x1e\x55\xb8\xbc\x43\x50\x50\xf1\x9a\x16\x34\x27\x42\x17\xcc\x79\xcc\x97\x36\xf2\x04\xb6\x95\xad\x71\xc5\xa8\xd2\xed\xb1\xa1\x09\xeb\xb5\x11\xce\x28\x76\xa0\xd3\x9a\x2d\xe8\x8c\xea\x03\xa1\xc1\x83\x60\x80\x09\x6b\xce\xf4\x82\xcc\xf8\xc1\x36\xfb\x37\xed\x31\x76\x0b\x54\x1f\x0b\xfc\x15\xe6\x8c\xf1\x87\x3b\x7b\xe4\xa9\x8a\xe4\xf9\xd1\x4e\x01\x9d\x0f\x7d\xab\x72\x57\x24\xc5\x05\xd9\x63\x38\x27\x66\x00\x67\x52\x62\x31\xa7\x33\x62\x30\xe3\x09\x11\x98\xd8\xa3\xf3\x4c\x52\xba\xb8\x6f\x4e\x8c\x16\xee\x2e\x97\x44\xdf\xb6\xf4\x1d\x41\xef\x6c\xb6\x15\x18\x64\xa0\x1b\x6d\x3c\x0b\x3d\xdc\x68\x26\xba\xb8\xf1\x6c\xbc\x55\x58\xe1\xb9\x54\x78\xa0\x7f\x90\x07\x59\x9a\x86\x93\xaa\x0c\x85\x49\x8a\xbe\x63\x29\x0e\xc8\x14\x0a\x83\x73\x93\xc8\x84\x03\x73\x27\x90\x34\x75\x4f\x13\xf6\xc3\xda\x4d\x27\xb3\x69\x5d\x07\xc9\xf4\xc6\x3b\x9e\x49\x1f\x34\x9a\x46\x0f\x34\x9e\x43\xbd\xe1\xc9\x38\xa5\x52\x51\x96\x9c\xca\x63\x0f\x78\x6a\x4b\x25\x65\x29\xf8\x3b\x2d\x88\xc2\xfc\xd8\xdb\x60\x2b\x46\xdf\x2a\x34\xfb\xac\xf4\xf2\x4b\x92\x04\xa5\x0c\xec\xb0\xbd\xb0\xe3\x29\xe9\x03\x47\xd3\xd2\x03\x06\x52\x63\xbb\x6b\xfb\x8e\x13\xca\x48\xc7\x7e\xc9\xa4\x6a\x75\xd2\xc1\xdd\xc4\xd1\x04\x84\x75\xed\x43\x3d\x1d\x7b\x40\x86\x3b\x09\x46\xfa\x68\xcf\x7a\x41\x43\x60\xd0\x4d\x27\x4d\xf2\xdc\x75\xd2\x9e\x1c\x8f\x30\x20\xc6\xb7\x0e\xa5\x78\xd6\x80\x10\x55\x94\xb1\x6d\xa4\x42\x42\x3c\xeb\x99\xbe\x53\x61\x51\x72\x41\xc4\xd1\xb5\x65\x90\x08\x34\x2f\x47\x9c\x41\x81\x05\x17\x47\xb3\x36\x9b\x6a\xb5\xda\xbc\x18\x01\x6d\xbe\x75\xa8\xcd\xb3\x8e\x68\x4b\xa9\x7c\x3d\x23\xd0\x87\xfc\x03\x95\x9a\xe6\x94\x46\x3f\xcc\x88\xd0\x0e\x24\xac\xd6\x87\x9c\x2a\x67\x2c\xe9\xd7\x33\x35\x75\x90\xf0\x0c\xe5\x8a\xe4\xb0\xa6\x5f\xed\x25\xd8\xcc\x50\xad\x4d\xcf\xce\x41\x12\x2a\x89\xa9\x7d\xdd\x18\x2f\xae\x0b\x76\xaa\xc2\x35\xe4\x44\x99\x1d\x64\x20\x7c\x3a\x85\x3b\xce\x73\x24\xac\xff\x9a\x92\xc4\x59\xf8\x08\x73\x96\xa0\xfa\x3f\xcc\x7e\x72\x4f\x92\x0c\x21\xa3\xfe\x42\xdc\x55\x79\x1e\xeb\xeb\x62\x88\xb2\x35\x8e\xae\x7a\xbb\x53\x95\x28\x76\x5c\x14\x98\x02\x01\xed\x64\x13\x69\xae\xa1\xbd\x50\xff\xe5\x74\x3c\x94\x31\x7e\x6b\x28\xed\x04\x37\xc4\xfe\x5b\xbf\x6f\x53\x96\xe2\x3b\xca\xdb\x50\xe1\x4e\x4f\xa1\xd3\xd1\xeb\xe5\x41\x18\xd0\xa2\xcc\x69\xa2\x1b\x60\x7d\xac\x33\x32\x98\x47\xa1\xd8\x9c\xd9\x09\x7f\x72\x0c\x35\xe8\xf4\x58\x64\x3f\x9e\x79\x21\xd3\x8d\x67\xbb\x7c\xbd\xe4\xd3\x1c\xf5\x95\x2c\x98\xfb\xda\x76\x46\xbc\x59\x16\x04\x6a\x78\x80\xfc\x84\xbc\x01\x66\x34\x58\x8d\xb4\x2f\xd8\x4d\xb9\x07\x92\x24\xe6\x98\x28\x3b\x73\x04\x61\x7b\x1c\x9d\x5c\x23\xc8\x0b\x8e\x32\x8d\x73\x97\x5a\xa7\xde\xf8\x83\x44\x22\x92\x4c\x8f\x89\x80\xc0\x1d\x0a\x64\x09\xf6\xcb\xee\xc2\xda\x88\xe3\xc3\xb2\xf6\xef\x18\x8c\x71\x94\x7a\x10\xca\xa4\x4d\x48\x75\x7a\x08\x19\x26\xc1\xda\x04\x50\x17\x0f\xa7\x5e\x71\xaf\x78\xac\xbf\x97\xd1\x04\x66\x73\x7d\x45\x3d\x69\xf4\x2d\x99\xec\x74\xeb\x6b\x1e\x9f\x05\x3f\x78\xe3\xd3\x33\x62\x3c\x41\xad\xf5\x82\xf1\x68\xb4\x1b\xc2\x01\x05\x42\xca\x19\x42\x25\x75\x17\x6d\x33\xd5\x0f\xcb\x0f\xc1\xf3\xa4\x35\x5e\x18\x54\x97\x82\x1f\xfa\xf4\x63\x9b\x6a\x6b\xfc\x5e\x4d\xdb\xa3\x7d\xe0\xa3\xae\x5b\xec\xd5\x9c\xf1\xd8\x6c\x7f\xb1\x9e\x24\xa1\x11\x74\x01\x17\x8c\xa2\xf9\x26\xc3\xdf\x5d\x3b\x01\xf7\x9c\xa7\xe7\xa3\xf6\x51\xdf\x11\x5a\x53\x74\xe3\x4f\xa7\x60\xbe\x08\xee\x1d\x94\x29\x4f\x64\x2c\x50\x55\x62\xe4\x55\xb5\x0b\xb8\xe4\xb5\xce\x61\x21\xe5\x49\x55\x74\xfb\xd9\x2e\x59\xa0\x29\xe8\x01\x86\x2d\x41\x17\x10\x7a\x76\x44\x59\x72\x26\xf1\xc4\x5d\xa3\x0f\x19\x15\x55\x03\xc1\x7d\xff\xac\x3b\xc1\x66\x9b\x17\x28\xab\x5c\x35\x6d\x92\xf7\x1e\xd9\xa3\x0f\xbd\x4a\xf6\x21\x81\xb7\xc9\x1e\x24\x20\xd5\xe4\xc2\xbd\x61\x8f\x96\xae\xb6\x5f\xb2\x8a\xdc\x73\xf8\x58\xe1\x6a\xaa\xb1\xba\x35\xf6\x91\xb2\xd5\x76\x4f\xca\xd5\xed\x55\xb4\xf8\x6d\xbe\x88\xe0\x57\x78\x42\xb1\xc7\x8d\x40\xbc\x7a\x9e\xad\x36\xf3\xcd\x7c\xb9\x80\xbb\x17\x50\xfc\xe5\xe5\xe5\xe5\xe9\xe9\xe1\xe1\xc6\xff\x65\xc1\xed\xd5\x72\xf5\x10\xad\x34\xe2\xc6\xfd\x82\x6a\xe2\x7e\xe6\x34\x69\x7e\x8f\x34\x69\x7e\x9f\x50\xff\xfc\x68\xe2\xff\xb0\x68\xd2\xf9\xad\xc2\xed\xc7\xab\xff\x05\x00\x00\xff\xff\x2e\xaf\x2b\x4e\xcb\x25\x00\x00")

func _01_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initUpSql,
		"01_init.up.sql",
	)
}

func _01_initUpSql() (*asset, error) {
	bytes, err := _01_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xec, 0x55, 0xc0, 0x13, 0xea, 0x13, 0xcf, 0x60, 0x2, 0xb7, 0x4c, 0xbb, 0x69, 0x90, 0xd8, 0xc, 0xd1, 0xbc, 0xd0, 0x46, 0xa0, 0x7a, 0x6b, 0x89, 0x6b, 0x74, 0xe1, 0x8a, 0x39, 0x15, 0x4d, 0x14}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_init.down.sql": _01_initDownSql,

	"01_init.up.sql": _01_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"01_init.down.sql": &bintree{_01_initDownSql, map[string]*bintree{}},
	"01_init.up.sql":   &bintree{_01_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
