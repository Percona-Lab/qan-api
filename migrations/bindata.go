// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/sql/01_init.down.sql (20B)
// migrations/sql/01_init.up.sql (9.594kB)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x28\x49\x4c\xca\x49\x55\xc8\x4d\x2d\x29\xca\x4c\x2e\xb6\xe6\x02\x04\x00\x00\xff\xff\x6b\xf9\xb4\xa3\x14\x00\x00\x00")

func _01_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initDownSql,
		"01_init.down.sql",
	)
}

func _01_initDownSql() (*asset, error) {
	bytes, err := _01_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf5, 0xb9, 0x22, 0xf, 0xca, 0x89, 0xa5, 0x5, 0xf2, 0xed, 0x48, 0xd7, 0xe0, 0x9d, 0xec, 0x2, 0xab, 0x87, 0xf3, 0x9d, 0x3d, 0x5a, 0x71, 0x39, 0xe, 0x4a, 0x88, 0xde, 0x1d, 0x0, 0x1d, 0x4e}}
	return a, nil
}

var __01_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x5a\x4d\x73\xdb\x38\xd2\xbe\xfb\x57\xf4\xcd\x76\x95\x3c\xf5\xbe\x33\x7b\x98\x4c\x6a\x0e\xb2\x45\x27\xda\xd2\x87\x23\x29\x3b\xe3\x13\x03\x93\x2d\x11\x6b\x12\x50\x00\x30\xb2\xf2\xeb\xb7\xf0\x41\x12\x24\x41\x49\xc9\x9c\x12\xb3\x9f\xfe\x78\xba\x1b\x40\x13\xe2\xc3\x2a\x1a\x6f\x22\xd8\x8c\xef\x67\x11\x4c\x1f\x61\xb1\xdc\x40\xf4\xf7\x74\xbd\x59\x43\x81\x4a\xd0\x44\x5e\xdd\x5c\x01\x00\xdc\xdd\xc1\x9c\x50\x06\x29\x2d\x90\x29\xca\x99\x34\x8f\xbf\x96\x28\x8e\x34\x85\xb5\x12\x94\xed\xe0\x61\x39\x9f\x47\x8b\x0d\x5c\x67\x44\x66\xc0\xb7\x56\x0e\x5b\xca\x76\x28\xf6\x82\x32\x75\x3d\x32\x7a\x12\xc5\x37\x14\x3d\xb5\xe9\x13\x70\x01\x19\x97\x8a\x91\x02\xb5\x81\xc9\xbd\xc3\x3a\xc5\x94\x28\xf2\x42\x24\xf6\x54\x9f\xb8\x54\x3b\x81\xeb\x4f\xb3\x3f\x6a\x50\xe5\x2c\xc9\xb0\x20\x3d\x8d\xf9\xb1\x05\x7e\x0f\xbe\x09\xab\xe3\x0c\x94\x12\x85\x09\xa8\x6b\x22\xc9\x29\x32\x65\xe4\xa0\x01\x0e\x6f\x1f\xc7\x9a\xc7\x90\x4a\x9b\xa9\xd3\xbb\xbb\x03\x58\x2b\xc2\x52\x22\x52\xc8\xc9\x0b\xe6\x36\xcb\x02\xf7\x39\x4d\x88\x4e\x7b\x2c\xb1\x6f\x73\xe1\x92\xe5\xe1\x40\xa2\xaa\xa3\x29\xa5\x0a\x24\xfb\xc1\x3d\xf7\x02\xd0\xa9\xa6\x09\xc6\xea\xb8\xef\x93\xdd\xe8\x87\x7c\x5b\x81\x9c\x0a\xb2\x6f\x54\x70\xa6\xbb\xa2\xa7\x11\x79\x32\xcf\x0b\xf9\xde\x43\x8e\xbf\x11\x9a\x93\x17\x9a\x53\x75\x84\xef\x9c\x55\x50\x81\x3b\x4d\xa6\x0b\x5f\xd9\xc7\x9e\x4d\xc6\x53\x8c\x0b\x9e\x62\xde\xcf\x0e\x4f\x11\x8c\xa8\x4a\x08\x67\x8a\x50\x86\x22\x0e\x16\xf5\xa1\x12\x43\xbb\x34\x0f\xa5\x54\xbc\xf0\xeb\xf2\xc5\xfe\xff\x97\x57\x3c\x7e\x81\xb1\x10\xe4\x78\x63\x8d\xdd\x7a\xd6\x7c\x2d\x63\x51\x3a\x93\x95\xf6\x37\x92\x97\x78\xa1\xbe\xc1\x56\x06\xc8\x4e\x77\x59\x60\xf5\x4d\x53\xbd\x46\xb7\x14\x85\xae\x97\x81\x81\xca\x88\x82\x84\xe7\x39\x26\x0a\x08\x4b\x41\x22\x4b\xab\x45\xde\x32\x68\x8a\x1f\xb1\xb2\xf8\xfd\xe6\x7a\x1e\x6d\x56\xd3\x87\x75\xbc\x5e\x7e\x5e\x3d\x44\xf1\x74\xf1\x9f\xf1\x6c\x3a\xb9\x86\x3f\xe1\xff\x46\x70\x3d\x7f\x5e\x7f\x9a\xc5\xeb\xd9\xf2\xaf\xd9\xf2\x83\x7e\xf8\xff\xf5\xc3\xa7\x68\xf5\xb8\x7e\xf8\x18\xcd\xc7\xfa\xf9\xaf\xfa\xf9\x72\xf1\x61\x39\xb9\x8f\x9f\x56\xcb\xc7\xe9\x2c\x5a\xe9\xe7\xbf\x79\x44\xd7\xbc\x14\x89\x69\x30\x17\xd4\x1f\x20\x73\x7e\xc8\xf9\x6e\x04\x7b\x14\x5b\xb7\x24\x47\x80\x2a\xf9\xc5\x05\xbc\x47\x41\x79\x1a\x4b\x45\x84\x82\x09\x51\xb8\xa1\x05\x7a\x1d\xab\xff\x3a\x64\xc8\x2a\xe2\xba\x69\xf8\x16\x5e\xca\xe4\x15\x15\x18\x35\x4c\xdb\xb6\x72\x64\x3b\x95\xc1\xe7\x29\x53\xbf\xfd\xda\x98\x9a\x94\x82\x54\xea\x9e\x31\x6b\xc9\x59\xf0\xb6\xb9\x5e\x49\x8a\xa3\xfc\x9a\x43\x4a\x77\x28\x55\xac\xf0\x4d\xbd\x77\x7b\xe3\x81\xaa\x8c\x97\xca\x6c\x43\xd5\x92\x7a\x23\xc5\x3e\xef\x37\xe6\x92\x61\xb3\xa7\x56\xa0\xad\xe0\x85\x5e\xec\xb0\xe5\x25\x4b\x81\x76\x62\x72\xb0\x78\xcb\x45\x41\x54\x55\xd6\xe8\xef\xf1\xfc\x69\x16\xc5\x8f\xcb\xd5\x7c\xbc\xe9\x96\xd5\x49\xab\x82\x3e\x4e\x17\x1f\xa2\xd5\xd3\x6a\xba\xd8\x98\x5a\x7a\x35\x9b\xb2\x54\xef\x37\x28\xdb\xed\x25\x90\xe4\xed\x30\x25\x50\x09\x7b\xc1\x33\xfa\x42\x9b\x94\x53\x19\x2b\x51\x32\x6d\x21\x35\x19\xff\x3d\x64\x9a\x6e\x03\xb6\x14\xe7\x90\x73\xb6\x33\xad\x7c\x20\x12\x6a\x43\x1d\xe2\x7e\x37\x57\xb4\x37\xcf\x4f\xbd\x5e\x5e\x8d\x17\x93\xe5\xbc\xe2\xac\x7b\x3a\x5a\x6f\xaa\xde\x7d\x1c\xaf\x37\xee\xcf\xdf\x46\x70\xfd\xd7\x74\xf3\x31\x8e\x56\xab\xa5\x69\xe2\x7f\x05\x13\x72\xd0\x09\x69\x97\x4a\x87\xb9\xa7\xc9\x2b\xa6\x50\xee\x3b\x61\xba\x9e\xef\x1f\x52\xee\x79\xaf\xee\x94\xc1\xbf\xd7\xcb\x05\xd8\xc2\x56\x0b\x82\x95\x45\xac\x71\x14\x65\xac\x3b\x2b\x3e\x10\xc1\x28\xdb\x49\x78\xcc\x39\x69\x75\xf4\x47\x7e\x80\x82\xb0\x23\x38\xbc\x09\x4f\xeb\x40\xad\xd3\x6d\xa6\x2f\x95\xe4\x97\x84\xa7\xf5\x96\x65\x97\x8a\x97\x84\x19\x95\x4a\x07\x5c\xa1\x03\xda\x25\x53\x95\xba\x0b\xcc\xdf\xf2\xb4\x58\x1b\x40\x92\x9c\x88\xa6\xc7\x15\x85\xe0\xe2\x87\x98\x1a\x8d\x3e\x4d\x6b\xe8\x32\x92\x33\x22\x95\xf6\xcc\x78\x4f\xfb\x07\x48\x36\x56\x4e\xd1\xec\x53\x1b\x17\xc6\x4c\x25\xa7\x0c\x54\x46\x65\xdb\xc0\xdd\x5d\x3d\xcb\xe9\x3f\xad\xb5\x63\xac\x68\x81\x71\xc2\x54\xdf\xe8\x26\x43\xbd\x37\x2a\x34\x07\x37\xbe\x61\x52\x9a\xcd\x4e\x6b\x68\x17\x12\x13\xce\x52\x9b\xc6\x02\xeb\xde\x6b\x19\x96\x65\xf1\xd3\x86\x83\x06\x0b\xca\xfa\x06\xd7\x05\xc9\x73\x94\xca\x9e\x8b\xf5\x22\x89\x2b\x83\xad\x3c\xb4\xcd\x91\xb7\xbe\xb9\x7b\xba\xdb\xfd\x94\xb5\xfd\xbb\x77\x7d\x6b\xef\xde\xe9\x33\x25\xd1\x47\x71\x6e\xac\x5d\x66\x36\xe7\xc9\x6b\xaf\x38\x7d\xe1\x60\x82\x8d\x59\xc5\x81\x24\x5f\x4b\x2a\x10\xb4\x8a\x0c\x66\xb7\x31\xe6\x25\x37\x20\x6c\x52\xd5\x17\x7a\xcc\x2b\xa1\xe0\x07\x19\x4b\x3d\x49\x04\x08\x34\xc2\x41\x02\xac\x2c\x5e\xec\xe4\xa2\xc1\x7a\x4e\x51\x9a\x8f\xca\xd0\x0d\xd6\x0d\x83\xc6\x5a\x80\x81\x27\xec\x33\x68\x84\x43\x0c\xf4\x46\x4b\x19\xa6\x83\x2c\x6a\x40\x90\xc9\xa2\xc3\x22\x21\x8c\x61\x0a\x77\xb0\x8e\x66\xd1\xc3\xa6\xc3\xa1\xb6\x35\xc4\xa3\x01\x0c\x70\xa9\x01\x43\x7c\xc8\x76\x8b\x89\x3a\xc1\xa7\x06\x5c\xc2\x27\xc9\x08\xdb\x19\x3e\x9f\x9f\x26\xe3\x4d\x34\x82\x49\x34\x8b\xf4\xbf\xd3\xc5\x3a\x5a\x75\xf9\xd5\xb6\x87\xf8\x35\x80\x01\x7e\x35\x60\x88\x9f\x40\x32\xcc\xcd\x08\x2f\xed\x38\x0d\xb6\x73\x95\x22\x2f\x39\xca\x0e\x17\x63\x6b\x88\x87\x15\x0e\x70\x30\xc2\x40\xfc\x05\x8a\x1d\xc6\x7b\x22\x25\xca\x10\x85\x96\xfc\x02\x16\x06\x0f\x16\x6f\x27\x33\xbd\x78\x24\x17\x0a\x48\xbe\xe3\x82\xaa\xac\x80\x8c\x48\xc8\x48\xaa\x97\x56\xca\x1b\x8a\x2d\x5f\x01\x96\x6d\x79\x9f\x68\x4b\x1e\xe0\x4a\x19\xe3\xe9\x4b\x4c\x79\x2c\x62\xbe\x0f\xd2\xed\x42\x82\x8c\xcd\xf9\x29\x0d\xb1\x86\xf8\x9e\xec\xd0\x96\x8f\xef\xd1\x0e\xec\xd2\xbc\x37\xa4\x65\x8e\x69\x43\xb2\xeb\x21\xc0\xb3\x07\xe9\x53\xed\x42\xce\xb0\x7d\x39\xaa\x70\x79\xfb\xa0\x20\xe3\x35\x2d\x68\x4e\x84\x2e\x98\xd3\x98\x2e\xad\xe7\x11\xbc\x94\xb6\xc6\x25\xa3\x4a\x8f\xc7\xc6\x4c\x98\xaf\xf5\x70\x86\xb1\x03\x9d\xe6\x6c\x41\x67\x58\x1f\x08\x0d\x1e\x04\x3d\x4c\x98\x73\xa6\x17\x64\xc6\x0f\x76\xd8\xbf\x69\x8e\xb1\x5b\xa0\xfa\x58\xe0\xaf\x30\x65\x8c\x4f\xee\xed\x91\xa7\x4a\x92\xe7\x47\xdb\x02\x3a\x1f\xfa\xad\xca\xbd\x22\x29\x2e\xc8\x0e\xc3\x39\x31\x01\x9c\x49\x89\xc5\x9c\xce\x88\xc1\x0c\x27\x44\x60\x62\x8f\xce\x33\x49\x69\xe3\x7e\x38\x31\x9a\xb8\x7b\xb9\x24\xfa\x6d\x4b\xbf\x23\xe8\x9d\xcd\x8e\x02\xbd\x0c\xb4\xbd\x0d\x67\xa1\x83\x1b\xcc\x44\x1b\x37\x9c\x8d\xaf\x25\x96\x78\x2e\x15\x1e\xe8\x1f\xe4\x41\xee\xcd\xc0\x49\x55\x86\xc2\x24\x45\xbf\x63\x29\x0e\xc8\x14\x0a\x83\x73\x4d\x64\xdc\x81\x79\x27\x90\x34\x45\xbb\x79\xda\x87\x95\x9a\x4e\x66\x3d\xba\xf6\x92\xe9\xc5\x3b\x9c\x49\x1f\x34\x98\x46\x0f\x34\x9c\x43\xbd\xe1\xc9\x38\xa5\x52\x51\x96\x9c\xca\x63\x07\x78\x6a\x4b\x25\xfb\xbd\xe0\x6f\xb4\x20\x0a\xf3\x63\x67\x83\x2d\x19\xfd\x5a\xa2\xd9\x67\xa5\x97\x5f\x92\x24\x28\x65\x60\x87\xed\xb8\x1d\x4e\x49\x17\x38\x98\x96\x0e\x30\x90\x1a\x3b\x5d\xdb\x7b\x9c\x50\x46\x5a\xf2\x4b\x9a\xaa\xe1\x49\x7b\xef\x26\xce\x4c\x80\x58\x5b\xde\xe7\xd3\x92\x07\x68\xb8\x93\x60\x60\x8e\xf6\xa4\x17\x0c\x04\x06\x5d\x4f\xd2\x24\xcf\xdd\x24\xed\xd1\xf1\x0c\x06\xc8\xf8\xd2\x3e\x15\x4f\x1a\x20\xa2\x8a\x7d\x6c\x07\xa9\x10\x11\x4f\x7a\x66\xee\x54\x58\xec\xb9\x20\xe2\xe8\xc6\x32\x48\x04\x9a\x9b\x23\xce\xa0\xc0\x82\x8b\xa3\x59\x9b\x75\xb5\x1a\x6e\x9e\x8f\x00\x37\x5f\xda\xe7\xe6\x49\x07\xb8\xa5\x54\xbe\x9e\x21\xe8\x43\xfe\x01\x4b\x6d\xe6\x14\x47\xdf\xcd\x00\xd1\x16\x24\xcc\xd6\x87\x9c\x2a\x67\x2c\xe9\xf7\x33\x35\x75\x90\x70\x87\x72\x45\x72\x58\xd3\xef\xf6\x25\xd8\x74\xa8\xe6\xa6\xbb\xb3\x97\x84\x52\x62\x6a\x6f\x37\x86\x8b\xeb\x9c\x9d\xaa\x70\x05\x39\x51\x66\x07\xe9\x11\xbf\xbb\x83\x7b\xce\x73\x24\xac\x7b\x9b\x92\xc4\x59\xf8\x08\x73\x92\x20\xfb\x4f\x66\x3f\x79\x20\x49\x86\x90\x51\x7f\x21\x6e\xcb\x3c\x8f\xf5\xeb\x62\xc8\x64\x23\x1c\x5c\xf5\x76\xa7\xda\xa3\xd8\x72\x51\x60\x0a\x04\xb4\x92\x4d\xa4\x79\x0d\xed\xb8\xfa\x2f\xa7\xc3\xae\x8c\xf0\x47\x5d\x69\x25\xb8\x21\xf6\xdf\xea\x7e\x9b\xb2\x14\xdf\x50\xde\x86\x0a\x77\xba\x85\x4e\x7b\xaf\x96\x07\x61\x40\x8b\x7d\x4e\x13\x3d\x00\xeb\x63\x9d\x91\x5e\x1f\x85\x7c\x73\x66\x1b\xfe\x64\x0c\x15\xe8\x74\x2c\xb2\xeb\xcf\xdc\x90\xe9\xc1\xb3\x59\xbe\x5e\xf2\x69\x8e\xfa\x95\x2c\x98\xfb\x4a\x76\x86\xbc\x59\x16\x04\x2a\x78\xc0\xf8\x09\x7a\x3d\xcc\xa0\xb3\x0a\x69\x6f\xb0\xeb\x72\xf7\x28\x49\xcc\x31\x51\xb6\x73\x04\x61\x3b\x1c\x6c\xae\x01\xe4\x05\x47\x99\xc6\xb9\x97\x5a\xc7\xde\xe8\x83\x44\x22\x92\x4c\xc7\x44\x40\xe0\x16\x05\xb2\x04\xbb\x65\x77\x6e\xad\xc7\xe1\xb0\xac\xfc\x27\x82\x31\x8a\x52\x07\xa1\x4c\xda\x84\x54\xa7\x43\xc8\x30\x09\xd6\x26\x80\xba\x38\x9c\x6a\xc5\xbd\xe2\xb1\xfa\x5d\x46\x1b\x30\x9b\xeb\x2b\xea\xa6\xd1\x6f\xc9\x64\xab\x47\x5f\x73\xf9\x2c\xf8\xc1\x8b\x4f\x77\xc4\x70\x82\x1a\xe9\x05\xf1\x68\xb4\x0b\xe1\x80\x02\x21\xe5\x0c\xa1\x94\x7a\x8a\xb6\x99\xea\xba\xe5\x87\xe0\x79\xd2\x08\x2f\x74\xaa\x4b\xc1\x0f\x5d\xf3\x43\x9b\x6a\x23\xfc\x59\x4e\x2f\x47\x7b\xc1\x47\xdd\xb4\xd8\xa9\x39\xe3\xb1\xd9\xfe\x62\xdd\x24\xa1\x08\xda\x80\x0b\xa2\xa8\x7f\xc9\xf0\x77\xd7\x96\xc3\x1d\xe7\xe9\x79\xaf\x5d\xd4\x4f\xb8\xd6\x26\xda\xfe\xef\xee\xa0\xe0\x6c\xc7\x3b\x07\x65\xca\x13\x19\x0b\x54\xa5\x18\xb8\x55\x6d\x03\x2e\xb9\xad\x73\x58\x48\x79\x52\x16\xed\x79\xb6\x6d\x2c\x30\x14\x74\x00\xfd\x91\xa0\x0d\x08\x5d\x3b\xa2\xdc\x73\x26\xf1\xc4\xbb\x46\x17\x32\x48\xaa\x02\x82\xfb\xfd\x59\x4f\x82\xf5\x36\x2f\x50\x96\xb9\xaa\xc7\x24\xef\x3e\xb2\x63\x3e\x74\x2b\xd9\x85\x04\xee\x26\x3b\x90\x00\x55\x93\x0b\x77\x87\x3d\x58\xba\x4a\x7e\xc9\x2a\x72\xd7\xe1\x43\x85\xab\x4c\x0d\xd5\xad\x96\x0f\x94\xad\x92\x7b\x54\xae\x6e\xaf\xa2\xc5\x87\xe9\x22\x82\x3f\x61\x8e\x62\x87\x1b\x81\x78\xf5\x34\x5e\x6d\xa6\x9b\xe9\x72\x01\xf7\xcf\xa0\xf8\xf3\xf3\xf3\xf3\x7c\x3e\x99\xdc\xf8\x5f\x16\xdc\x5e\x2d\x57\x93\x68\xa5\x11\x37\xee\x83\xa7\x91\xfb\x2a\x69\x54\x7f\x3e\x34\xaa\xbf\x4f\xa8\xbe\x16\x1a\xf9\xdf\x01\x8d\x5a\xdf\x2a\xdc\xbe\xbf\xfa\x5f\x00\x00\x00\xff\xff\x0a\xe8\x7b\xf3\x7a\x25\x00\x00")

func _01_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initUpSql,
		"01_init.up.sql",
	)
}

func _01_initUpSql() (*asset, error) {
	bytes, err := _01_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf6, 0x6b, 0x31, 0x6d, 0xf5, 0xb, 0xb1, 0x5e, 0x6a, 0x30, 0xe7, 0x50, 0x1, 0x87, 0x35, 0x32, 0xd1, 0x60, 0xd7, 0x7a, 0x28, 0x4a, 0xe1, 0x25, 0x6c, 0x85, 0x1a, 0x6c, 0xe, 0x50, 0xef, 0x2}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_init.down.sql": _01_initDownSql,

	"01_init.up.sql": _01_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"01_init.down.sql": &bintree{_01_initDownSql, map[string]*bintree{}},
	"01_init.up.sql":   &bintree{_01_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
