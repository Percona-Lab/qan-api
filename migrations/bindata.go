// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/sql/01_init.down.sql (20B)
// migrations/sql/01_init.up.sql (9.608kB)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x28\x49\x4c\xca\x49\x55\xc8\x4d\x2d\x29\xca\x4c\x2e\xb6\xe6\x02\x04\x00\x00\xff\xff\x6b\xf9\xb4\xa3\x14\x00\x00\x00")

func _01_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initDownSql,
		"01_init.down.sql",
	)
}

func _01_initDownSql() (*asset, error) {
	bytes, err := _01_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf5, 0xb9, 0x22, 0xf, 0xca, 0x89, 0xa5, 0x5, 0xf2, 0xed, 0x48, 0xd7, 0xe0, 0x9d, 0xec, 0x2, 0xab, 0x87, 0xf3, 0x9d, 0x3d, 0x5a, 0x71, 0x39, 0xe, 0x4a, 0x88, 0xde, 0x1d, 0x0, 0x1d, 0x4e}}
	return a, nil
}

var __01_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x5a\x4d\x73\xdb\x38\x12\xbd\xfb\x57\xf4\xcd\x76\x95\x9c\xda\x9d\xec\x61\x92\xd4\x1c\x64\x8b\x4e\xb4\xa5\x0f\x47\x52\x76\xc6\x27\x06\x22\x5b\x22\xd6\x24\xc0\x00\x60\x64\xe5\xd7\x4f\x01\xe0\x07\x48\x82\x92\x92\x39\x25\x66\x3f\xbc\xc6\xeb\x6e\x00\x4d\x88\x0f\xab\x60\xbc\x09\x60\x33\xbe\x9f\x05\x30\x7d\x84\xc5\x72\x03\xc1\x5f\xd3\xf5\x66\x0d\x19\x2a\x41\x23\x79\x75\x73\x05\x00\xf0\xad\x40\x71\xa4\x31\xac\x95\xa0\x6c\x0f\x0f\xcb\xf9\x3c\x58\x6c\xe0\x3a\x21\x32\x01\xbe\xb3\x76\xd8\x51\xb6\x47\x91\x0b\xca\xd4\xf5\xc8\x8c\x8b\x43\x89\xe2\x3b\x8a\xde\xc0\x98\x67\xc8\x14\xe5\xec\x3d\x4c\x9f\x80\x0b\x48\xb8\x54\x8c\x64\xa8\xd9\x26\xf7\x60\x87\xd5\x2c\x31\x51\x64\x4b\x24\xf6\x78\x9e\xb8\x54\x7b\x81\xeb\xcf\xb3\xf7\x50\x81\x1a\xdf\x51\x82\x19\xe9\x8d\x99\x1f\x5b\xf0\x0f\xe0\x92\xd8\x31\x35\x45\x21\x51\x98\x69\x75\x49\xa2\x94\x22\x53\xa0\xed\xa0\x01\xf5\x08\x6b\x08\xb5\x9e\xa1\x41\x6d\xc5\xe5\xc8\xbb\x3b\x80\xb5\x22\x2c\x26\x22\x86\x94\x6c\x31\x95\xe6\xb9\xc0\x3c\xa5\x11\xd1\xb1\x0a\x25\xf6\x39\x17\x65\xd0\x1c\x1c\x48\xac\x12\x10\xa5\x85\x54\x9e\xf8\x3f\x94\xcf\x9d\x09\xe8\x90\xd3\x08\x43\x75\xcc\xfb\x72\x37\xfa\x21\xdf\x55\xa0\x72\x08\xb2\xef\x54\x70\xa6\x53\xd9\x1b\x11\x38\x36\xc7\x0b\xf9\xd1\x43\x8e\xbf\x13\x9a\x92\x2d\x4d\xa9\x3a\xc2\x0f\xce\x2a\xa8\xc0\xbd\x16\xd3\x85\xaf\xec\x63\x87\x93\xf1\x18\xc3\x8c\xc7\x98\xf6\xa3\xc3\x63\x04\x63\xaa\x02\xc2\x99\x22\x94\xa1\x08\xbd\x69\x7d\xa8\xcc\xd0\x4e\xcd\x43\x21\x15\xcf\xdc\xbc\x7c\xb5\xff\x7f\xf3\x82\xc7\xaf\x30\x16\x82\x1c\x6f\x2c\xd9\xad\xc3\xe6\x8e\x32\x8c\xb2\xa4\xac\x46\x7f\x27\x69\x81\x17\x8e\x37\xd8\x8a\x80\xec\x75\x95\x15\x85\x67\x51\x4e\x63\xbd\xb4\x76\x14\x85\xce\x98\x01\x82\x4a\x88\x82\x88\xa7\x29\x46\x0a\x08\x8b\x41\x22\x8b\xab\x45\x5e\x52\x96\x7f\x85\x92\x17\x22\x42\x08\x58\x91\xfd\x7e\x73\x3d\x0f\x36\xab\xe9\xc3\x3a\x5c\x2f\xbf\xac\x1e\x82\x70\xba\xf8\xdf\x78\x36\x9d\x5c\xc3\x1f\xf0\xaf\x11\x5c\xcf\x9f\xd7\x9f\x67\xe1\x7a\xb6\xfc\x73\xb6\xfc\xa8\x1f\xfe\xbb\x7e\xf8\x14\xac\x1e\xd7\x0f\x9f\x82\xf9\x58\x3f\xff\x4d\x3f\x5f\x2e\x3e\x2e\x27\xf7\xe1\xd3\x6a\xf9\x38\x9d\x05\x2b\xfd\xfc\xad\x23\x77\x6d\x1d\xf3\x5d\x35\x95\xf7\x20\x53\x7e\x48\xf9\x7e\x04\x39\x8a\x5d\xb9\x38\x47\x80\x2a\x7a\x53\x4e\x3a\x47\x41\x79\x1c\x4a\x45\x84\x82\x09\x51\xb8\xa1\x19\x3a\x75\xab\xff\x3a\x24\xc8\x2a\xf1\xba\x74\xf8\x0e\xb6\x45\xf4\x82\x0a\xcc\x30\x8c\xdb\x5c\x29\xb2\xbd\x4a\xe0\xcb\x94\xa9\xb7\xbf\x35\x54\x93\x42\x90\x6a\xb8\x43\x66\x99\x4a\x06\x67\x07\xec\xa5\x25\x3b\xca\x6f\x29\xc4\x74\x8f\x52\x85\x0a\x5f\xd5\x87\x72\xdb\x3c\x50\x95\xf0\x42\x99\x0d\xa9\x5a\x58\xaf\x24\xcb\xd3\x7e\x79\x2e\x19\x36\xdb\x6d\x05\xda\x09\x9e\xe9\x25\x0f\x3b\x5e\xb0\x18\x68\x67\x4e\x25\x2c\xdc\x71\x91\x11\x55\xa5\x35\xf8\x6b\x3c\x7f\x9a\x05\xe1\xe3\x72\x35\x1f\x6f\xba\x69\x2d\xad\x55\x42\x1f\xa7\x8b\x8f\xc1\xea\x69\x35\x5d\x6c\x4c\x2e\x9d\x9c\x4d\x59\xac\x77\x1d\x94\xed\x12\x13\x48\xd2\xf6\x34\x25\x50\x09\xb9\xe0\x09\xdd\xd2\x26\xe4\x54\x86\x4a\x14\x4c\x33\xc4\x26\xe2\xbf\xfb\xa8\xe9\xce\xc3\xa5\x38\x87\x94\xb3\xbd\x29\xe7\x03\x91\x50\x13\x75\x84\x9b\x0d\xad\x23\x7b\xf3\xfc\xd4\xab\xe5\xd5\x78\x31\x59\xce\x2b\xcd\xba\xa6\x83\xf5\xa6\xaa\xdd\xc7\xf1\x7a\x53\xfe\xf9\x76\x04\xd7\x7f\x4e\x37\x9f\xc2\x60\xb5\x5a\x9a\x22\xfe\x8f\x37\x20\x07\x1d\x90\x76\xaa\xf4\x34\x73\x1a\xbd\x60\x0c\x45\xde\x99\x66\x59\xf3\xfd\xe3\xaa\x7c\xde\xcb\x3b\x65\xf0\xdf\xf5\x72\x01\x36\xb1\xd5\x82\x60\x45\x16\x6a\x1c\x45\x19\xea\xca\x0a\x0f\x44\x30\xca\xf6\x12\x1e\x53\x4e\x5a\x15\xfd\x89\x1f\x20\x23\xec\x08\x25\xde\x4c\x4f\x8f\x81\x7a\x4c\xb7\x98\xbe\x56\x96\x37\x11\x8f\xeb\x8d\xcb\x2e\x15\x27\x08\x33\x2a\x95\x9e\x70\x85\xf6\x8c\x2e\x98\xaa\x86\x97\x13\x73\x37\x3e\x6d\xd6\x04\x48\xa2\x13\xb3\xe9\x69\x45\x21\xb8\xf8\x29\xa5\x66\x44\x5f\xa6\x25\xba\x4c\xe4\x8c\x48\xa5\x3d\x33\xde\x1b\xfd\x13\x22\x1b\x96\x53\x32\xfb\xd2\xc6\x99\xa1\xa9\xec\x94\x81\x4a\xa8\x6c\x13\xdc\xdd\xd5\xfd\x9c\xd9\xe8\x0d\xdb\x31\x54\x34\xc3\x30\x62\xaa\x4f\xba\x49\x50\xef\x8d\x0a\xcd\xf1\x8d\xaf\x18\x15\x66\xb3\xd3\x23\xb4\x0b\x89\x11\x67\xb1\x0d\x63\x86\x75\xed\xb5\x88\x65\x91\xfd\x32\xb1\x97\x30\xa3\xac\x4f\xb8\xce\x48\x9a\xa2\x54\xf6\x74\xac\x17\x49\x58\x11\xb6\xe2\xd0\xa6\x23\xaf\x7d\xba\x7b\xba\xdf\xff\x12\x5b\xfe\xee\x5d\x9f\xed\xdd\x3b\x7d\xa6\x44\xfa\x38\x4e\x0d\xdb\x65\xb4\x29\x8f\x5e\x7a\xc9\xe9\x1b\x07\x03\x6c\x68\x15\x07\x12\x7d\x2b\xa8\x40\xd0\x43\xa4\x37\xba\x0d\x99\x13\x5c\x8f\xb1\x09\x55\xdf\xe8\x28\xaf\x8c\x82\x1f\x64\x28\x75\x83\xe2\x11\xd0\x18\x07\x05\xb0\x22\xdb\xda\xee\x45\x83\x75\xaf\xa2\xb4\x1e\x95\x20\xd8\x16\xba\x51\xd0\xb0\x79\x14\x38\xc6\xbe\x82\xc6\x38\xa4\x40\x6f\xb4\x94\x61\x3c\xa8\xa2\x06\x78\x95\x2c\x3a\x2a\x22\xc2\x18\xc6\x70\x07\xeb\x60\x16\x3c\x6c\x3a\x1a\x6a\xae\x21\x1d\x0d\x60\x40\x4b\x0d\x18\xd2\x43\x76\x3b\x8c\xd4\x09\x3d\x35\xe0\x12\x3d\x51\x42\xd8\xde\xe8\xf9\xf2\x34\x19\x6f\x82\x11\x4c\x82\x59\xa0\xff\x9d\x2e\xd6\xc1\xaa\xab\xaf\xe6\x1e\xd2\xd7\x00\x06\xf4\xd5\x80\x21\x7d\x02\xc9\xb0\x36\x63\xbc\xb4\xe2\x34\xd8\xf6\x55\x8a\x6c\x53\x94\x1d\x2d\x86\x6b\x48\x87\x35\x0e\x68\x30\x46\xcf\xfc\x33\x14\x7b\x0c\x73\x22\x25\x4a\x9f\x84\x96\xfd\x02\x15\x06\x0f\x16\x6f\x3b\x33\xbd\x78\x24\x17\x0a\x48\xba\xe7\x82\xaa\x24\x83\x84\x48\x48\x48\xac\x97\x56\xcc\x1b\x89\x2d\x5f\x1e\x95\x6d\x7b\x5f\x68\xcb\xee\xd1\x4a\x19\xe3\xf1\x36\xa4\x3c\x14\x21\xcf\xbd\x72\xbb\x10\xaf\x62\x73\x7e\x4a\x23\xac\x11\x9e\x93\x3d\xda\xf4\xf1\x1c\x6d\xc3\x2e\xcd\x7b\x43\x5c\xa4\x18\x37\x22\xbb\x1e\x3c\x3a\x7b\x90\xbe\xd4\x2e\xe4\x8c\xda\xed\x51\xf9\xd3\xdb\x07\x79\x15\xaf\x69\x46\x53\x22\x74\xc2\xca\x11\xd3\xa5\xf5\x3c\x82\x6d\x61\x73\x5c\x30\xaa\x74\x7b\x6c\x68\xfc\x7a\xad\x87\x33\x8a\x4b\xd0\x69\xcd\x16\x74\x46\xf5\x81\x50\xef\x41\xd0\xc3\xf8\x35\x27\x7a\x41\x26\xfc\x60\x9b\xfd\x9b\xe6\x18\xbb\x05\xaa\x8f\x05\xfe\x02\x53\xc6\xf8\xe4\xde\x1e\x79\xaa\x20\x69\x7a\xb4\x25\xa0\xe3\xa1\xdf\xaa\xca\x57\x24\xc5\x05\xd9\xa3\x3f\x26\x66\x02\x67\x42\x62\x31\xa7\x23\x62\x30\xc3\x01\x11\x18\xd9\xa3\xf3\x4c\x50\xda\xb8\x9f\x0e\x8c\x16\x5e\xbe\x5c\x12\xfd\xb6\xa5\xdf\x11\xf4\xce\x66\x5b\x81\x5e\x04\xda\xde\x86\xa3\xd0\xc1\x0d\x46\xa2\x8d\x1b\x8e\xc6\xb7\x02\x0b\x3c\x17\x0a\x07\xf4\x0f\xe2\x20\x73\xd3\x70\x52\x95\xa0\x30\x41\xd1\xef\x58\x8a\x03\x32\x85\xc2\xe0\xca\x22\x32\xee\xc0\xbc\x13\x48\x1a\xa3\xdd\x3c\xed\xc3\x6a\x98\x0e\x66\xdd\xba\xf6\x82\xe9\xcc\x77\x38\x92\x2e\x68\x30\x8c\x0e\x68\x38\x86\x7a\xc3\x93\x61\x4c\xa5\xa2\x2c\x3a\x15\xc7\x0e\xf0\xd4\x96\x4a\xf2\x5c\xf0\x57\x9a\x11\x85\xe9\xb1\xb3\xc1\x16\x8c\x7e\x2b\xd0\xec\xb3\xd2\x89\x2f\x89\x22\x94\xd2\xb3\xc3\x76\xdc\x0e\x87\xa4\x0b\x1c\x0c\x4b\x07\xe8\x09\x8d\xed\xae\xed\x3d\x8e\x2f\x22\x2d\xfb\x25\x45\xd5\xe8\xa4\xbd\x77\x93\x92\xc6\x23\xac\x6d\xef\xeb\x69\xd9\x3d\x32\xca\x93\x60\xa0\x8f\x76\xac\x17\x34\x04\x06\x5d\x77\xd2\x24\x4d\xcb\x4e\xda\x91\xe3\x10\x7a\xc4\xb8\xd6\xbe\x14\xc7\xea\x11\xa2\xb2\x3c\xb4\x8d\x94\x4f\x88\x63\x3d\xd3\x77\x2a\xcc\x72\x2e\x88\x38\x96\x6d\x19\x44\x02\xcd\xcd\x11\x67\x90\x61\xc6\xc5\xd1\xac\xcd\x3a\x5b\x8d\x36\xc7\x87\x47\x9b\x6b\xed\x6b\x73\xac\x03\xda\x62\x2a\x5f\xce\x08\x74\x21\xff\x40\xa5\xa6\x39\xa5\xd1\x75\x33\x20\xb4\x05\xf1\xab\x75\x21\xa7\xd2\x19\x4a\xfa\xe3\x4c\x4e\x4b\x88\xbf\x42\xb9\x22\x29\xac\xe9\x0f\xfb\x12\x6c\x2a\x54\x6b\xd3\xd5\xd9\x0b\x42\x21\x31\xb6\xb7\x1b\xc3\xc9\x2d\x9d\x9d\xca\x70\x05\x39\x91\xe6\x12\xd2\x13\x7e\x77\x07\xf7\x9c\xa7\x48\x58\xf7\x36\x25\x0a\x13\xff\x11\x56\x5a\xbc\xea\x3f\x9b\xfd\xe4\x81\x44\x09\x42\x42\xdd\x85\xb8\x2b\xd2\x34\xd4\xaf\x8b\x3e\xca\xc6\x38\xb8\xea\xed\x4e\x95\xa3\xd8\x71\x91\x61\x0c\x04\xf4\x20\x1b\x48\xf3\x1a\xda\x71\xf5\x7f\x4e\x87\x5d\x19\xe3\xcf\xba\xd2\x83\xe0\x86\xd8\x7f\xab\xfb\x6d\xca\x62\x7c\x45\x79\xeb\x4b\xdc\xe9\x12\x3a\xed\xbd\x5a\x1e\x84\x01\xcd\xf2\x94\x46\xba\x01\xd6\xc7\x3a\x23\xbd\x3a\xf2\xf9\xe6\xcc\x16\xfc\xc9\x39\x54\xa0\xd3\x73\x91\x5d\x7f\xe6\x86\x4c\x37\x9e\xcd\xf2\x75\x82\x4f\x53\xd4\xaf\x64\xde\xd8\x57\xb6\x33\xe2\xcd\xb2\x20\x50\xc1\x3d\xe4\x27\xe4\xf5\x30\x83\xce\x2a\xa4\xbd\xc1\xae\xd3\xdd\x93\x24\x31\xc5\x48\xd9\xca\x11\x84\xed\x71\xb0\xb8\x06\x90\x17\x1c\x65\x1a\x57\xbe\xd4\x96\xea\xcd\x78\x90\x48\x44\x94\xe8\x39\x11\x10\xb8\x43\x81\x2c\xc2\x6e\xda\x4b\xb7\xd6\xe3\xf0\xb4\xac\xfd\x17\x26\x63\x06\x4a\x3d\x09\x65\xc2\x26\xa4\x3a\x3d\x85\x04\x23\x6f\x6e\x3c\xa8\x8b\xa7\x53\xad\xb8\x17\x3c\x56\xbf\xcb\x68\x02\xb3\xb9\xbe\xa0\x2e\x1a\xfd\x96\x4c\x76\xba\xf5\x35\x97\xcf\x82\x1f\x9c\xf9\xe9\x8a\x18\x0e\x50\x63\xbd\x60\x3e\x1a\x5d\x4e\xe1\x80\x02\x21\xe6\x0c\xa1\x90\xba\x8b\xb6\x91\xea\xba\xe5\x07\xef\x79\xd2\x18\x2f\x74\xaa\x53\xc1\x0f\x5d\xfa\xa1\x4d\xb5\x31\xfe\xaa\xa6\xed\xd1\x5e\xf0\xd1\xb2\x5b\xec\xe4\x9c\xf1\xd0\x6c\x7f\xa1\x2e\x12\xdf\x0c\xda\x80\x0b\x66\x51\xff\x92\xe1\xee\xae\x2d\x87\x7b\xce\xe3\xf3\x5e\xbb\xa8\x5f\x70\xad\x29\xda\xfe\xef\xee\x20\xe3\x6c\xcf\x3b\x07\x65\xcc\x23\x19\x0a\x54\x85\x18\xb8\x55\x6d\x03\x2e\xb9\xad\x2b\xb1\x10\xf3\xa8\xc8\xda\xfd\x6c\x9b\xcc\xd3\x14\x74\x00\xfd\x96\xa0\x0d\xf0\x5d\x3b\xa2\xcc\x39\x93\x78\xe2\x5d\xa3\x0b\x19\x14\x55\x01\xa1\xfc\xfd\x59\x77\x82\xf5\x36\x2f\x50\x16\xa9\xaa\xdb\x24\xe7\x3e\xb2\x43\xef\xbb\x95\xec\x42\x3c\x77\x93\x1d\x88\x47\xaa\x89\x45\x79\x87\x3d\x98\xba\xca\x7e\xc9\x2a\x2a\xaf\xc3\x87\x12\x57\x51\x0d\xe5\xad\xb6\x0f\xa4\xad\xb2\x3b\x52\xae\x6e\xaf\x82\xc5\xc7\xe9\x22\x80\x3f\x60\x8e\x62\x8f\x1b\x81\x78\xf5\x34\x5e\x6d\xa6\x9b\xe9\x72\x01\xf7\xcf\xa0\xf8\xf3\xf3\xf3\xf3\x7c\x3e\x99\xdc\xb8\x5f\x16\xdc\x5e\x2d\x57\x93\x60\xa5\x11\x37\xe5\xb7\x50\xa3\xfa\xe3\xa6\x91\xf3\x81\xd2\xa8\xfe\xec\x68\xe4\x7c\x3d\x34\x6a\x7f\x17\x34\x6a\x7d\xb5\x70\xfb\xe1\xea\xef\x00\x00\x00\xff\xff\x88\x64\x2f\x46\x88\x25\x00\x00")

func _01_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initUpSql,
		"01_init.up.sql",
	)
}

func _01_initUpSql() (*asset, error) {
	bytes, err := _01_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa1, 0x8d, 0x1a, 0x43, 0xc7, 0x8d, 0xf9, 0x51, 0xb5, 0x42, 0x29, 0x5c, 0x0, 0x44, 0x81, 0x71, 0xc, 0xf7, 0xbd, 0x4b, 0x1a, 0x80, 0xb1, 0x99, 0xe0, 0xb3, 0x3c, 0xe2, 0x17, 0xf5, 0x82, 0xda}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_init.down.sql": _01_initDownSql,

	"01_init.up.sql": _01_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"01_init.down.sql": &bintree{_01_initDownSql, map[string]*bintree{}},
	"01_init.up.sql":   &bintree{_01_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
