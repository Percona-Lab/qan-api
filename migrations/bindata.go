// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/sql/01_init.down.sql (20B)
// migrations/sql/01_init.up.sql (9.607kB)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x28\x49\x4c\xca\x49\x55\xc8\x4d\x2d\x29\xca\x4c\x2e\xb6\xe6\x02\x04\x00\x00\xff\xff\x6b\xf9\xb4\xa3\x14\x00\x00\x00")

func _01_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initDownSql,
		"01_init.down.sql",
	)
}

func _01_initDownSql() (*asset, error) {
	bytes, err := _01_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf5, 0xb9, 0x22, 0xf, 0xca, 0x89, 0xa5, 0x5, 0xf2, 0xed, 0x48, 0xd7, 0xe0, 0x9d, 0xec, 0x2, 0xab, 0x87, 0xf3, 0x9d, 0x3d, 0x5a, 0x71, 0x39, 0xe, 0x4a, 0x88, 0xde, 0x1d, 0x0, 0x1d, 0x4e}}
	return a, nil
}

var __01_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x5a\x4d\x73\xdb\x38\xd2\xbe\xfb\x57\xf4\xcd\x76\x95\x9c\x7a\xdf\xc9\xd4\xd6\x24\xa9\x39\xc8\x16\x9d\x68\x4b\x1f\x8e\xa4\xec\x8c\x4f\x0c\x4c\xb6\x44\xac\x49\x40\x01\xc0\xc8\xca\xaf\xdf\x02\xc0\x0f\x90\x00\x65\x25\x73\x4a\xcc\x7e\xf0\x34\x9e\xee\x06\xd0\x84\x78\xb7\x8a\xc6\x9b\x08\x36\xe3\xdb\x59\x04\xd3\x7b\x58\x2c\x37\x10\xfd\x3d\x5d\x6f\xd6\x50\xa0\x12\x34\x91\x17\x57\x17\x00\x00\xdf\x4a\x14\x47\x9a\xc2\x5a\x09\xca\x76\x70\xb7\x9c\xcf\xa3\xc5\x06\x2e\x33\x22\x33\xe0\x5b\x6b\x87\x2d\x65\x3b\x14\x7b\x41\x99\xba\x1c\x99\x71\x69\x2c\x51\x7c\x47\xe1\x0d\x4c\x79\x81\x4c\x51\xce\xde\xc3\xf4\x01\xb8\x80\x8c\x4b\xc5\x48\x81\x9a\x6d\x72\x0b\x76\x58\xc3\x92\x12\x45\x9e\x88\x44\x8f\xe7\x81\x4b\xb5\x13\xb8\xfe\x3c\x7b\x0f\x35\xa8\xf5\x9d\x64\x58\x10\x6f\xcc\xfc\xd8\x81\x7f\x00\x97\xc4\x8e\x69\x28\x4a\x89\xc2\x4c\xab\x4f\x92\xe4\x14\x99\x02\x6d\x07\x0d\x68\x46\x58\x43\xac\xf5\x0c\x0d\xea\x2a\xae\x46\xde\xdc\x00\xac\x15\x61\x29\x11\x29\xe4\xe4\x09\x73\x69\x9e\x0b\xdc\xe7\x34\x21\x3a\x56\xb1\x44\x9f\x73\x51\x05\xcd\xc1\x81\xc4\x3a\x01\x49\x5e\x4a\x15\x88\xff\x5d\xf5\xdc\x99\x80\x0e\x39\x4d\x30\x56\xc7\xbd\x2f\x77\xa3\x1f\xf2\x6d\x0d\xaa\x86\x20\xfb\x4e\x05\x67\x3a\x95\xde\x88\xc8\xb1\x39\x5e\xc8\x0f\x0f\x39\xfe\x4e\x68\x4e\x9e\x68\x4e\xd5\x11\x7e\x70\x56\x43\x05\xee\xb4\x98\x3e\x7c\x65\x1f\x3b\x9c\x8c\xa7\x18\x17\x3c\xc5\xdc\x8f\x0e\x4f\x11\x8c\xa9\x0e\x08\x67\x8a\x50\x86\x22\x0e\xa6\xf5\xae\x36\x43\x37\x35\x77\xa5\x54\xbc\x70\xf3\xf2\xd5\xfe\xff\xcd\x33\x1e\xbf\xc2\x58\x08\x72\xbc\xb2\x64\xd7\x0e\x9b\x3b\xca\x30\xca\x8a\xb2\x1e\xfd\x9d\xe4\x25\x9e\x39\xde\x60\x6b\x02\xb2\xd3\x55\x56\x96\x81\x45\x39\x4d\xf5\xd2\xda\x52\x14\x3a\x63\x06\x08\x2a\x23\x0a\x12\x9e\xe7\x98\x28\x20\x2c\x05\x89\x2c\xad\x17\x79\x45\x59\xfd\x15\x4b\x5e\x8a\x04\x21\x62\x65\xf1\xc7\xd5\xe5\x3c\xda\xac\xa6\x77\xeb\x78\xbd\xfc\xb2\xba\x8b\xe2\xe9\xe2\x3f\xe3\xd9\x74\x72\x09\x7f\xc2\xff\x8d\xe0\x72\xfe\xb8\xfe\x3c\x8b\xd7\xb3\xe5\x5f\xb3\xe5\x47\xfd\xf0\xff\x9b\x87\x0f\xd1\xea\x7e\x7d\xf7\x29\x9a\x8f\xf5\xf3\xdf\xf4\xf3\xe5\xe2\xe3\x72\x72\x1b\x3f\xac\x96\xf7\xd3\x59\xb4\xd2\xcf\xdf\x3a\x72\xd7\xd6\x31\xdf\xd6\x53\x79\x0f\x32\xe7\x87\x9c\xef\x46\xb0\x47\xb1\xad\x16\xe7\x08\x50\x25\x6f\xaa\x49\xef\x51\x50\x9e\xc6\x52\x11\xa1\x60\x42\x14\x6e\x68\x81\x4e\xdd\xea\xbf\x0e\x19\xb2\x5a\xbc\x2e\x1d\xbe\x85\xa7\x32\x79\x46\x05\x66\x18\xa6\x5d\xae\x1c\xd9\x4e\x65\xf0\x65\xca\xd4\xdb\xdf\x5a\xaa\x49\x29\x48\x3d\xdc\x21\xb3\x4c\x15\x83\xb3\x03\x7a\x69\x29\x8e\xf2\x5b\x0e\x29\xdd\xa1\x54\xb1\xc2\x17\xf5\xa1\xda\x36\x0f\x54\x65\xbc\x54\x66\x43\xaa\x17\xd6\x0b\x29\xf6\xb9\x5f\x9e\x4b\x86\xed\x76\x5b\x83\xb6\x82\x17\x7a\xc9\xc3\x96\x97\x2c\x05\xda\x9b\x53\x05\x8b\xb7\x5c\x14\x44\xd5\x69\x8d\xfe\x1e\xcf\x1f\x66\x51\x7c\xbf\x5c\xcd\xc7\x9b\x7e\x5a\x2b\x6b\x9d\xd0\xfb\xe9\xe2\x63\xb4\x7a\x58\x4d\x17\x1b\x93\x4b\x27\x67\x53\x96\xea\x5d\x07\x65\xb7\xc4\x04\x92\xbc\x3b\x4d\x09\x54\xc2\x5e\xf0\x8c\x3e\xd1\x36\xe4\x54\xc6\x4a\x94\x4c\x33\xa4\x26\xe2\x7f\x84\xa8\xe9\x36\xc0\xa5\x38\x87\x9c\xb3\x9d\x29\xe7\x03\x91\xd0\x10\xf5\x84\x9b\x0d\xad\x27\x7b\xf3\xf8\xe0\xd5\xf2\x6a\xbc\x98\x2c\xe7\xb5\x66\x5d\xd3\xd1\x7a\x53\xd7\xee\xfd\x78\xbd\xa9\xfe\x7c\x3b\x82\xcb\xbf\xa6\x9b\x4f\x71\xb4\x5a\x2d\x4d\x11\xff\x1e\x0c\xc8\x41\x07\xa4\x9b\x2a\x3d\xcd\x3d\x4d\x9e\x31\x85\x72\xdf\x9b\x66\x55\xf3\xfe\x71\x55\x3d\xf7\xf2\x4e\x19\xfc\x7b\xbd\x5c\x80\x4d\x6c\xbd\x20\x58\x59\xc4\x1a\x47\x51\xc6\xba\xb2\xe2\x03\x11\x8c\xb2\x9d\x84\xfb\x9c\x93\x4e\x45\x7f\xe2\x07\x28\x08\x3b\x42\x85\x37\xd3\xd3\x63\xa0\x19\xd3\x2f\xa6\xaf\xb5\xe5\x4d\xc2\xd3\x66\xe3\xb2\x4b\xc5\x09\xc2\x8c\x4a\xa5\x27\x5c\xa3\x03\xa3\x4b\xa6\xea\xe1\xd5\xc4\xdc\x8d\x4f\x9b\x35\x01\x92\xe4\xc4\x6c\x3c\xad\x28\x04\x17\x3f\xa5\xd4\x8c\xf0\x65\x5a\x22\x4f\xe4\xbf\x7e\x0f\x88\x9c\x11\xa9\xb4\x67\xc6\xbd\xd1\x8e\x48\x6f\x78\x57\x63\x4b\x72\x4a\xa5\xaf\x6c\x5c\x18\x9a\xda\x4e\x19\xa8\x8c\xca\x2e\xc1\xcd\x4d\xd3\xce\x99\x7d\xde\xb0\x1d\x63\x45\x0b\x8c\x13\xa6\x7c\xd2\x4d\x86\x7a\x6b\x54\x68\x4e\x6f\x7c\xc1\xa4\x34\x7b\x9d\x1e\xa1\x5d\x48\x4c\x38\x4b\x6d\x14\x0b\x6c\x4a\xaf\x43\x2c\xcb\xe2\x97\x89\x83\x84\x05\x65\x3e\xe1\xba\x20\x79\x8e\x52\xd9\xc3\xb1\x59\x23\x71\x4d\xd8\x89\x43\x97\x8e\xbc\xf8\x74\xb7\x74\xb7\xfb\x25\xb6\xfd\xbb\x77\x3e\xdb\xbb\x77\xfa\x48\x49\xf4\x69\x9c\x1b\xb6\xf3\x68\x73\x9e\x3c\x7b\xc9\xf1\x8d\x83\x01\x36\xb4\x8a\x03\x49\xbe\x95\x54\x20\xe8\x21\x32\x18\xdd\x96\xcc\x09\x6e\xc0\xd8\x86\xca\x37\x3a\xca\x6b\xa3\xe0\x07\x19\x4b\xdd\x9f\x04\x04\xb4\xc6\x41\x01\xac\x2c\x9e\x6c\xf3\xa2\xc1\xba\x55\x51\x5a\x8f\xca\x10\x6c\x07\xdd\x2a\x68\xd9\x02\x0a\x1c\xa3\xaf\xa0\x35\x0e\x29\xd0\xfb\x2c\x65\x98\x0e\xaa\x68\x00\x41\x25\x8b\x9e\x8a\x84\x30\x86\x29\xdc\xc0\x3a\x9a\x45\x77\x9b\x9e\x86\x86\x6b\x48\x47\x0b\x18\xd0\xd2\x00\x86\xf4\x90\xed\x16\x13\x75\x42\x4f\x03\x38\x47\x4f\x92\x11\xb6\x33\x7a\xbe\x3c\x4c\xc6\x9b\x68\x04\x93\x68\x16\xe9\x7f\xa7\x8b\x75\xb4\xea\xeb\x6b\xb8\x87\xf4\xb5\x80\x01\x7d\x0d\x60\x48\x9f\x40\x32\xac\xcd\x18\xcf\xad\x38\x0d\xb6\x6d\x95\x22\x4f\x39\xca\x9e\x16\xc3\x35\xa4\xc3\x1a\x07\x34\x18\x63\x60\xfe\x05\x8a\x1d\xc6\x7b\x22\x25\xca\x90\x84\x8e\xfd\x0c\x15\x06\x0f\x16\x6f\x1b\x33\xbd\x78\x24\x17\x0a\x48\xbe\xe3\x82\xaa\xac\x80\x8c\x48\xc8\x48\xaa\x97\x56\xca\x5b\x89\x1d\x5f\x01\x95\x5d\xbb\x2f\xb4\x63\x0f\x68\xa5\x8c\xf1\xf4\x29\xa6\x3c\x16\x31\xdf\x07\xe5\xf6\x21\x41\xc5\xe6\xfc\x94\x46\x58\x2b\x7c\x4f\x76\x68\xd3\xc7\xf7\x68\xfb\x75\x69\x5e\x1b\xd2\x32\xc7\xb4\x15\xd9\xf7\x10\xd0\xe9\x41\x7c\xa9\x7d\xc8\x2b\x6a\x9f\x8e\x2a\x9c\x5e\x1f\x14\x54\xbc\xa6\x05\xcd\x89\xd0\x09\xab\x46\x4c\x97\xd6\xf3\x08\x9e\x4a\x9b\xe3\x92\x51\xa5\xbb\x63\x43\x13\xd6\x6b\x3d\xbc\xa2\xb8\x02\x9d\xd6\x6c\x41\xaf\xa8\x3e\x10\x1a\x3c\x08\x3c\x4c\x58\x73\xa6\x17\x64\xc6\x0f\xb6\xd7\xbf\x6a\x8f\xb1\x6b\xa0\xfa\x58\xe0\xcf\x30\x65\x8c\x4f\x6e\xed\x91\xa7\x4a\x92\xe7\x47\x5b\x02\x3a\x1e\xfa\xa5\xaa\x7a\x43\x52\x5c\x90\x1d\x86\x63\x62\x26\xf0\x4a\x48\x2c\xe6\x74\x44\x0c\x66\x38\x20\x02\x13\x7b\x74\xbe\x12\x94\x2e\xee\xa7\x03\xa3\x85\x57\xef\x96\x44\xbf\x6c\xe9\x57\x04\xbd\xb3\xd9\x56\xc0\x8b\x40\xd7\xdb\x70\x14\x7a\xb8\xc1\x48\x74\x71\xc3\xd1\xf8\x56\x62\x89\xaf\x85\xc2\x01\xfd\x83\x38\xc8\xbd\x69\x38\xa9\xca\x50\x98\xa0\xe8\x57\x2c\xc5\x01\x99\x42\x61\x70\x55\x11\x19\x77\x60\x5e\x09\x24\x4d\xd1\x6e\x9e\xf6\x61\x3d\x4c\x07\xb3\x69\x5d\xbd\x60\x3a\xf3\x1d\x8e\xa4\x0b\x1a\x0c\xa3\x03\x1a\x8e\xa1\xde\xf0\x64\x9c\x52\xa9\x28\x4b\x4e\xc5\xb1\x07\x3c\xb5\xa5\x92\xfd\x5e\xf0\x17\x5a\x10\x85\xf9\xb1\xb7\xc1\x96\x8c\x7e\x2b\xd1\xec\xb3\xd2\x89\x2f\x49\x12\x94\x32\xb0\xc3\xf6\xdc\x0e\x87\xa4\x0f\x1c\x0c\x4b\x0f\x18\x08\x8d\xed\xae\xed\x35\x4e\x28\x22\x1d\xfb\x39\x45\xd5\xea\xa4\xde\xbb\x49\x45\x13\x10\xd6\xb5\xfb\x7a\x3a\xf6\x80\x8c\xea\x24\x18\xe8\xa3\x1d\xeb\x19\x0d\x81\x41\x37\x9d\x34\xc9\xf3\xaa\x93\x76\xe4\x38\x84\x01\x31\xae\xd5\x97\xe2\x58\x03\x42\x54\xb1\x8f\x6d\x23\x15\x12\xe2\x58\x5f\xe9\x3b\x15\x16\x7b\x2e\x88\x38\x56\x6d\x19\x24\x02\xcd\xc5\x11\x67\x50\x60\xc1\xc5\xd1\xac\xcd\x26\x5b\xad\x36\xc7\x47\x40\x9b\x6b\xf5\xb5\x39\xd6\x01\x6d\x29\x95\xcf\xaf\x08\x74\x21\xff\x40\xa5\xa6\x39\xa5\xd1\x75\x33\x20\xb4\x03\x09\xab\x75\x21\xa7\xd2\x19\x4b\xfa\xe3\x95\x9c\x56\x90\x70\x85\x72\x45\x72\x58\xd3\x1f\xf6\x25\xd8\x54\xa8\xd6\xa6\xab\xd3\x0b\x42\x29\x31\xb5\xb7\x1b\xc3\xc9\xad\x9c\x9d\xca\x70\x0d\x39\x91\xe6\x0a\xe2\x09\xbf\xb9\x81\x5b\xce\x73\x24\xac\x7f\x9b\x92\xc4\x59\xf8\x08\xab\x2c\x41\xf5\x9f\xcd\x7e\x72\x47\x92\x0c\x21\xa3\xee\x42\xdc\x96\x79\x1e\xeb\xd7\xc5\x10\x65\x6b\x1c\x5c\xf5\x76\xa7\xda\xa3\xd8\x72\x51\x60\x0a\x04\xf4\x20\x1b\x48\xf3\x1a\xda\x73\xf5\x5f\x4e\x87\x5d\x19\xe3\xcf\xba\xd2\x83\xe0\x8a\xd8\x7f\xeb\xeb\x6d\xca\x52\x7c\x41\x79\x1d\x4a\xdc\xe9\x12\x3a\xed\xbd\x5e\x1e\x84\x01\x2d\xf6\x39\x4d\x74\x03\xac\x8f\x75\x46\xbc\x3a\x0a\xf9\xe6\xcc\x16\xfc\xc9\x39\xd4\xa0\xd3\x73\x91\x7d\x7f\xe6\x86\x4c\x37\x9e\xed\xf2\x75\x82\x4f\x73\xd4\xaf\x64\xc1\xd8\xd7\xb6\x57\xc4\x9b\x65\x41\xa0\x86\x07\xc8\x4f\xc8\xf3\x30\x83\xce\x6a\xa4\xbd\xc0\x6e\xd2\xed\x49\x92\x98\x63\xa2\x6c\xe5\x08\xc2\x76\x38\x58\x5c\x03\xc8\x33\x8e\x32\x8d\xab\x5e\x6a\x2b\xf5\x66\x3c\x48\x24\x22\xc9\xf4\x9c\x08\x08\xdc\xa2\x40\x96\x60\x3f\xed\x95\x5b\xeb\x71\x78\x5a\xd6\xfe\x0b\x93\x31\x03\xa5\x9e\x84\x32\x61\x13\x52\x9d\x9e\x42\x86\x49\x30\x37\x01\xd4\xd9\xd3\xa9\x57\xdc\x33\x1e\xeb\x9f\x65\x34\x81\xd9\x5c\x9f\x51\x17\x8d\x7e\x4b\x26\x5b\xdd\xfa\x9a\xcb\x67\xc1\x0f\xce\xfc\x74\x45\x0c\x07\xa8\xb5\x9e\x31\x1f\x8d\xae\xa6\x70\x40\x81\x90\x72\x86\x50\x4a\xdd\x45\xdb\x48\xf5\xdd\xf2\x43\xf0\x3c\x69\x8d\x67\x3a\xd5\xa9\xe0\x87\x3e\xfd\xd0\xa6\xda\x1a\x7f\x55\xd3\xd3\xd1\x5e\xf0\xd1\xaa\x5b\xec\xe5\x9c\xf1\xd8\x6c\x7f\xb1\x2e\x92\xd0\x0c\xba\x80\x33\x66\xd1\xfc\x90\xe1\xee\xae\x1d\x87\x3b\xce\xd3\xd7\xbd\xf6\x51\xbf\xe0\x5a\x53\x74\xfd\xdf\xdc\x40\xc1\xd9\x8e\xf7\x0e\xca\x94\x27\x32\x16\xa8\x4a\x31\x70\xab\xda\x05\x9c\x73\x5b\x57\x61\x21\xe5\x49\x59\x74\xfb\xd9\x2e\x59\xa0\x29\xe8\x01\xfc\x96\xa0\x0b\x08\x5d\x3b\xa2\xdc\x73\x26\xf1\xc4\xbb\x46\x1f\x32\x28\xaa\x06\x42\xf5\xf3\xb3\xee\x04\x9b\x6d\x5e\xa0\x2c\x73\xd5\xb4\x49\xce\x7d\x64\x8f\x3e\x74\x2b\xd9\x87\x04\xee\x26\x7b\x90\x80\x54\x13\x8b\xea\x0e\x7b\x30\x75\xb5\xfd\x9c\x55\x54\x5d\x87\x0f\x25\xae\xa6\x1a\xca\x5b\x63\x1f\x48\x5b\x6d\x77\xa4\x5c\x5c\x5f\x44\x8b\x8f\xd3\x45\x04\x7f\xc2\x1c\xc5\x0e\x37\x02\xf1\xe2\x61\xbc\xda\x4c\x37\xd3\xe5\x02\x6e\x1f\x41\xf1\xc7\xc7\xc7\xc7\xf9\x7c\x32\xb9\x72\x3f\x2c\xb8\xbe\x58\xae\x26\xd1\x4a\x23\xae\xaa\x4f\xa1\x46\xcd\xb7\x4d\x23\xe7\xfb\xa4\x51\xf3\xd5\xd1\xc8\xf9\x78\x68\xd4\xfd\x2c\x68\xd4\xf9\x68\xe1\xfa\xc3\xc5\xff\x02\x00\x00\xff\xff\x40\x86\x35\xe0\x87\x25\x00\x00")

func _01_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initUpSql,
		"01_init.up.sql",
	)
}

func _01_initUpSql() (*asset, error) {
	bytes, err := _01_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5d, 0x18, 0x19, 0x3e, 0x1d, 0x8d, 0x44, 0x7, 0x6c, 0xf9, 0xef, 0x11, 0xbd, 0x41, 0x60, 0x8, 0xa4, 0x4, 0x26, 0x44, 0xa3, 0xe8, 0xef, 0xb7, 0xed, 0x48, 0x68, 0xa5, 0x65, 0x5c, 0xa3, 0xf4}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_init.down.sql": _01_initDownSql,

	"01_init.up.sql": _01_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"01_init.down.sql": &bintree{_01_initDownSql, map[string]*bintree{}},
	"01_init.up.sql":   &bintree{_01_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
