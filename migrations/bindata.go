// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/sql/01_init.down.sql (20B)
// migrations/sql/01_init.up.sql (6.925kB)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x28\x49\x4c\xca\x49\x55\xc8\x4d\x2d\x29\xca\x4c\x2e\xb6\xe6\x02\x04\x00\x00\xff\xff\x6b\xf9\xb4\xa3\x14\x00\x00\x00")

func _01_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initDownSql,
		"01_init.down.sql",
	)
}

func _01_initDownSql() (*asset, error) {
	bytes, err := _01_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init.down.sql", size: 20, mode: os.FileMode(0644), modTime: time.Unix(1551884224, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf5, 0xb9, 0x22, 0xf, 0xca, 0x89, 0xa5, 0x5, 0xf2, 0xed, 0x48, 0xd7, 0xe0, 0x9d, 0xec, 0x2, 0xab, 0x87, 0xf3, 0x9d, 0x3d, 0x5a, 0x71, 0x39, 0xe, 0x4a, 0x88, 0xde, 0x1d, 0x0, 0x1d, 0x4e}}
	return a, nil
}

var __01_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x99\x4f\x73\xdb\x36\x13\xc6\xef\xfe\x14\x7b\x79\xc7\xf6\x8c\x9c\x77\x9a\xf4\x10\x27\x93\x83\x1c\x29\x89\x3a\x96\xe5\x4a\xea\x24\x3e\x31\x30\xb9\xa2\x50\x93\x00\x03\x80\x91\xd5\x4f\xdf\x01\xff\x02\x04\x40\x39\x3d\xca\xcf\xb3\x8f\x7f\xbb\x84\x40\x42\xfc\xb8\x9e\x4f\xb7\x73\xd8\x4e\x6f\x6e\xe7\xb0\xf8\x04\x77\xab\x2d\xcc\xbf\x2d\x36\xdb\x0d\xe4\xa8\x04\x8d\xe5\xd9\xc5\x19\x00\xc0\x8f\x12\xc5\x91\x26\xb0\x51\x82\xb2\x14\x3e\xae\x96\xcb\xf9\xdd\x16\xce\xf7\x44\xee\x81\xef\x6a\x1d\x76\x94\xa5\x28\x0a\x41\x99\x3a\x9f\x54\x75\x49\x24\x51\xfc\x44\xe1\x14\x26\x3c\x47\xa6\x28\x67\xef\x60\x71\x0f\x5c\xc0\x9e\x4b\xc5\x48\x8e\x3a\x6d\x76\x03\x75\x59\x97\x92\x10\x45\x1e\x89\x44\x27\xe7\x9e\x4b\x95\x0a\xdc\xfc\x79\xfb\x0e\x5a\x53\xff\xbf\xe3\x3d\xe6\xc4\xa9\x59\x1e\x2d\xfb\x7b\x30\x43\xea\x9a\x2e\xa2\x94\x28\x2a\xac\x61\x48\x9c\x51\x64\x0a\xb4\x0e\xda\xd0\x55\xd4\x42\xa4\xfb\x09\x15\xd9\x1d\x37\x95\xdf\x33\xf2\x88\x99\x7c\xf5\x84\xc7\xef\x30\x15\x82\x1c\x2f\xea\xf2\xcb\xbe\xfe\x63\x29\x15\xcf\xa1\x76\x56\xff\x56\x0e\xaa\x7f\x92\xac\xc4\x17\xd6\x57\xde\x36\x80\xa4\x9a\xba\x2c\x3d\x17\x79\x91\xe8\x4b\xb5\xa3\x28\xf4\xc5\xa9\x8c\xa0\xf6\x44\x41\xcc\xb3\x0c\x63\x05\x84\x25\x20\x91\x25\xed\xa2\x69\x22\x9b\x4f\x91\xe4\xa5\x88\xdd\x09\xce\x9f\x5f\xbd\x03\x99\xf1\x43\xc6\xd3\x09\x14\x28\x76\xcd\xf0\x27\xb0\xe4\x2c\xe5\x30\xbb\x99\xc0\x3d\x8a\x98\x33\x02\x9b\x6a\x3d\x4c\x00\x55\xdc\xa4\x17\x28\x28\x4f\x22\xa9\x88\x50\x30\x23\x0a\xb7\x34\xc7\x3e\xbd\xfa\x74\xd8\x23\x6b\x29\x29\x67\x1a\xff\xb1\x8c\x9f\x50\x41\x55\x86\x89\x9d\x95\x21\x4b\xd5\x1e\xfe\x5a\x30\xf5\xe6\x75\x1f\x35\x2b\x05\x69\xcb\x8d\xb0\x3a\xa9\x49\x30\x96\xbe\xd3\x68\x7e\x94\x3f\x32\x48\x68\x8a\x52\x45\x0a\x9f\xd5\xfb\xe6\xfb\x72\xa0\x6a\xcf\x4b\x55\xad\xc4\x26\x07\x9f\x49\x5e\x64\xee\xb0\x56\x0c\xfb\xef\x59\x6b\xda\x09\x9e\x83\x44\x05\x3b\x5e\xb2\x04\xe8\x80\xa9\xb1\x45\x3b\x2e\x72\xa2\x60\xce\xca\xfc\xed\xc5\xf9\xfc\xdb\x74\x79\x7f\x3b\x3f\x87\x0f\xf0\xdb\x04\xce\x67\x8b\xcf\xf3\xcd\x56\x7f\x7a\x6d\x2c\x94\x05\x4b\x68\x4c\x14\x4a\xfb\x42\x0b\x24\x99\xcd\x20\x81\x4a\x28\x04\xdf\xd3\x47\xda\xcf\x93\xca\x48\x89\x92\xe9\x84\xa4\x1a\xe7\x5b\x5f\x34\xdd\x79\xb2\x14\xe7\x90\x71\x96\x56\x8b\xea\x40\x24\x74\x41\x83\xae\xd4\xb1\xc0\xb6\xa7\xf5\xf4\x6e\xb6\x5a\xb6\x2d\x6d\x6e\x57\x5f\xdb\x9e\x26\x70\xfe\x69\xba\xd9\x36\x1f\xdf\x4c\xe0\xfc\xeb\x62\xfb\x25\x9a\xaf\xd7\xab\xb5\xfe\xcb\xef\xde\xa6\x0f\xba\x69\x7b\xd6\x1a\xa5\xa0\xf1\x13\x26\x50\x16\x03\x94\x66\xa1\x3b\x17\xed\x8f\xcd\xea\x0e\x04\x39\xb4\xdf\x04\xd8\x71\x01\x29\xfd\x89\xcc\x0e\x6f\xe2\x58\x99\x47\xfa\xef\x14\x65\xa4\x97\x46\x74\x20\x82\x51\x96\x4a\xf8\x94\x71\x62\x2d\xc9\x2f\xfc\x00\x39\x61\x47\x68\xfc\x15\x9e\xae\x81\xae\x66\xb8\x1a\xbe\xb7\xca\xab\x98\x27\xdd\x16\x51\xaf\x75\x63\x08\xb7\x54\x2a\xbd\xd2\x5a\xb7\xa7\xba\x64\xaa\x2d\x6f\xc0\x8c\xfa\x69\xae\x75\x9d\x80\x24\x1e\xc1\x71\x9a\x45\x21\xb8\xf8\xa5\x56\xab\x0a\xb7\xcf\x3a\xe8\x65\x5d\xde\x12\xa9\xf4\x7f\x66\xdc\xa9\xfe\x95\x2e\xfb\x98\xb1\x3e\xdd\xde\x9a\x98\x56\xa7\x0c\xd4\x9e\x4a\x3b\xe0\xea\xaa\xbb\x17\x57\x9b\x6a\x95\x76\x8c\x14\xcd\x31\x8a\x99\x1a\x19\x98\xb6\x48\xe8\xed\xd5\xe4\xaa\xad\xa2\xdd\xa0\xcd\x2c\x59\xe6\x6e\xd6\xa6\xcc\xab\x3d\x3f\xcb\x9a\xbb\x85\x19\x37\x6c\xd5\x8a\xcb\x29\xf3\xc4\xe5\x24\xcb\x50\xaa\x3a\xac\xdb\xd0\x5e\x12\x47\x9e\xdd\xb8\x1b\x9a\xa6\xff\x29\xad\xb8\xbe\x76\xd3\xae\xaf\xf5\x7d\x20\xd6\xf7\xba\xac\x4a\x7b\x59\x6c\xc6\xe3\x27\xe7\x6a\xb8\xa2\x31\x5e\x57\x34\x86\xe5\x11\xfb\xd6\x5d\xd1\xe8\xa4\x15\x05\x3f\xc8\x48\xea\xbb\xb9\x07\xa8\x17\x3d\x40\xbd\xe8\x01\x32\x44\x17\xa8\x17\x43\x40\x7a\xab\xa3\x0c\x93\x20\x54\x67\x08\x81\x75\x86\x10\x5c\x6f\x08\x00\x76\x86\x10\x24\xd9\xed\x30\x56\x23\x90\x9d\x21\x04\xd9\x19\x42\x90\xbd\x21\x00\xd9\x19\x42\x90\x02\x49\x18\xb0\x12\x43\x70\x95\x18\x02\xab\xc5\x00\x54\x25\x7a\x80\x72\x14\x29\x46\x05\x91\x12\xa5\x8f\xc9\xd2\x3d\x58\x96\xee\x21\xb3\x75\x17\xce\xd2\x3d\x7c\x94\x31\x9e\x3c\x46\x94\x47\x22\xe2\x85\x17\x71\x68\xf1\x50\x0e\x2d\x1e\x50\xc7\xe2\xb2\x0e\x2d\x27\x70\x1f\x8f\xca\x3f\x53\xd7\x74\x02\xb9\x36\x9d\x80\x6e\x4c\xe3\xd8\xb5\xe9\x04\xf8\x81\x50\xef\xd6\xe3\x78\x4e\x60\x57\x9e\x13\xd4\xb5\x67\x1c\xba\xf2\x84\x99\x05\xc6\xf5\x7e\x7a\x82\xdb\xf6\x85\xd9\x6d\x5f\x98\x7f\xe0\x0b\xf6\x60\xfb\xc2\x7d\xfc\x28\xb1\xc4\x53\x4d\x18\xa6\x70\x07\x86\x29\x8c\x6f\x9a\x82\xec\x86\x29\x0c\x5e\x90\x14\x65\x94\x50\xa9\x28\x8b\xc7\xe0\x07\xc6\x70\x03\x03\x63\xb8\x89\xa1\x31\xd8\xc8\xc0\xe8\x69\xa6\x7e\x46\xa8\x4f\x90\xbe\x1e\x2c\xdd\x83\x6e\xe9\x1e\x62\x5b\x77\x41\x2d\xdd\xc3\xd7\xec\x14\x81\xc7\x02\x43\xf5\xb0\x19\xaa\x87\xcc\x54\x5d\x2e\x43\xf5\x50\xa9\xbc\x88\x14\x79\xcc\xfc\x3b\x9d\xa1\x7a\xa8\x0c\xd5\x43\x65\xaa\x2e\x95\xa1\x06\xa8\x12\x2a\x9f\x4e\xa0\x99\x96\x00\x9f\x69\x09\x40\x5a\x16\x3f\xa9\x69\x19\x1b\x62\x24\xe9\x3f\x27\x26\xd9\x58\xc6\xc6\xd9\x58\xc6\x66\xda\x5a\x46\x06\xdb\x58\x7c\xdf\x94\x38\xda\xdb\x9b\x94\xf1\x44\xcf\x79\x86\x84\x0d\x7f\x48\x6a\x6b\xbc\x67\x94\xff\x29\x51\x22\x7c\x00\x59\xe6\xff\x8f\x59\xff\x60\xbe\x2b\xb3\x2c\x92\x31\x61\xbe\x81\xf4\xa2\x67\x14\x95\xf8\x37\xa7\xe1\xca\x4a\x1c\x1d\xe2\xf8\x45\x18\xab\xe4\xac\xbe\xe0\xa3\x09\xad\xc9\x47\x4f\x33\x94\x5c\x78\xbf\xe7\x9d\x36\x56\x37\x02\xe0\x78\x3c\x39\x12\x33\x8c\x55\x3d\x27\x41\x58\x8a\xc1\x51\x06\x9c\xe1\xcc\xda\x14\x4e\xaa\xf5\x93\xf5\x7b\x8c\xbd\xdd\x79\x5c\xbe\x2c\xdd\x7f\x98\xa4\x57\x83\xb5\xfa\x89\x3a\x58\x5a\x9d\xa4\x02\x95\xa1\xd5\xdc\x8b\x9e\x4a\xc6\x23\xca\x12\x7c\x8e\x4a\xe9\x3f\xd9\xd8\x06\x7f\x42\xca\x79\x72\x3a\x66\xe8\x72\xb2\xae\xae\x20\xaf\x7e\xdb\xb5\x7f\xd2\x48\x78\xac\xcf\x18\xaa\x14\x81\x13\xa2\x6d\xf0\x20\xda\x06\xcf\xde\x35\x30\xb8\x3b\x97\x6d\xf0\x1d\xbe\x50\x16\x9c\x49\x1c\xb9\xc9\x0f\x2d\xbe\x83\xd8\xc0\xe2\x3b\x8e\x0d\x2d\x9e\x43\xd9\xc0\xe2\xc1\xad\xfa\xd1\x6b\x62\x6c\xa4\xad\x1e\x9a\x68\xab\x87\x06\xda\xe9\x81\x79\xb6\xba\xc1\x77\x76\x79\x36\xbf\xfb\xbc\xb8\x9b\xc3\x07\x58\xea\xe3\xdb\x56\x20\x9e\xdd\x4f\xd7\xdb\xc5\x76\xb1\xba\x83\x9b\x07\x50\xfc\xe1\xe1\xe1\x61\xb9\x9c\xcd\x2e\xcc\x5f\xf9\x2f\xcf\x56\xeb\xd9\x7c\xad\x1d\x17\xcd\x0b\xa9\x49\xf7\x86\x69\x62\xbc\x25\x9a\x74\xef\x7e\x26\xc6\x2b\x9c\x89\xfd\x72\x66\x62\xbd\x41\xb8\x7c\x7f\xf6\x6f\x00\x00\x00\xff\xff\xe0\x27\x4a\x1a\x0d\x1b\x00\x00")

func _01_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initUpSql,
		"01_init.up.sql",
	)
}

func _01_initUpSql() (*asset, error) {
	bytes, err := _01_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init.up.sql", size: 6925, mode: os.FileMode(0644), modTime: time.Unix(1551884217, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcf, 0x6a, 0x38, 0xbe, 0xfb, 0xdd, 0xb3, 0x4e, 0xae, 0x42, 0xac, 0x33, 0xa9, 0x9e, 0xda, 0x93, 0x87, 0x6b, 0x82, 0x26, 0x6d, 0x63, 0x0, 0xbc, 0xee, 0x25, 0x4, 0x9e, 0xdb, 0x4a, 0xb5, 0x17}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_init.down.sql": _01_initDownSql,

	"01_init.up.sql": _01_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"01_init.down.sql": &bintree{_01_initDownSql, map[string]*bintree{}},
	"01_init.up.sql":   &bintree{_01_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
