// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/sql/01_init.down.sql (20B)
// migrations/sql/01_init.up.sql (9.586kB)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x28\x49\x4c\xca\x49\x55\xc8\x4d\x2d\x29\xca\x4c\x2e\xb6\xe6\x02\x04\x00\x00\xff\xff\x6b\xf9\xb4\xa3\x14\x00\x00\x00")

func _01_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initDownSql,
		"01_init.down.sql",
	)
}

func _01_initDownSql() (*asset, error) {
	bytes, err := _01_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf5, 0xb9, 0x22, 0xf, 0xca, 0x89, 0xa5, 0x5, 0xf2, 0xed, 0x48, 0xd7, 0xe0, 0x9d, 0xec, 0x2, 0xab, 0x87, 0xf3, 0x9d, 0x3d, 0x5a, 0x71, 0x39, 0xe, 0x4a, 0x88, 0xde, 0x1d, 0x0, 0x1d, 0x4e}}
	return a, nil
}

var __01_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x5a\x4b\x73\xdb\xb8\xd2\xdd\xfb\x57\xf4\xce\x76\x95\x9c\xfa\xbe\x99\xbb\x98\x24\x35\x0b\x59\x62\x12\xdd\xd2\xc3\x91\x94\x3b\xe3\x15\x03\x91\x2d\x11\xd7\x24\xc0\x00\x60\x64\xe5\xd7\xdf\x02\xc0\x07\x48\x82\x92\x92\x59\x25\x66\x9f\x3e\x8d\xd3\x8d\x47\x13\xe2\x64\x1d\x8c\xb7\x01\x6c\xc7\x8f\xf3\x00\x66\x1f\x60\xb9\xda\x42\xf0\xf7\x6c\xb3\xdd\x40\x86\x4a\xd0\x48\xde\xdc\xdd\x00\x00\x7c\x2b\x50\x9c\x68\x0c\x1b\x25\x28\x3b\xc0\x64\xb5\x58\x04\xcb\x2d\xdc\x26\x44\x26\xc0\xf7\xd6\x0e\x7b\xca\x0e\x28\x72\x41\x99\xba\x1d\x19\xbf\x38\x94\x28\xbe\xa3\xe8\x39\xc6\x3c\x43\xa6\x28\x67\xef\x60\xf6\x04\x5c\x40\xc2\xa5\x62\x24\x43\xcd\x36\x7d\x04\xeb\x56\xb3\xc4\x44\x91\x1d\x91\xd8\xe3\x79\xe2\x52\x1d\x04\x6e\x3e\xcf\xdf\x41\x05\x6a\x62\x47\x09\x66\xa4\xe7\xb3\x38\xb5\xe0\xef\xc1\x25\xb1\x3e\x35\x45\x21\x51\x98\x61\x75\x49\xa2\x94\x22\x53\xa0\xed\xa0\x01\xb5\x87\x35\x84\x5a\xcf\x90\x53\x5b\x71\xe9\xf9\xf0\x00\xb0\x51\x84\xc5\x44\xc4\x90\x92\x1d\xa6\xd2\x3c\x17\x98\xa7\x34\x22\x3a\x57\xa1\xc4\x3e\xe7\xb2\x4c\x9a\x83\x03\x89\x55\x01\xa2\xb4\x90\xca\x93\xff\x49\xf9\xdc\x19\x80\x4e\x39\x8d\x30\x54\xa7\xbc\x2f\x77\xab\x1f\xf2\x7d\x05\x2a\x5d\x90\x7d\xa7\x82\x33\x5d\xca\x9e\x47\xe0\xd8\x9c\x28\xe4\x47\x0f\x39\xfe\x4e\x68\x4a\x76\x34\xa5\xea\x04\x3f\x38\xab\xa0\x02\x0f\x5a\x4c\x17\xbe\xb6\x8f\x1d\x4e\xc6\x63\x0c\x33\x1e\x63\xda\xcf\x0e\x8f\x11\x8c\xa9\x4a\x08\x67\x8a\x50\x86\x22\xf4\x96\x75\x52\x99\xa1\x5d\x9a\x49\x21\x15\xcf\xdc\xba\x7c\xb5\xff\x7f\xf3\x82\xa7\xaf\x30\x16\x82\x9c\xee\x2c\xd9\xbd\xc3\xe6\x7a\x19\x46\x59\x52\x56\xde\xdf\x49\x5a\xe0\x95\xfe\x06\x5b\x11\x90\x83\x9e\x65\x45\xe1\x59\x94\xb3\x58\x2f\xad\x3d\x45\xa1\x2b\x66\x80\xa0\x12\xa2\x20\xe2\x69\x8a\x91\x02\xc2\x62\x90\xc8\xe2\x6a\x91\x97\x94\xe5\x5f\xa1\xe4\x85\x88\x10\x02\x56\x64\x7f\xdc\xdd\x2e\x82\xed\x7a\x36\xd9\x84\x9b\xd5\x97\xf5\x24\x08\x67\xcb\xff\x8c\xe7\xb3\xe9\x2d\xfc\x09\xff\x37\x82\xdb\xc5\xf3\xe6\xf3\x3c\xdc\xcc\x57\x7f\xcd\x57\x1f\xf5\xc3\xff\xaf\x1f\x3e\x05\xeb\x0f\x9b\xc9\xa7\x60\x31\xd6\xcf\x7f\x73\x64\x6d\x6c\x00\xbe\xaf\x42\xbe\x03\x99\xf2\x63\xca\x0f\x23\xc8\x51\xec\xcb\x45\x38\x02\x54\xd1\x9b\x72\x70\x39\x0a\xca\xe3\x50\x2a\x22\x14\x4c\x89\xc2\x2d\xcd\xd0\x99\x9f\xfa\xaf\x63\x82\xac\x12\xa9\xa7\x08\xdf\xc3\xae\x88\x5e\x50\x81\x71\xc3\xb8\xcd\x95\x22\x3b\xa8\x04\xbe\xcc\x98\xfa\xfd\xb7\x86\x6a\x5a\x08\x52\xb9\x3b\x64\x96\xa9\x64\x70\x76\xba\x5e\xfa\xb3\x93\xfc\x96\x42\x4c\x0f\x28\x55\xa8\xf0\x55\xbd\x2f\xb7\xc7\x23\x55\x09\x2f\x94\xd9\x78\xaa\x05\xf4\x4a\xb2\x3c\xed\x4f\xc3\x15\xc3\x66\x5b\xad\x40\x7b\xc1\x33\xbd\xb4\x61\xcf\x0b\x16\x03\xed\x8c\xa9\x84\x85\x7b\x2e\x32\xa2\xaa\xf2\x05\x7f\x8f\x17\x4f\xf3\x20\xfc\xb0\x5a\x2f\xc6\xdb\x6e\xf9\x4a\x6b\x55\xb8\x0f\xb3\xe5\xc7\x60\xfd\xb4\x9e\x2d\xb7\xdd\x9a\xcd\x58\xac\x77\x17\x94\xed\xa9\x24\x90\xa4\xed\x61\x4a\xa0\x12\x72\xc1\x13\xba\xa3\x4d\xca\xa9\x0c\x95\x28\x98\x66\x88\x4d\xc6\xff\xf0\x51\xd3\xbd\x87\x4b\x71\x0e\x29\x67\x07\x33\x6d\x8f\x44\x42\x4d\xd4\x11\x6e\x36\xae\x8e\xec\xed\xf3\x53\x6f\xce\xae\xc7\xcb\xe9\x6a\x51\x69\xd6\x73\x37\xd8\x58\xbd\x3a\x05\xe3\xcd\xb6\xfc\xf3\xf7\x11\xdc\xfe\x35\xdb\x7e\x0a\x83\xf5\x7a\xb5\xd6\x4f\xfe\xe5\x4d\xc8\x51\x27\xa4\x5d\x2a\x3d\xcc\x9c\x46\x2f\x18\x43\x91\x77\x86\x59\xce\xf9\xfe\xb1\x54\x3e\xef\xd5\x9d\x32\xf8\xf7\x66\xb5\x04\x5b\xd8\x6a\x41\xb0\x22\x0b\x35\x8e\xa2\x0c\xf5\xcc\x0a\x8f\x44\x30\xca\x0e\x12\x3e\xa4\x9c\xb4\x66\xf4\x27\x7e\x84\x8c\xb0\x13\x94\x78\x33\x3c\xed\x03\xb5\x4f\x77\x32\x7d\xad\x2c\x6f\x22\x1e\xd7\x1b\x94\x5d\x2a\x4e\x12\xe6\x54\x2a\x3d\xe0\x0a\xed\xf1\x2e\x98\xaa\xdc\xcb\x81\x39\xfe\xe3\x4c\xdb\x35\x03\x92\xe8\xcc\x70\x7a\x62\x51\x08\x2e\x7e\x4a\xaa\xf1\xe8\xeb\xb4\x44\xd7\xa9\x9c\x13\xa9\x74\x64\xc6\x7b\xde\x3f\xa3\xb2\xa1\x39\xa7\xb3\xaf\xad\xa4\xa9\xec\x94\x81\x4a\xa8\x6c\x13\x3c\x3c\xd4\x9d\x9b\xd9\xd2\x0d\xdb\x29\x54\x34\xc3\x30\x62\xaa\x4f\xba\x4d\x50\xef\x8e\x0a\xcd\x41\x8d\xaf\x18\x15\x66\xbb\xd3\x1e\x3a\x84\xc4\x88\xb3\xd8\xe6\x31\xc3\x7a\xf6\xb5\x88\x65\x91\xfd\x32\xb1\x97\x30\xa3\xac\x4f\xb8\xc9\x48\x9a\xa2\x54\xf6\x1c\xac\x97\x49\x58\x11\xb6\xf2\xd0\xa6\x23\xaf\x7d\xba\x47\x7a\x38\xfc\x12\x5b\xfe\xf6\x6d\x9f\xed\xed\x5b\x7d\xaa\x44\xfa\xe0\x4d\x0d\xdb\x75\xb4\x29\x8f\x5e\x7a\xc5\xe9\x1b\x07\x13\x6c\x68\x15\x07\x12\x7d\x2b\xa8\x40\xd0\x2e\xd2\x9b\xdd\x86\xcc\x49\xae\xc7\xd8\xa4\xaa\x6f\x74\x94\x57\x46\xc1\x8f\x32\x94\xba\x15\xf1\x08\x68\x8c\x83\x02\x58\x91\xed\x6c\x9f\xa2\xc1\xba\x2b\x51\x5a\x8f\x4a\x10\x6c\xb3\xdc\x28\x68\xd8\x3c\x0a\x1c\x63\x5f\x41\x63\x1c\x52\xa0\xb7\x5a\xca\x30\x1e\x54\x51\x03\xbc\x4a\x96\x1d\x15\x11\x61\x0c\x63\x78\x80\x4d\x30\x0f\x26\xdb\x8e\x86\x9a\x6b\x48\x47\x03\x18\xd0\x52\x03\x86\xf4\x90\xfd\x1e\x23\x75\x46\x4f\x0d\xb8\x46\x4f\x94\x10\x76\x30\x7a\xbe\x3c\x4d\xc7\xdb\x60\x04\xd3\x60\x1e\xe8\x7f\x67\xcb\x4d\xb0\xee\xea\xab\xb9\x87\xf4\x35\x80\x01\x7d\x35\x60\x48\x9f\x40\x32\xac\xcd\x18\xaf\x9d\x71\x1a\x6c\x3b\x2b\x45\x76\x29\xca\x8e\x16\xc3\x35\xa4\xc3\x1a\x07\x34\x18\xa3\x67\xfc\x19\x8a\x03\x86\x39\x91\x12\xa5\x4f\x42\xcb\x7e\x85\x0a\x83\x07\x8b\xb7\xbd\x99\x5e\x3c\x92\x0b\x05\x24\x3d\x70\x41\x55\x92\x41\x42\x24\x24\x24\xd6\x4b\x2b\xe6\x8d\xc4\x56\x2c\x8f\xca\xb6\xbd\x2f\xb4\x65\xf7\x68\xa5\x8c\xf1\x78\x17\x52\x1e\x8a\x90\xe7\x5e\xb9\x5d\x88\x57\xf1\x44\x1f\x7c\xd2\x08\x6b\x84\xe7\xe4\x80\xb6\x7c\x3c\x47\xdb\xb2\x4b\xf3\xe6\x10\x17\x29\xc6\x8d\xc8\x6e\x04\x8f\xce\x1e\xa4\x2f\xb5\x0b\xb9\xa0\x76\x77\x52\xfe\xf2\xf6\x41\x5e\xc5\x1b\x9a\xd1\x94\x08\x5d\xb0\xd2\x63\xb6\xb2\x91\x47\xb0\x2b\x6c\x8d\x0b\x46\x95\x6e\x90\x0d\x8d\x5f\xaf\x8d\x70\x41\x71\x09\x3a\xaf\xd9\x82\x2e\xa8\x3e\x12\xea\x3d\x08\x7a\x18\xbf\xe6\x44\x2f\xc8\x84\x1f\x6d\xbb\x7f\xd7\x1c\x63\xf7\x40\xf5\xb1\xc0\x5f\x60\xc6\x18\x9f\x3e\xda\x23\x4f\x15\x24\x4d\x4f\x76\x0a\xe8\x7c\xe8\xf7\xaa\xf2\x25\x49\x71\x41\x0e\xe8\xcf\x89\x19\xc0\x85\x94\x58\xcc\xf9\x8c\x18\xcc\x70\x42\x04\x46\xf6\xe8\xbc\x90\x94\x36\xee\xa7\x13\xa3\x85\x97\xaf\x97\x44\xbf\x6f\xe9\xb7\x04\xbd\xb3\xd9\x56\xa0\x97\x81\x76\xb4\xe1\x2c\x74\x70\x83\x99\x68\xe3\x86\xb3\xf1\xad\xc0\x02\x2f\xa5\xc2\x01\xfd\x83\x3c\xc8\xdc\x34\x9c\x54\x25\x28\x4c\x52\xf4\x5b\x96\xe2\x80\x4c\xa1\x30\xb8\x72\x12\x99\x70\x60\x5e\x0a\x24\x8d\xd1\x6e\x9e\xf6\x61\xe5\xa6\x93\x59\xb7\xae\xbd\x64\x3a\xe3\x1d\xce\xa4\x0b\x1a\x4c\xa3\x03\x1a\xce\xa1\xde\xf0\x64\x18\x53\xa9\x28\x8b\xce\xe5\xb1\x03\x3c\xb7\xa5\x92\x3c\x17\xfc\x95\x66\x44\x61\x7a\xea\x6c\xb0\x05\xa3\xdf\x0a\x34\xfb\xac\x74\xf2\x4b\xa2\x08\xa5\xf4\xec\xb0\x9d\xb0\xc3\x29\xe9\x02\x07\xd3\xd2\x01\x7a\x52\x63\xbb\x6b\x7b\x93\xe3\xcb\x48\xcb\x7e\xcd\xa4\x6a\x74\xd2\xde\xbb\x49\x49\xe3\x11\xd6\xb6\xf7\xf5\xb4\xec\x1e\x19\xe5\x49\x30\xd0\x47\x3b\xd6\x2b\x1a\x02\x83\xae\x3b\x69\x92\xa6\x65\x27\xed\xc8\x71\x08\x3d\x62\x5c\x6b\x5f\x8a\x63\xf5\x08\x51\x59\x1e\xda\x46\xca\x27\xc4\xb1\x5e\xe8\x3b\x15\x66\x39\x17\x44\x9c\xca\xb6\x0c\x22\x81\xe6\xee\x88\x33\xc8\x30\xe3\xe2\x64\xd6\x66\x5d\xad\x46\x9b\x13\xc3\xa3\xcd\xb5\xf6\xb5\x39\xd6\x01\x6d\x31\x95\x2f\x17\x04\xba\x90\x7f\xa0\x52\xd3\x9c\xd3\xe8\x86\x19\x10\xda\x82\xf8\xd5\xba\x90\x73\xe5\x0c\x25\xfd\x71\xa1\xa6\x25\xc4\x3f\x43\xb9\x22\x29\x6c\xe8\x0f\xfb\x12\x6c\x66\xa8\xd6\xa6\x67\x67\x2f\x09\x85\xc4\xd8\xde\x6e\x0c\x17\xb7\x0c\x76\xae\xc2\x15\xe4\x4c\x99\x4b\x48\x4f\xf8\xc3\x03\x3c\x72\x9e\x22\x61\xdd\xdb\x94\x28\x4c\xfc\x47\x58\x69\xf1\xaa\xff\x6c\xf6\x93\x09\x89\x12\x84\x84\xba\x0b\x71\x5f\xa4\x69\xa8\x5f\x17\x7d\x94\x8d\x71\x70\xd5\xdb\x9d\x2a\x47\xb1\xe7\x22\xc3\x18\x08\x68\x27\x9b\x48\xf3\x1a\xda\x09\xf5\x5f\x4e\x87\x43\x19\xe3\xcf\x86\xd2\x4e\x70\x47\xec\xbf\xd5\x0d\x37\x65\x31\xbe\xa2\xbc\xf7\x15\xee\xfc\x14\x3a\x1f\xbd\x5a\x1e\x84\x01\xcd\xf2\x94\x46\xba\x01\xd6\xc7\x3a\x23\xbd\x79\xe4\x8b\xcd\x99\x9d\xf0\x67\xc7\x50\x81\xce\x8f\x45\x76\xe3\x99\x1b\x32\xdd\x78\x36\xcb\xd7\x49\x3e\x4d\x51\xbf\x92\x79\x73\x5f\xd9\x2e\x88\x37\xcb\x82\x40\x05\xf7\x90\x9f\x91\xd7\xc3\x0c\x06\xab\x90\xf6\x0e\xbb\x2e\x77\x4f\x92\xc4\x14\x23\x65\x67\x8e\x20\xec\x80\x83\x93\x6b\x00\x79\xc5\x51\xa6\x71\xe5\x4b\x6d\xa9\xde\xf8\x83\x44\x22\xa2\x44\x8f\x89\x80\xc0\x3d\x0a\x64\x11\x76\xcb\x5e\x86\xb5\x11\x87\x87\x65\xed\xbf\x30\x18\xe3\x28\xf5\x20\x94\x49\x9b\x90\xea\xfc\x10\x12\x8c\xbc\xb5\xf1\xa0\xae\x1e\x4e\xb5\xe2\x5e\xf0\x54\xfd\x32\xa3\x09\xcc\xe6\xfa\x82\x7a\xd2\xe8\xb7\x64\xb2\xd7\xad\xaf\xb9\x7c\x16\xfc\xe8\x8c\x4f\xcf\x88\xe1\x04\x35\xd6\x2b\xc6\xa3\xd1\xe5\x10\x8e\x28\x10\x62\xce\x10\x0a\xa9\xbb\x68\x9b\xa9\x6e\x58\x7e\xf4\x9e\x27\x8d\xf1\xca\xa0\xba\x14\xfc\xd8\xa5\x1f\xda\x54\x1b\xe3\xaf\x6a\xda\x9d\xec\x05\x1f\x2d\xbb\xc5\x4e\xcd\x19\x0f\xcd\xf6\x17\xea\x49\xe2\x1b\x41\x1b\x70\xc5\x28\xea\x9f\x32\xdc\xdd\xb5\x15\xf0\xc0\x79\x7c\x39\x6a\x17\xf5\x0b\xa1\x35\x45\x3b\xfe\xc3\x03\x64\x9c\x1d\x78\xe7\xa0\x8c\x79\x24\x43\x81\xaa\x10\x03\xb7\xaa\x6d\xc0\x35\xb7\x75\x25\x16\x62\x1e\x15\x59\xbb\x9f\x6d\x93\x79\x9a\x82\x0e\xa0\xdf\x12\xb4\x01\xbe\x6b\x47\x94\x39\x67\x12\xcf\xbc\x6b\x74\x21\x83\xa2\x2a\x20\x94\xbf\x40\xeb\x4e\xb0\xde\xe6\x05\xca\x22\x55\x75\x9b\xe4\xdc\x47\x76\xe8\x7d\xb7\x92\x5d\x88\xe7\x6e\xb2\x03\xf1\x48\x35\xb9\x28\xef\xb0\x07\x4b\x57\xd9\xaf\x59\x45\xe5\x75\xf8\x50\xe1\x2a\xaa\xa1\xba\xd5\xf6\x81\xb2\x55\x76\x47\xca\xcd\xfd\x4d\xb0\xfc\x38\x5b\x06\xf0\x27\x2c\x50\x1c\x70\x2b\x10\x6f\x9e\xc6\xeb\xed\x6c\x3b\x5b\x2d\xe1\xf1\x19\x14\x7f\x7e\x7e\x7e\x5e\x2c\xa6\xd3\x3b\xf7\xdb\x82\xfb\x9b\xd5\x7a\x1a\xac\x35\xe2\xae\xfc\xea\x69\x54\x7f\xc6\x34\x72\x3e\x45\x1a\xd5\x1f\x18\x8d\x9c\xef\x84\x46\xed\x2f\x80\x46\xad\xef\x16\xee\xdf\xdf\xfc\x2f\x00\x00\xff\xff\x88\x99\x6d\x60\x72\x25\x00\x00")

func _01_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initUpSql,
		"01_init.up.sql",
	)
}

func _01_initUpSql() (*asset, error) {
	bytes, err := _01_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x65, 0xa8, 0xc6, 0x98, 0x8d, 0x5e, 0xf2, 0xb2, 0xae, 0x24, 0x72, 0xf5, 0x28, 0x50, 0x2f, 0x7f, 0xde, 0xb1, 0xc, 0x20, 0xfb, 0x67, 0x3c, 0xba, 0x3e, 0xb3, 0xe5, 0xdb, 0xd4, 0xa8, 0x27, 0xdd}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_init.down.sql": _01_initDownSql,

	"01_init.up.sql": _01_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"01_init.down.sql": &bintree{_01_initDownSql, map[string]*bintree{}},
	"01_init.up.sql":   &bintree{_01_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
