// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/sql/01_init.down.sql (20B)
// migrations/sql/01_init.up.sql (9.861kB)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x28\x49\x4c\xca\x49\x55\xc8\x4d\x2d\x29\xca\x4c\x2e\xb6\xe6\x02\x04\x00\x00\xff\xff\x6b\xf9\xb4\xa3\x14\x00\x00\x00")

func _01_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initDownSql,
		"01_init.down.sql",
	)
}

func _01_initDownSql() (*asset, error) {
	bytes, err := _01_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf5, 0xb9, 0x22, 0xf, 0xca, 0x89, 0xa5, 0x5, 0xf2, 0xed, 0x48, 0xd7, 0xe0, 0x9d, 0xec, 0x2, 0xab, 0x87, 0xf3, 0x9d, 0x3d, 0x5a, 0x71, 0x39, 0xe, 0x4a, 0x88, 0xde, 0x1d, 0x0, 0x1d, 0x4e}}
	return a, nil
}

var __01_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x5a\x5d\x73\xdb\xb6\x12\x7d\xae\x7f\xc5\xbe\xd9\x9e\x91\x32\x4d\x73\x3f\x92\x66\xfa\x20\xdb\x4c\xab\x3b\xb6\xec\x4a\xea\x6d\xfd\xc4\xc0\xe4\x4a\xc4\x35\x09\xd0\x00\x18\x59\xf9\xf5\x77\xf0\x41\x12\x24\x41\x49\x49\xfb\x92\x9a\x7b\x70\x76\xcf\x2e\x00\x2e\x20\x5e\x2f\xa3\xd9\x3a\x82\xf5\xec\xea\x36\x82\xf9\x27\x58\xdc\xaf\x21\xfa\x6b\xbe\x5a\xaf\xa0\x40\x25\x68\x22\xcf\x2e\xce\x00\x00\xa6\x53\xb8\x23\x94\x41\x4a\x0b\x64\x8a\x72\x26\xcd\xe3\x97\x0a\xc5\x9e\xa6\xb0\x52\x82\xb2\x2d\x5c\xdf\xdf\xdd\x45\x8b\x35\x9c\x67\x44\x66\xc0\x37\xd6\x0e\x1b\xca\xb6\x28\x4a\x41\x99\x3a\x9f\x98\x71\x12\xc5\x17\x14\x83\x61\xf3\x07\xe0\x02\x32\x2e\x15\x23\x05\x6a\x82\x9b\x2b\x87\x75\x03\x53\xa2\xc8\x13\x91\x38\x18\xfa\xc0\xa5\xda\x0a\x5c\xfd\x7e\xfb\x73\x03\xaa\x9d\x25\x19\x16\x64\x30\xe2\x6e\xdf\x01\x7f\x04\x9f\xc2\x8e\x71\x04\x95\x44\x61\x02\xea\x53\x24\x39\x45\xa6\x8c\x1d\x34\xc0\xe1\xed\xe3\x58\xeb\x18\x1b\xd2\x55\xea\xc6\x4d\xa7\x00\x2b\x45\x58\x4a\x44\x0a\x39\x79\xc2\xdc\x66\x59\x60\x99\xd3\x84\xe8\xb4\xc7\x12\x87\x9c\x0b\x97\x2c\x0f\x07\x12\x55\x13\x4d\x25\x55\x20\xd9\xd7\xee\xb9\x17\x80\x4e\x35\x4d\x30\x56\xfb\x72\x28\x76\xad\x1f\xf2\x4d\x0d\x72\x43\x90\x7d\xa1\x82\x33\x3d\x2b\x06\x23\x22\xcf\xe6\x79\x21\x5f\x07\xc8\xd9\x17\x42\x73\xf2\x44\x73\xaa\xf6\xf0\x95\xb3\x1a\x2a\x70\xab\xc5\xf4\xe1\x4b\xfb\xd8\xe3\x64\x3c\xc5\xb8\xe0\x29\xe6\xc3\xec\xf0\x14\xc1\x98\xea\x84\x70\xa6\x08\x65\x28\xe2\x60\x51\xaf\x6b\x33\x74\x4b\x73\x5d\x49\xc5\x0b\xbf\x2e\x9f\xed\xff\xbf\x79\xc6\xfd\x67\x98\x09\x41\xf6\x17\x96\xec\xd2\x63\xf3\x47\x19\x46\xe9\x28\xeb\xd1\x5f\x48\x5e\xe1\x89\xe3\x0d\xb6\x26\x20\x5b\x3d\xcb\x02\xab\x6f\x9e\xea\x35\xba\xa1\x28\x74\xbd\x0c\x0c\x54\x46\x14\x24\x3c\xcf\x31\x51\x40\x58\x0a\x12\x59\x5a\x2f\xf2\x0e\xa1\x29\x7e\xc4\xaa\xe2\xbd\x5d\xfa\xfa\xbf\xf3\xd6\x14\x53\xf6\x85\xe4\x34\x3d\x87\x5f\xe0\xc7\x49\x8b\x28\x8b\x62\x6a\x50\xda\xf0\x76\x72\xf6\xc3\x0f\xe7\xa6\x28\xf8\x5a\x72\xa1\x50\xe8\xc7\x3f\x99\xc7\xc5\x5e\xbe\xe4\x69\xc7\xf0\xce\x1a\x38\xdb\xf2\xf4\xa9\x63\xf9\x87\xb1\x94\x76\x69\xca\x8e\xe9\x9f\xc6\xf4\x42\xd8\xd4\x30\x4e\x4b\x14\x1b\xbb\x6e\xdb\x40\xfe\xd5\xc3\xc8\x9c\xef\x72\xbe\x6d\x01\xff\x6e\x01\xd6\xfb\xb4\x14\x7c\x43\x73\x14\x2d\xe6\xbd\xc1\x88\xb4\xeb\xfe\x83\x8d\x4c\xf0\x57\xcd\xdc\x31\xbd\xfd\xd1\xd8\xf0\x55\xe9\x8d\xa3\x67\x7b\x6b\x72\xe6\x95\x78\x66\x0a\x64\x96\x57\xa7\x4a\x7c\x53\xd7\xe7\x67\x70\x71\x4f\x40\x8b\x74\xbb\xd3\x04\x50\x25\x6f\x5c\xed\x4a\x14\x94\xa7\xb1\x54\x44\x28\xb8\x21\x0a\xd7\xb4\x40\x6f\xf1\xea\xbf\x76\x19\xb2\x9a\x5d\xaf\x1f\xbe\x81\xa7\x2a\x79\x46\x05\x66\x18\xa6\x5d\xae\x1c\xd9\x56\x65\xf0\xc7\x9c\xa9\x77\x3f\xb5\x54\x37\x95\x20\xf5\x70\x8f\xcc\x32\x39\x06\x6f\xc7\x1f\xcc\x4e\x53\x08\x48\xe9\x16\xa5\x8a\x15\xbe\xaa\x8f\xee\x35\xb1\xa3\x2a\xe3\x95\x32\x3b\x72\xbd\xbb\xbc\x92\xa2\xcc\x87\x6b\xf4\x9e\x61\xfb\x7a\xa9\x41\x1b\xc1\x0b\xbd\xef\xc1\x86\x57\x2c\x05\xda\x8b\xc9\xc1\xe2\x0d\x17\x05\x51\x6e\x86\x9f\x47\x7f\xcd\xee\x1e\x6e\xa3\xf8\xd3\xfd\xf2\x6e\xb6\x8e\xe7\x8b\xff\xce\x6e\xe7\x37\x76\x72\x43\x6d\xb5\x53\x1a\xce\x3f\xcd\x17\xbf\x46\xcb\x87\xe5\x7c\xb1\x36\xd3\xd9\x2b\xe2\x9c\xa5\x7a\xeb\x45\xd9\xad\xa1\x40\x92\x77\xc3\x94\x40\x25\x94\x82\x67\xf4\x89\xb6\x29\xa7\x32\x56\xa2\x62\x9a\x21\x35\x19\x7f\x1f\xa2\xa6\x9b\x00\x97\xe2\x1c\x72\xce\xb6\x66\x55\xef\x88\x84\x86\xa8\x27\xdc\x5b\xd8\x8d\xec\xf5\xe3\x43\xd4\x17\xbd\x9c\x2d\x6e\xee\xef\x6a\xcd\xab\xdb\xfb\x3f\xa3\x95\xd5\xab\x53\x30\x5b\xad\xdd\x9f\xef\x26\x70\xfe\xe7\x7c\xfd\x5b\x1c\x2d\x97\xf7\x4b\xb3\x58\x83\x09\xd9\xe9\x84\x74\x4b\xa5\xc3\x2c\x69\xf2\x8c\x29\x54\x65\x2f\x4c\x37\xe7\x87\xef\x6b\xf7\x7c\x50\x77\xca\xe0\x3f\xab\xfb\x05\xd8\xc2\xd6\x0b\x82\x55\x45\xac\x71\x14\x65\xac\x67\x56\xbc\x23\x82\x51\xb6\x95\xf0\x29\xe7\xa4\x33\xa3\x7f\xe3\x3b\x28\x08\xdb\x83\xc3\x9b\xf0\xf4\x18\x68\xc6\xf4\x27\xd3\xe7\xda\xf2\x26\xe1\x69\xb3\x7b\xdb\xa5\xe2\x25\xe1\x96\x4a\xb3\x8e\x6b\x74\x60\x74\xc5\x54\x3d\xdc\x05\xe6\xef\xfe\xda\xac\x09\x90\x24\x07\xa2\x19\x68\x45\x21\xb8\xf8\x26\xa5\x66\xc4\x50\xa6\x25\x3a\x4d\xe4\x2d\x91\x4a\x7b\x66\x7c\x30\xfa\x1b\x44\xb6\x2c\x87\x64\x0e\xa5\xcd\x0a\x43\x53\xdb\x29\x03\x95\x51\xd9\x25\x98\x4e\x9b\xb6\x56\xff\x69\xd9\xf6\xb1\xa2\x05\xc6\x09\x53\x43\xd2\x75\x86\x7a\x6f\x54\x68\x7a\x18\x7c\xc5\xa4\x32\x9b\x9d\x1e\xa1\x5d\x48\x4c\x38\x4b\x6d\x1a\x0b\x6c\xe6\x5e\x87\x58\x56\xc5\x77\x13\x07\x09\x0b\xca\x86\x84\xab\x82\xe4\x39\x4a\x65\x5b\x84\x66\x91\xc4\x35\x61\x27\x0f\x5d\x3a\xf2\x3a\xa4\xbb\xa2\xdb\xed\x77\xb1\x95\x1f\x3e\x0c\xd9\x3e\x7c\xd0\xef\x94\x44\x77\x25\xb9\x61\x3b\x8d\x36\xe7\xc9\xf3\xa0\x38\x43\xe3\x68\x82\x0d\xad\xe2\x40\x92\x97\x8a\x0a\x04\x3d\x44\x06\xb3\xdb\x92\x79\xc9\x0d\x18\xdb\x54\x0d\x8d\x9e\xf2\xda\x28\xf8\x4e\xc6\x52\x77\x4e\x01\x01\xad\x71\x54\x00\xab\x8a\x27\xdb\xc4\x69\xb0\x6e\xd9\x94\xd6\xa3\x32\x74\x67\x8c\x56\x41\xcb\x16\x50\xe0\x19\x87\x0a\x5a\xe3\x98\x02\xbd\xd1\x52\x86\xe9\xa8\x8a\x06\x10\x54\xb2\xe8\xa9\x48\x08\x63\x98\xc2\x14\x56\xd1\x6d\x74\xbd\xee\x69\x68\xb8\xc6\x74\xb4\x80\x11\x2d\x0d\x60\x4c\x0f\xd9\x6c\x30\x51\x07\xf4\x34\x80\x53\xf4\x24\x19\x61\x5b\xa3\xe7\x8f\x87\x9b\xd9\x3a\x9a\xc0\x4d\x74\x1b\xe9\x7f\xe7\x8b\x55\xb4\xec\xeb\x6b\xb8\xc7\xf4\xb5\x80\x11\x7d\x0d\x60\x4c\x9f\x40\x32\xae\xcd\x18\x4f\x9d\x71\x1a\x6c\xfb\x2a\x45\x9e\x72\x94\x3d\x2d\x86\x6b\x4c\x87\x35\x8e\x68\x30\xc6\x40\xfc\x05\x8a\x2d\xc6\x25\x91\x12\x65\x48\x42\xc7\x7e\x82\x0a\x83\x07\x8b\xb7\x9d\x99\x5e\x3c\x92\x0b\x05\x24\xdf\x72\x41\x55\x56\x40\x46\x24\x64\x24\xd5\x4b\x2b\xe5\xad\xc4\x8e\xaf\x80\xca\xae\x7d\x28\xb4\x63\x0f\x68\xa5\x8c\xe9\xd3\x0e\xe5\xb1\x88\x79\x19\x94\xdb\x87\x04\x15\x9b\xf7\xa7\x34\xc2\x5a\xe1\x25\xd9\xa2\x2d\x1f\x2f\xd1\x36\xec\xd2\x9c\x1b\xd2\x2a\xc7\xb4\x15\xd9\xf7\x10\xd0\x39\x80\x0c\xa5\xf6\x21\x47\xd4\x3e\xed\x55\xb8\xbc\x43\x50\x50\xf1\x8a\x16\x34\x27\x42\x17\xcc\x8d\x98\xdf\x5b\xcf\x13\x78\xaa\x6c\x8d\x2b\x46\x95\x6e\x8f\x0d\x4d\x58\xaf\xf5\x70\x44\xb1\x03\x1d\xd6\x6c\x41\x47\x54\xef\x08\x0d\xbe\x08\x06\x98\xb0\xe6\x4c\x2f\xc8\x8c\xef\x6c\xb3\x7f\xd1\xbe\xc6\x2e\x81\xea\xd7\x02\x7f\x86\x39\x63\xfc\xe6\xca\xbe\xf2\x54\x45\xf2\x7c\x6f\xa7\x80\xce\x87\x3e\x55\xb9\x23\x92\xe2\x82\x6c\x31\x9c\x13\x13\xc0\x91\x94\x58\xcc\xe1\x8c\x18\xcc\x78\x42\x04\x26\xf6\xd5\x79\x24\x29\x5d\xdc\x37\x27\x46\x0b\x77\x87\x4b\xa2\x4f\x5b\xfa\x8c\xa0\x77\x36\xdb\x0a\x0c\x32\xd0\xf5\x36\x9e\x85\x1e\x6e\x34\x13\x5d\xdc\x78\x36\x5e\x2a\xac\xf0\x58\x2a\x3c\xd0\xdf\xc8\x83\x2c\x4d\xc3\x49\x55\x86\xc2\x24\x45\x9f\xb1\x14\x07\x64\x0a\x85\xc1\xb9\x49\x64\xdc\x81\x39\x13\x48\x9a\xba\xab\x09\xfb\xb0\x1e\xa6\x93\xd9\xb4\xae\x83\x64\x7a\xf1\x8e\x67\xd2\x07\x8d\xa6\xd1\x03\x8d\xe7\x50\x6f\x78\x32\x4e\xa9\x54\x94\x25\x87\xf2\xd8\x03\x1e\xda\x52\x49\x59\x0a\xfe\x4a\x0b\xa2\x30\xdf\xf7\x36\xd8\x8a\xd1\x97\x0a\xcd\x3e\x2b\xbd\xfc\x92\x24\x41\x29\x03\x3b\x6c\xcf\xed\x78\x4a\xfa\xc0\xd1\xb4\xf4\x80\x81\xd4\xd8\xee\xda\xde\xe3\x84\x32\xd2\xb1\x9f\x32\xa9\x5a\x9d\x74\x70\x36\x71\x34\x01\x61\x5d\xfb\x50\x4f\xc7\x1e\x90\xe1\xde\x04\x23\x7d\xb4\x67\x3d\xa1\x21\x30\xe8\xa6\x93\x26\x79\xee\x3a\x69\x4f\x8e\x47\x18\x10\xe3\x5b\x87\x52\x3c\x6b\x40\x88\x2a\xca\xd8\x36\x52\x21\x21\x9e\xf5\x48\xdf\xa9\xb0\x28\xb9\x20\x62\xef\xda\x32\x48\x04\x9a\x9b\x23\xce\xa0\xc0\x82\x8b\xbd\x59\x9b\x4d\xb5\x5a\x6d\x9e\x8f\x80\x36\xdf\x3a\xd4\xe6\x59\x47\xb4\xa5\x54\x3e\x1f\x11\xe8\x43\xfe\x86\x4a\x4d\x73\x48\xa3\xef\x66\x44\x68\x07\x12\x56\xeb\x43\x0e\x95\x33\x96\xf4\xeb\x91\x9a\x3a\x48\x78\x86\x72\x45\x72\x58\xd1\xaf\xf6\x10\x6c\x66\xa8\xd6\xa6\x67\xe7\x20\x09\x95\xc4\xd4\xde\x6e\x8c\x17\xd7\x39\x3b\x54\xe1\x1a\x72\xa0\xcc\x0e\x32\x10\x3e\x9d\xc2\x15\xe7\x39\x12\xd6\xbf\x4d\x49\xe2\x2c\xfc\x0a\x73\x96\xa0\xfa\xdf\xcd\x7e\x72\x4d\x92\x0c\x21\xa3\xfe\x42\xdc\x54\x79\x1e\xeb\xe3\x62\x88\xb2\x35\x8e\xae\x7a\xbb\x53\x95\x28\x36\x5c\x14\x98\x02\x01\x3d\xc8\x26\xd2\x1c\x43\x7b\xae\xfe\xc7\xe9\xb8\x2b\x63\xfc\x56\x57\x7a\x10\x5c\x10\xfb\x6f\x7d\xbf\x4d\x59\x8a\xaf\x28\x2f\x43\x85\x3b\x3c\x85\x0e\x7b\xaf\x97\x07\x61\x40\x8b\x32\xa7\x89\x6e\x80\x99\xfd\x09\xa2\x3f\x8f\x42\xbe\x39\xb3\x13\xfe\x60\x0c\x35\xe8\x70\x2c\xb2\xef\xcf\xdc\x90\xe9\xc6\xb3\x5d\xbe\x5e\xf2\x69\x8e\xfa\x48\x16\xcc\x7d\x6d\x3b\x22\xde\x2c\x0b\x02\x35\x3c\x40\x7e\x40\xde\x00\x33\xea\xac\x46\xda\x1b\xec\xa6\xdc\x03\x49\x12\x73\x4c\x94\x9d\x39\x82\xb0\x2d\x8e\x4e\xae\x11\xe4\x09\xaf\x32\x8d\x73\x87\x5a\xa7\xde\x8c\x07\x89\x44\x24\x99\x8e\x89\x80\xc0\x0d\x0a\x64\x09\xf6\xcb\xee\xdc\x5a\x8f\xe3\x61\x59\xfb\x77\x04\x63\x06\x4a\x1d\x84\x32\x69\x13\x52\x1d\x0e\x21\xc3\x24\x58\x9b\x00\xea\xe4\x70\xea\x15\xf7\x8c\xfb\xfa\x77\x19\x4d\x60\x36\xd7\x67\xd4\x93\x46\x9f\x92\xc9\x46\xb7\xbe\xe6\xf2\x59\xf0\x9d\x17\x9f\x9e\x11\xe3\x09\x6a\xad\x27\xc4\xa3\xd1\x2e\x84\x1d\x0a\x84\x94\x33\x84\x4a\xea\x2e\xda\x66\xaa\xef\x96\xef\x82\xef\x93\xd6\x78\xa2\x53\x5d\x0a\xbe\xeb\xd3\x8f\x6d\xaa\xad\xf1\x7b\x35\x3d\xed\xed\x05\x1f\x75\xdd\x62\xaf\xe6\x8c\xc7\x66\xfb\x8b\xf5\x24\x09\x45\xd0\x05\x9c\x10\x45\xf3\x4b\x86\xbf\xbb\x76\x1c\x6e\x39\x4f\x8f\x7b\xed\xa3\xbe\xc3\xb5\xa6\xe8\xfa\x9f\x4e\xc1\xfc\xac\xdc\x7b\x51\xa6\x3c\x91\xb1\x40\x55\x89\x91\x5b\xd5\x2e\xe0\x94\xdb\x3a\x87\x85\x94\x27\x55\xd1\xed\x67\xbb\x64\x81\xa6\xa0\x07\x18\xb6\x04\x5d\x40\xe8\xda\x11\x65\xc9\x99\xc4\x03\x67\x8d\x3e\x64\x54\x54\x0d\x04\xf7\xfb\xb3\xee\x04\x9b\x6d\x5e\xa0\xac\x72\xd5\xb4\x49\xde\x7d\x64\x8f\x3e\x74\x2b\xd9\x87\x04\xee\x26\x7b\x90\x80\x54\x93\x0b\x77\x87\x3d\x5a\xba\xda\x7e\xca\x2a\x72\xd7\xe1\x63\x85\xab\xa9\xc6\xea\xd6\xd8\x47\xca\x56\xdb\x3d\x29\x67\x97\x67\xd1\xe2\xd7\xf9\x22\x82\x5f\xe0\x0e\xc5\x16\xd7\x02\xf1\xec\x61\xb6\x5c\xcf\xd7\xf3\xfb\x05\x5c\x3d\x82\xe2\x8f\x8f\x8f\x8f\x77\x77\x37\x37\x17\xfe\x97\x05\x97\x67\xf7\xcb\x9b\x68\xa9\x11\x17\xee\xdb\xaf\x89\xfb\x40\x6b\xd2\x7c\x49\x35\x69\xbe\x4f\xa8\x3f\x9c\x9a\xf8\x9f\x44\x4d\x3a\xdf\x2a\x5c\x7e\x3c\xfb\x7f\x00\x00\x00\xff\xff\x0f\x9b\x0a\xd8\x85\x26\x00\x00")

func _01_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initUpSql,
		"01_init.up.sql",
	)
}

func _01_initUpSql() (*asset, error) {
	bytes, err := _01_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf1, 0x78, 0x5f, 0x43, 0x54, 0x6e, 0x59, 0xdd, 0x5f, 0xee, 0x23, 0x65, 0xf8, 0x70, 0xf9, 0xba, 0xf4, 0x98, 0x4, 0xd5, 0xe5, 0xb6, 0x1c, 0x22, 0x7, 0xb1, 0x4a, 0x9a, 0x3f, 0x8d, 0xb1, 0x42}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_init.down.sql": _01_initDownSql,

	"01_init.up.sql": _01_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"01_init.down.sql": &bintree{_01_initDownSql, map[string]*bintree{}},
	"01_init.up.sql":   &bintree{_01_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
