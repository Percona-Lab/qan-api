// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/metrics/metrics.proto

package metrics

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ExampleFormat is formant of query example: real or query without values
type MetricsReply_ExampleFormat int32

const (
	MetricsReply_EXAMPLE MetricsReply_ExampleFormat = 0
	MetricsReply_DIGEST  MetricsReply_ExampleFormat = 1
)

var MetricsReply_ExampleFormat_name = map[int32]string{
	0: "EXAMPLE",
	1: "DIGEST",
}
var MetricsReply_ExampleFormat_value = map[string]int32{
	"EXAMPLE": 0,
	"DIGEST":  1,
}

func (x MetricsReply_ExampleFormat) String() string {
	return proto.EnumName(MetricsReply_ExampleFormat_name, int32(x))
}
func (MetricsReply_ExampleFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_metrics_dd73b6b6a30d2cea, []int{2, 0}
}

// ExampleType is a type of query example selected for this query class in given period of time.
type MetricsReply_ExampleType int32

const (
	MetricsReply_RANDOM     MetricsReply_ExampleType = 0
	MetricsReply_SLOWEST    MetricsReply_ExampleType = 1
	MetricsReply_FASTEST    MetricsReply_ExampleType = 2
	MetricsReply_WITH_ERROR MetricsReply_ExampleType = 3
)

var MetricsReply_ExampleType_name = map[int32]string{
	0: "RANDOM",
	1: "SLOWEST",
	2: "FASTEST",
	3: "WITH_ERROR",
}
var MetricsReply_ExampleType_value = map[string]int32{
	"RANDOM":     0,
	"SLOWEST":    1,
	"FASTEST":    2,
	"WITH_ERROR": 3,
}

func (x MetricsReply_ExampleType) String() string {
	return proto.EnumName(MetricsReply_ExampleType_name, int32(x))
}
func (MetricsReply_ExampleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_metrics_dd73b6b6a30d2cea, []int{2, 1}
}

type MetricsRequest struct {
	From                 string           `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To                   string           `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Digest               string           `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	Labels               []*MapFieldEntry `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
	Include              []string         `protobuf:"bytes,5,rep,name=include,proto3" json:"include,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MetricsRequest) Reset()         { *m = MetricsRequest{} }
func (m *MetricsRequest) String() string { return proto.CompactTextString(m) }
func (*MetricsRequest) ProtoMessage()    {}
func (*MetricsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_metrics_dd73b6b6a30d2cea, []int{0}
}
func (m *MetricsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricsRequest.Unmarshal(m, b)
}
func (m *MetricsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricsRequest.Marshal(b, m, deterministic)
}
func (dst *MetricsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsRequest.Merge(dst, src)
}
func (m *MetricsRequest) XXX_Size() int {
	return xxx_messageInfo_MetricsRequest.Size(m)
}
func (m *MetricsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsRequest proto.InternalMessageInfo

func (m *MetricsRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MetricsRequest) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *MetricsRequest) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

func (m *MetricsRequest) GetLabels() []*MapFieldEntry {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *MetricsRequest) GetInclude() []string {
	if m != nil {
		return m.Include
	}
	return nil
}

// MapFieldEntry
type MapFieldEntry struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                []string `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MapFieldEntry) Reset()         { *m = MapFieldEntry{} }
func (m *MapFieldEntry) String() string { return proto.CompactTextString(m) }
func (*MapFieldEntry) ProtoMessage()    {}
func (*MapFieldEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_metrics_dd73b6b6a30d2cea, []int{1}
}
func (m *MapFieldEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MapFieldEntry.Unmarshal(m, b)
}
func (m *MapFieldEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapFieldEntry.Marshal(b, m, deterministic)
}
func (dst *MapFieldEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapFieldEntry.Merge(dst, src)
}
func (m *MapFieldEntry) XXX_Size() int {
	return xxx_messageInfo_MapFieldEntry.Size(m)
}
func (m *MapFieldEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_MapFieldEntry.DiscardUnknown(m)
}

var xxx_messageInfo_MapFieldEntry proto.InternalMessageInfo

func (m *MapFieldEntry) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *MapFieldEntry) GetValue() []string {
	if m != nil {
		return m.Value
	}
	return nil
}

type MetricsReply struct {
	Digest     string `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
	DigestText string `protobuf:"bytes,3,opt,name=digest_text,json=digestText,proto3" json:"digest_text,omitempty"`
	// Dimension Group.
	DbServers      []string                   `protobuf:"bytes,4,rep,name=db_servers,json=dbServers,proto3" json:"db_servers,omitempty"`
	DbSchemas      []string                   `protobuf:"bytes,5,rep,name=db_schemas,json=dbSchemas,proto3" json:"db_schemas,omitempty"`
	DbUsernames    []string                   `protobuf:"bytes,6,rep,name=db_usernames,json=dbUsernames,proto3" json:"db_usernames,omitempty"`
	ClientHosts    []string                   `protobuf:"bytes,7,rep,name=client_hosts,json=clientHosts,proto3" json:"client_hosts,omitempty"`
	FirstSeen      string                     `protobuf:"bytes,201,opt,name=first_seen,json=firstSeen,proto3" json:"first_seen,omitempty"`
	LastSeen       string                     `protobuf:"bytes,202,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	Labels         map[string]string          `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AgentUuid      string                     `protobuf:"bytes,9,opt,name=agent_uuid,json=agentUuid,proto3" json:"agent_uuid,omitempty"`
	PeriodStart    int64                      `protobuf:"varint,10,opt,name=period_start,json=periodStart,proto3" json:"period_start,omitempty"`
	PeriodLength   uint32                     `protobuf:"varint,11,opt,name=period_length,json=periodLength,proto3" json:"period_length,omitempty"`
	Example        string                     `protobuf:"bytes,12,opt,name=example,proto3" json:"example,omitempty"`
	ExampleFormat  MetricsReply_ExampleFormat `protobuf:"varint,13,opt,name=example_format,json=exampleFormat,proto3,enum=metrics.MetricsReply_ExampleFormat" json:"example_format,omitempty"`
	IsTruncated    uint32                     `protobuf:"varint,14,opt,name=is_truncated,json=isTruncated,proto3" json:"is_truncated,omitempty"`
	ExampleType    MetricsReply_ExampleType   `protobuf:"varint,15,opt,name=example_type,json=exampleType,proto3,enum=metrics.MetricsReply_ExampleType" json:"example_type,omitempty"`
	ExampleMetrics string                     `protobuf:"bytes,16,opt,name=example_metrics,json=exampleMetrics,proto3" json:"example_metrics,omitempty"`
	// Metrics.
	NumQueryWithWarnings uint64 `protobuf:"varint,17,opt,name=num_query_with_warnings,json=numQueryWithWarnings,proto3" json:"num_query_with_warnings,omitempty"`
	// {code: count }
	Warnings           map[string]uint64 `protobuf:"bytes,18,rep,name=warnings,proto3" json:"warnings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	NumQueryWithErrors uint64            `protobuf:"varint,19,opt,name=num_query_with_errors,json=numQueryWithErrors,proto3" json:"num_query_with_errors,omitempty"`
	// {code: count }
	Errors                  map[string]uint64 `protobuf:"bytes,20,rep,name=errors,proto3" json:"errors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	NumQueries              uint64            `protobuf:"varint,21,opt,name=num_queries,json=numQueries,proto3" json:"num_queries,omitempty"`
	MQueryTimeCnt           uint32            `protobuf:"varint,22,opt,name=m_query_time_cnt,json=mQueryTimeCnt,proto3" json:"m_query_time_cnt,omitempty"`
	MQueryTimeSum           float32           `protobuf:"fixed32,23,opt,name=m_query_time_sum,json=mQueryTimeSum,proto3" json:"m_query_time_sum,omitempty"`
	MQueryTimeMin           float32           `protobuf:"fixed32,24,opt,name=m_query_time_min,json=mQueryTimeMin,proto3" json:"m_query_time_min,omitempty"`
	MQueryTimeMax           float32           `protobuf:"fixed32,25,opt,name=m_query_time_max,json=mQueryTimeMax,proto3" json:"m_query_time_max,omitempty"`
	MQueryTimeP99           float32           `protobuf:"fixed32,26,opt,name=m_query_time_p99,json=mQueryTimeP99,proto3" json:"m_query_time_p99,omitempty"`
	MQueryTimeHg            []uint32          `protobuf:"varint,27,rep,packed,name=m_query_time_hg,json=mQueryTimeHg,proto3" json:"m_query_time_hg,omitempty"`
	MLockTimeCnt            uint32            `protobuf:"varint,28,opt,name=m_lock_time_cnt,json=mLockTimeCnt,proto3" json:"m_lock_time_cnt,omitempty"`
	MLockTimeSum            float32           `protobuf:"fixed32,29,opt,name=m_lock_time_sum,json=mLockTimeSum,proto3" json:"m_lock_time_sum,omitempty"`
	MLockTimeMin            float32           `protobuf:"fixed32,30,opt,name=m_lock_time_min,json=mLockTimeMin,proto3" json:"m_lock_time_min,omitempty"`
	MLockTimeMax            float32           `protobuf:"fixed32,31,opt,name=m_lock_time_max,json=mLockTimeMax,proto3" json:"m_lock_time_max,omitempty"`
	MLockTimeP99            float32           `protobuf:"fixed32,32,opt,name=m_lock_time_p99,json=mLockTimeP99,proto3" json:"m_lock_time_p99,omitempty"`
	MLockTimeHg             []float32         `protobuf:"fixed32,33,rep,packed,name=m_lock_time_hg,json=mLockTimeHg,proto3" json:"m_lock_time_hg,omitempty"`
	MRowsSentCnt            uint64            `protobuf:"varint,34,opt,name=m_rows_sent_cnt,json=mRowsSentCnt,proto3" json:"m_rows_sent_cnt,omitempty"`
	MRowsSentSum            uint64            `protobuf:"varint,35,opt,name=m_rows_sent_sum,json=mRowsSentSum,proto3" json:"m_rows_sent_sum,omitempty"`
	MRowsSentMin            uint64            `protobuf:"varint,36,opt,name=m_rows_sent_min,json=mRowsSentMin,proto3" json:"m_rows_sent_min,omitempty"`
	MRowsSentMax            uint64            `protobuf:"varint,37,opt,name=m_rows_sent_max,json=mRowsSentMax,proto3" json:"m_rows_sent_max,omitempty"`
	MRowsSentP99            uint64            `protobuf:"varint,38,opt,name=m_rows_sent_p99,json=mRowsSentP99,proto3" json:"m_rows_sent_p99,omitempty"`
	MRowsSentHg             []uint64          `protobuf:"varint,39,rep,packed,name=m_rows_sent_hg,json=mRowsSentHg,proto3" json:"m_rows_sent_hg,omitempty"`
	MRowsExaminedCnt        uint64            `protobuf:"varint,40,opt,name=m_rows_examined_cnt,json=mRowsExaminedCnt,proto3" json:"m_rows_examined_cnt,omitempty"`
	MRowsExaminedSum        uint64            `protobuf:"varint,41,opt,name=m_rows_examined_sum,json=mRowsExaminedSum,proto3" json:"m_rows_examined_sum,omitempty"`
	MRowsExaminedMin        uint64            `protobuf:"varint,42,opt,name=m_rows_examined_min,json=mRowsExaminedMin,proto3" json:"m_rows_examined_min,omitempty"`
	MRowsExaminedMax        uint64            `protobuf:"varint,43,opt,name=m_rows_examined_max,json=mRowsExaminedMax,proto3" json:"m_rows_examined_max,omitempty"`
	MRowsExaminedP99        uint64            `protobuf:"varint,44,opt,name=m_rows_examined_p99,json=mRowsExaminedP99,proto3" json:"m_rows_examined_p99,omitempty"`
	MRowsExaminedHg         []uint64          `protobuf:"varint,45,rep,packed,name=m_rows_examined_hg,json=mRowsExaminedHg,proto3" json:"m_rows_examined_hg,omitempty"`
	MRowsAffectedCnt        uint64            `protobuf:"varint,46,opt,name=m_rows_affected_cnt,json=mRowsAffectedCnt,proto3" json:"m_rows_affected_cnt,omitempty"`
	MRowsAffectedSum        uint64            `protobuf:"varint,47,opt,name=m_rows_affected_sum,json=mRowsAffectedSum,proto3" json:"m_rows_affected_sum,omitempty"`
	MRowsAffectedMin        uint64            `protobuf:"varint,48,opt,name=m_rows_affected_min,json=mRowsAffectedMin,proto3" json:"m_rows_affected_min,omitempty"`
	MRowsAffectedMax        uint64            `protobuf:"varint,49,opt,name=m_rows_affected_max,json=mRowsAffectedMax,proto3" json:"m_rows_affected_max,omitempty"`
	MRowsAffectedP99        uint64            `protobuf:"varint,50,opt,name=m_rows_affected_p99,json=mRowsAffectedP99,proto3" json:"m_rows_affected_p99,omitempty"`
	MRowsAffectedHg         []uint64          `protobuf:"varint,51,rep,packed,name=m_rows_affected_hg,json=mRowsAffectedHg,proto3" json:"m_rows_affected_hg,omitempty"`
	MRowsReadCnt            uint64            `protobuf:"varint,52,opt,name=m_rows_read_cnt,json=mRowsReadCnt,proto3" json:"m_rows_read_cnt,omitempty"`
	MRowsReadSum            uint64            `protobuf:"varint,53,opt,name=m_rows_read_sum,json=mRowsReadSum,proto3" json:"m_rows_read_sum,omitempty"`
	MRowsReadMin            uint64            `protobuf:"varint,54,opt,name=m_rows_read_min,json=mRowsReadMin,proto3" json:"m_rows_read_min,omitempty"`
	MRowsReadMax            uint64            `protobuf:"varint,55,opt,name=m_rows_read_max,json=mRowsReadMax,proto3" json:"m_rows_read_max,omitempty"`
	MRowsReadP99            uint64            `protobuf:"varint,56,opt,name=m_rows_read_p99,json=mRowsReadP99,proto3" json:"m_rows_read_p99,omitempty"`
	MRowsReadHg             []uint64          `protobuf:"varint,57,rep,packed,name=m_rows_read_hg,json=mRowsReadHg,proto3" json:"m_rows_read_hg,omitempty"`
	MMergePassesCnt         uint64            `protobuf:"varint,58,opt,name=m_merge_passes_cnt,json=mMergePassesCnt,proto3" json:"m_merge_passes_cnt,omitempty"`
	MMergePassesSum         uint64            `protobuf:"varint,59,opt,name=m_merge_passes_sum,json=mMergePassesSum,proto3" json:"m_merge_passes_sum,omitempty"`
	MMergePassesMin         uint64            `protobuf:"varint,60,opt,name=m_merge_passes_min,json=mMergePassesMin,proto3" json:"m_merge_passes_min,omitempty"`
	MMergePassesMax         uint64            `protobuf:"varint,61,opt,name=m_merge_passes_max,json=mMergePassesMax,proto3" json:"m_merge_passes_max,omitempty"`
	MMergePassesP99         uint64            `protobuf:"varint,62,opt,name=m_merge_passes_p99,json=mMergePassesP99,proto3" json:"m_merge_passes_p99,omitempty"`
	MMergePassesHg          []uint64          `protobuf:"varint,63,rep,packed,name=m_merge_passes_hg,json=mMergePassesHg,proto3" json:"m_merge_passes_hg,omitempty"`
	MInnodbIoROpsCnt        uint64            `protobuf:"varint,64,opt,name=m_innodb_io_r_ops_cnt,json=mInnodbIoROpsCnt,proto3" json:"m_innodb_io_r_ops_cnt,omitempty"`
	MInnodbIoROpsSum        uint64            `protobuf:"varint,65,opt,name=m_innodb_io_r_ops_sum,json=mInnodbIoROpsSum,proto3" json:"m_innodb_io_r_ops_sum,omitempty"`
	MInnodbIoROpsMin        uint64            `protobuf:"varint,66,opt,name=m_innodb_io_r_ops_min,json=mInnodbIoROpsMin,proto3" json:"m_innodb_io_r_ops_min,omitempty"`
	MInnodbIoROpsMax        uint64            `protobuf:"varint,67,opt,name=m_innodb_io_r_ops_max,json=mInnodbIoROpsMax,proto3" json:"m_innodb_io_r_ops_max,omitempty"`
	MInnodbIoROpsP99        uint64            `protobuf:"varint,68,opt,name=m_innodb_io_r_ops_p99,json=mInnodbIoROpsP99,proto3" json:"m_innodb_io_r_ops_p99,omitempty"`
	MInnodbIoROpsHg         []uint64          `protobuf:"varint,69,rep,packed,name=m_innodb_io_r_ops_hg,json=mInnodbIoROpsHg,proto3" json:"m_innodb_io_r_ops_hg,omitempty"`
	MInnodbIoRBytesCnt      uint64            `protobuf:"varint,70,opt,name=m_innodb_io_r_bytes_cnt,json=mInnodbIoRBytesCnt,proto3" json:"m_innodb_io_r_bytes_cnt,omitempty"`
	MInnodbIoRBytesSum      uint64            `protobuf:"varint,71,opt,name=m_innodb_io_r_bytes_sum,json=mInnodbIoRBytesSum,proto3" json:"m_innodb_io_r_bytes_sum,omitempty"`
	MInnodbIoRBytesMin      uint64            `protobuf:"varint,72,opt,name=m_innodb_io_r_bytes_min,json=mInnodbIoRBytesMin,proto3" json:"m_innodb_io_r_bytes_min,omitempty"`
	MInnodbIoRBytesMax      uint64            `protobuf:"varint,73,opt,name=m_innodb_io_r_bytes_max,json=mInnodbIoRBytesMax,proto3" json:"m_innodb_io_r_bytes_max,omitempty"`
	MInnodbIoRBytesP99      uint64            `protobuf:"varint,74,opt,name=m_innodb_io_r_bytes_p99,json=mInnodbIoRBytesP99,proto3" json:"m_innodb_io_r_bytes_p99,omitempty"`
	MInnodbIoRBytesHg       []uint64          `protobuf:"varint,75,rep,packed,name=m_innodb_io_r_bytes_hg,json=mInnodbIoRBytesHg,proto3" json:"m_innodb_io_r_bytes_hg,omitempty"`
	MInnodbIoRWaitCnt       float32           `protobuf:"fixed32,76,opt,name=m_innodb_io_r_wait_cnt,json=mInnodbIoRWaitCnt,proto3" json:"m_innodb_io_r_wait_cnt,omitempty"`
	MInnodbIoRWaitSum       float32           `protobuf:"fixed32,77,opt,name=m_innodb_io_r_wait_sum,json=mInnodbIoRWaitSum,proto3" json:"m_innodb_io_r_wait_sum,omitempty"`
	MInnodbIoRWaitMin       float32           `protobuf:"fixed32,78,opt,name=m_innodb_io_r_wait_min,json=mInnodbIoRWaitMin,proto3" json:"m_innodb_io_r_wait_min,omitempty"`
	MInnodbIoRWaitMax       float32           `protobuf:"fixed32,79,opt,name=m_innodb_io_r_wait_max,json=mInnodbIoRWaitMax,proto3" json:"m_innodb_io_r_wait_max,omitempty"`
	MInnodbIoRWaitP99       float32           `protobuf:"fixed32,80,opt,name=m_innodb_io_r_wait_p99,json=mInnodbIoRWaitP99,proto3" json:"m_innodb_io_r_wait_p99,omitempty"`
	MInnodbIoRWaitHg        []float32         `protobuf:"fixed32,81,rep,packed,name=m_innodb_io_r_wait_hg,json=mInnodbIoRWaitHg,proto3" json:"m_innodb_io_r_wait_hg,omitempty"`
	MInnodbRecLockWaitCnt   float32           `protobuf:"fixed32,82,opt,name=m_innodb_rec_lock_wait_cnt,json=mInnodbRecLockWaitCnt,proto3" json:"m_innodb_rec_lock_wait_cnt,omitempty"`
	MInnodbRecLockWaitSum   float32           `protobuf:"fixed32,83,opt,name=m_innodb_rec_lock_wait_sum,json=mInnodbRecLockWaitSum,proto3" json:"m_innodb_rec_lock_wait_sum,omitempty"`
	MInnodbRecLockWaitMin   float32           `protobuf:"fixed32,84,opt,name=m_innodb_rec_lock_wait_min,json=mInnodbRecLockWaitMin,proto3" json:"m_innodb_rec_lock_wait_min,omitempty"`
	MInnodbRecLockWaitMax   float32           `protobuf:"fixed32,85,opt,name=m_innodb_rec_lock_wait_max,json=mInnodbRecLockWaitMax,proto3" json:"m_innodb_rec_lock_wait_max,omitempty"`
	MInnodbRecLockWaitP99   float32           `protobuf:"fixed32,86,opt,name=m_innodb_rec_lock_wait_p99,json=mInnodbRecLockWaitP99,proto3" json:"m_innodb_rec_lock_wait_p99,omitempty"`
	MInnodbRecLockWaitHg    []float32         `protobuf:"fixed32,87,rep,packed,name=m_innodb_rec_lock_wait_hg,json=mInnodbRecLockWaitHg,proto3" json:"m_innodb_rec_lock_wait_hg,omitempty"`
	MInnodbQueueWaitCnt     float32           `protobuf:"fixed32,88,opt,name=m_innodb_queue_wait_cnt,json=mInnodbQueueWaitCnt,proto3" json:"m_innodb_queue_wait_cnt,omitempty"`
	MInnodbQueueWaitSum     float32           `protobuf:"fixed32,89,opt,name=m_innodb_queue_wait_sum,json=mInnodbQueueWaitSum,proto3" json:"m_innodb_queue_wait_sum,omitempty"`
	MInnodbQueueWaitMin     float32           `protobuf:"fixed32,90,opt,name=m_innodb_queue_wait_min,json=mInnodbQueueWaitMin,proto3" json:"m_innodb_queue_wait_min,omitempty"`
	MInnodbQueueWaitMax     float32           `protobuf:"fixed32,91,opt,name=m_innodb_queue_wait_max,json=mInnodbQueueWaitMax,proto3" json:"m_innodb_queue_wait_max,omitempty"`
	MInnodbQueueWaitP99     float32           `protobuf:"fixed32,92,opt,name=m_innodb_queue_wait_p99,json=mInnodbQueueWaitP99,proto3" json:"m_innodb_queue_wait_p99,omitempty"`
	MInnodbQueueWaitHg      []float32         `protobuf:"fixed32,93,rep,packed,name=m_innodb_queue_wait_hg,json=mInnodbQueueWaitHg,proto3" json:"m_innodb_queue_wait_hg,omitempty"`
	MInnodbPagesDistinctCnt uint64            `protobuf:"varint,94,opt,name=m_innodb_pages_distinct_cnt,json=mInnodbPagesDistinctCnt,proto3" json:"m_innodb_pages_distinct_cnt,omitempty"`
	MInnodbPagesDistinctSum uint64            `protobuf:"varint,95,opt,name=m_innodb_pages_distinct_sum,json=mInnodbPagesDistinctSum,proto3" json:"m_innodb_pages_distinct_sum,omitempty"`
	MInnodbPagesDistinctMin uint64            `protobuf:"varint,96,opt,name=m_innodb_pages_distinct_min,json=mInnodbPagesDistinctMin,proto3" json:"m_innodb_pages_distinct_min,omitempty"`
	MInnodbPagesDistinctMax uint64            `protobuf:"varint,97,opt,name=m_innodb_pages_distinct_max,json=mInnodbPagesDistinctMax,proto3" json:"m_innodb_pages_distinct_max,omitempty"`
	MInnodbPagesDistinctP99 uint64            `protobuf:"varint,98,opt,name=m_innodb_pages_distinct_p99,json=mInnodbPagesDistinctP99,proto3" json:"m_innodb_pages_distinct_p99,omitempty"`
	MInnodbPagesDistinctHg  []uint64          `protobuf:"varint,99,rep,packed,name=m_innodb_pages_distinct_hg,json=mInnodbPagesDistinctHg,proto3" json:"m_innodb_pages_distinct_hg,omitempty"`
	MQueryLengthCnt         uint64            `protobuf:"varint,100,opt,name=m_query_length_cnt,json=mQueryLengthCnt,proto3" json:"m_query_length_cnt,omitempty"`
	MQueryLengthSum         uint64            `protobuf:"varint,101,opt,name=m_query_length_sum,json=mQueryLengthSum,proto3" json:"m_query_length_sum,omitempty"`
	MQueryLengthMin         uint64            `protobuf:"varint,102,opt,name=m_query_length_min,json=mQueryLengthMin,proto3" json:"m_query_length_min,omitempty"`
	MQueryLengthMax         uint64            `protobuf:"varint,103,opt,name=m_query_length_max,json=mQueryLengthMax,proto3" json:"m_query_length_max,omitempty"`
	MQueryLengthP99         uint64            `protobuf:"varint,104,opt,name=m_query_length_p99,json=mQueryLengthP99,proto3" json:"m_query_length_p99,omitempty"`
	MQueryLengthHg          []uint64          `protobuf:"varint,105,rep,packed,name=m_query_length_hg,json=mQueryLengthHg,proto3" json:"m_query_length_hg,omitempty"`
	MBytesSentCnt           uint64            `protobuf:"varint,106,opt,name=m_bytes_sent_cnt,json=mBytesSentCnt,proto3" json:"m_bytes_sent_cnt,omitempty"`
	MBytesSentSum           uint64            `protobuf:"varint,107,opt,name=m_bytes_sent_sum,json=mBytesSentSum,proto3" json:"m_bytes_sent_sum,omitempty"`
	MBytesSentMin           uint64            `protobuf:"varint,108,opt,name=m_bytes_sent_min,json=mBytesSentMin,proto3" json:"m_bytes_sent_min,omitempty"`
	MBytesSentMax           uint64            `protobuf:"varint,109,opt,name=m_bytes_sent_max,json=mBytesSentMax,proto3" json:"m_bytes_sent_max,omitempty"`
	MBytesSentP99           uint64            `protobuf:"varint,110,opt,name=m_bytes_sent_p99,json=mBytesSentP99,proto3" json:"m_bytes_sent_p99,omitempty"`
	MBytesSentHg            []uint64          `protobuf:"varint,111,rep,packed,name=m_bytes_sent_hg,json=mBytesSentHg,proto3" json:"m_bytes_sent_hg,omitempty"`
	MTmpTablesCnt           uint64            `protobuf:"varint,112,opt,name=m_tmp_tables_cnt,json=mTmpTablesCnt,proto3" json:"m_tmp_tables_cnt,omitempty"`
	MTmpTablesSum           uint64            `protobuf:"varint,113,opt,name=m_tmp_tables_sum,json=mTmpTablesSum,proto3" json:"m_tmp_tables_sum,omitempty"`
	MTmpTablesMin           uint64            `protobuf:"varint,114,opt,name=m_tmp_tables_min,json=mTmpTablesMin,proto3" json:"m_tmp_tables_min,omitempty"`
	MTmpTablesMax           uint64            `protobuf:"varint,115,opt,name=m_tmp_tables_max,json=mTmpTablesMax,proto3" json:"m_tmp_tables_max,omitempty"`
	MTmpTablesP99           uint64            `protobuf:"varint,116,opt,name=m_tmp_tables_p99,json=mTmpTablesP99,proto3" json:"m_tmp_tables_p99,omitempty"`
	MTmpTablesHg            []uint64          `protobuf:"varint,117,rep,packed,name=m_tmp_tables_hg,json=mTmpTablesHg,proto3" json:"m_tmp_tables_hg,omitempty"`
	MTmpDiskTablesCnt       uint64            `protobuf:"varint,118,opt,name=m_tmp_disk_tables_cnt,json=mTmpDiskTablesCnt,proto3" json:"m_tmp_disk_tables_cnt,omitempty"`
	MTmpDiskTablesSum       uint64            `protobuf:"varint,119,opt,name=m_tmp_disk_tables_sum,json=mTmpDiskTablesSum,proto3" json:"m_tmp_disk_tables_sum,omitempty"`
	MTmpDiskTablesMin       uint64            `protobuf:"varint,120,opt,name=m_tmp_disk_tables_min,json=mTmpDiskTablesMin,proto3" json:"m_tmp_disk_tables_min,omitempty"`
	MTmpDiskTablesMax       uint64            `protobuf:"varint,121,opt,name=m_tmp_disk_tables_max,json=mTmpDiskTablesMax,proto3" json:"m_tmp_disk_tables_max,omitempty"`
	MTmpDiskTablesP99       uint64            `protobuf:"varint,122,opt,name=m_tmp_disk_tables_p99,json=mTmpDiskTablesP99,proto3" json:"m_tmp_disk_tables_p99,omitempty"`
	MTmpDiskTablesHg        []uint64          `protobuf:"varint,123,rep,packed,name=m_tmp_disk_tables_hg,json=mTmpDiskTablesHg,proto3" json:"m_tmp_disk_tables_hg,omitempty"`
	MTmpTableSizesCnt       uint64            `protobuf:"varint,124,opt,name=m_tmp_table_sizes_cnt,json=mTmpTableSizesCnt,proto3" json:"m_tmp_table_sizes_cnt,omitempty"`
	MTmpTableSizesSum       uint64            `protobuf:"varint,125,opt,name=m_tmp_table_sizes_sum,json=mTmpTableSizesSum,proto3" json:"m_tmp_table_sizes_sum,omitempty"`
	MTmpTableSizesMin       uint64            `protobuf:"varint,126,opt,name=m_tmp_table_sizes_min,json=mTmpTableSizesMin,proto3" json:"m_tmp_table_sizes_min,omitempty"`
	MTmpTableSizesMax       uint64            `protobuf:"varint,127,opt,name=m_tmp_table_sizes_max,json=mTmpTableSizesMax,proto3" json:"m_tmp_table_sizes_max,omitempty"`
	MTmpTableSizesP99       uint64            `protobuf:"varint,128,opt,name=m_tmp_table_sizes_p99,json=mTmpTableSizesP99,proto3" json:"m_tmp_table_sizes_p99,omitempty"`
	MTmpTableSizesHg        []uint64          `protobuf:"varint,129,rep,packed,name=m_tmp_table_sizes_hg,json=mTmpTableSizesHg,proto3" json:"m_tmp_table_sizes_hg,omitempty"`
	MQcHitSum               uint64            `protobuf:"varint,130,opt,name=m_qc_hit_sum,json=mQcHitSum,proto3" json:"m_qc_hit_sum,omitempty"`
	MFullScanSum            uint64            `protobuf:"varint,131,opt,name=m_full_scan_sum,json=mFullScanSum,proto3" json:"m_full_scan_sum,omitempty"`
	MFullJoinSum            uint64            `protobuf:"varint,132,opt,name=m_full_join_sum,json=mFullJoinSum,proto3" json:"m_full_join_sum,omitempty"`
	MTmpTableSum            uint64            `protobuf:"varint,133,opt,name=m_tmp_table_sum,json=mTmpTableSum,proto3" json:"m_tmp_table_sum,omitempty"`
	MTmpTableOnDiskSum      uint64            `protobuf:"varint,134,opt,name=m_tmp_table_on_disk_sum,json=mTmpTableOnDiskSum,proto3" json:"m_tmp_table_on_disk_sum,omitempty"`
	MFilesortSum            uint64            `protobuf:"varint,135,opt,name=m_filesort_sum,json=mFilesortSum,proto3" json:"m_filesort_sum,omitempty"`
	MFilesortOnDiskSum      uint64            `protobuf:"varint,136,opt,name=m_filesort_on_disk_sum,json=mFilesortOnDiskSum,proto3" json:"m_filesort_on_disk_sum,omitempty"`
	MSelectFullRangeJoinSum uint64            `protobuf:"varint,137,opt,name=m_select_full_range_join_sum,json=mSelectFullRangeJoinSum,proto3" json:"m_select_full_range_join_sum,omitempty"`
	MSelectRangeSum         uint64            `protobuf:"varint,138,opt,name=m_select_range_sum,json=mSelectRangeSum,proto3" json:"m_select_range_sum,omitempty"`
	MSelectRangeCheckSum    uint64            `protobuf:"varint,139,opt,name=m_select_range_check_sum,json=mSelectRangeCheckSum,proto3" json:"m_select_range_check_sum,omitempty"`
	MSortRangeSum           uint64            `protobuf:"varint,140,opt,name=m_sort_range_sum,json=mSortRangeSum,proto3" json:"m_sort_range_sum,omitempty"`
	MSortRowsSum            uint64            `protobuf:"varint,141,opt,name=m_sort_rows_sum,json=mSortRowsSum,proto3" json:"m_sort_rows_sum,omitempty"`
	MSortScanSum            uint64            `protobuf:"varint,142,opt,name=m_sort_scan_sum,json=mSortScanSum,proto3" json:"m_sort_scan_sum,omitempty"`
	MNoIndexUsedSum         uint64            `protobuf:"varint,143,opt,name=m_no_index_used_sum,json=mNoIndexUsedSum,proto3" json:"m_no_index_used_sum,omitempty"`
	MNoGoodIndexUsedSum     uint64            `protobuf:"varint,144,opt,name=m_no_good_index_used_sum,json=mNoGoodIndexUsedSum,proto3" json:"m_no_good_index_used_sum,omitempty"`
	Grpstr                  string            `protobuf:"bytes,145,opt,name=grpstr,proto3" json:"grpstr,omitempty"`
	Grpint                  uint32            `protobuf:"varint,146,opt,name=grpint,proto3" json:"grpint,omitempty"`
	Labint                  map[uint32]uint32 `protobuf:"bytes,147,rep,name=labint,proto3" json:"labint,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral    struct{}          `json:"-"`
	XXX_unrecognized        []byte            `json:"-"`
	XXX_sizecache           int32             `json:"-"`
}

func (m *MetricsReply) Reset()         { *m = MetricsReply{} }
func (m *MetricsReply) String() string { return proto.CompactTextString(m) }
func (*MetricsReply) ProtoMessage()    {}
func (*MetricsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_metrics_dd73b6b6a30d2cea, []int{2}
}
func (m *MetricsReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricsReply.Unmarshal(m, b)
}
func (m *MetricsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricsReply.Marshal(b, m, deterministic)
}
func (dst *MetricsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsReply.Merge(dst, src)
}
func (m *MetricsReply) XXX_Size() int {
	return xxx_messageInfo_MetricsReply.Size(m)
}
func (m *MetricsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsReply.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsReply proto.InternalMessageInfo

func (m *MetricsReply) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

func (m *MetricsReply) GetDigestText() string {
	if m != nil {
		return m.DigestText
	}
	return ""
}

func (m *MetricsReply) GetDbServers() []string {
	if m != nil {
		return m.DbServers
	}
	return nil
}

func (m *MetricsReply) GetDbSchemas() []string {
	if m != nil {
		return m.DbSchemas
	}
	return nil
}

func (m *MetricsReply) GetDbUsernames() []string {
	if m != nil {
		return m.DbUsernames
	}
	return nil
}

func (m *MetricsReply) GetClientHosts() []string {
	if m != nil {
		return m.ClientHosts
	}
	return nil
}

func (m *MetricsReply) GetFirstSeen() string {
	if m != nil {
		return m.FirstSeen
	}
	return ""
}

func (m *MetricsReply) GetLastSeen() string {
	if m != nil {
		return m.LastSeen
	}
	return ""
}

func (m *MetricsReply) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *MetricsReply) GetAgentUuid() string {
	if m != nil {
		return m.AgentUuid
	}
	return ""
}

func (m *MetricsReply) GetPeriodStart() int64 {
	if m != nil {
		return m.PeriodStart
	}
	return 0
}

func (m *MetricsReply) GetPeriodLength() uint32 {
	if m != nil {
		return m.PeriodLength
	}
	return 0
}

func (m *MetricsReply) GetExample() string {
	if m != nil {
		return m.Example
	}
	return ""
}

func (m *MetricsReply) GetExampleFormat() MetricsReply_ExampleFormat {
	if m != nil {
		return m.ExampleFormat
	}
	return MetricsReply_EXAMPLE
}

func (m *MetricsReply) GetIsTruncated() uint32 {
	if m != nil {
		return m.IsTruncated
	}
	return 0
}

func (m *MetricsReply) GetExampleType() MetricsReply_ExampleType {
	if m != nil {
		return m.ExampleType
	}
	return MetricsReply_RANDOM
}

func (m *MetricsReply) GetExampleMetrics() string {
	if m != nil {
		return m.ExampleMetrics
	}
	return ""
}

func (m *MetricsReply) GetNumQueryWithWarnings() uint64 {
	if m != nil {
		return m.NumQueryWithWarnings
	}
	return 0
}

func (m *MetricsReply) GetWarnings() map[string]uint64 {
	if m != nil {
		return m.Warnings
	}
	return nil
}

func (m *MetricsReply) GetNumQueryWithErrors() uint64 {
	if m != nil {
		return m.NumQueryWithErrors
	}
	return 0
}

func (m *MetricsReply) GetErrors() map[string]uint64 {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *MetricsReply) GetNumQueries() uint64 {
	if m != nil {
		return m.NumQueries
	}
	return 0
}

func (m *MetricsReply) GetMQueryTimeCnt() uint32 {
	if m != nil {
		return m.MQueryTimeCnt
	}
	return 0
}

func (m *MetricsReply) GetMQueryTimeSum() float32 {
	if m != nil {
		return m.MQueryTimeSum
	}
	return 0
}

func (m *MetricsReply) GetMQueryTimeMin() float32 {
	if m != nil {
		return m.MQueryTimeMin
	}
	return 0
}

func (m *MetricsReply) GetMQueryTimeMax() float32 {
	if m != nil {
		return m.MQueryTimeMax
	}
	return 0
}

func (m *MetricsReply) GetMQueryTimeP99() float32 {
	if m != nil {
		return m.MQueryTimeP99
	}
	return 0
}

func (m *MetricsReply) GetMQueryTimeHg() []uint32 {
	if m != nil {
		return m.MQueryTimeHg
	}
	return nil
}

func (m *MetricsReply) GetMLockTimeCnt() uint32 {
	if m != nil {
		return m.MLockTimeCnt
	}
	return 0
}

func (m *MetricsReply) GetMLockTimeSum() float32 {
	if m != nil {
		return m.MLockTimeSum
	}
	return 0
}

func (m *MetricsReply) GetMLockTimeMin() float32 {
	if m != nil {
		return m.MLockTimeMin
	}
	return 0
}

func (m *MetricsReply) GetMLockTimeMax() float32 {
	if m != nil {
		return m.MLockTimeMax
	}
	return 0
}

func (m *MetricsReply) GetMLockTimeP99() float32 {
	if m != nil {
		return m.MLockTimeP99
	}
	return 0
}

func (m *MetricsReply) GetMLockTimeHg() []float32 {
	if m != nil {
		return m.MLockTimeHg
	}
	return nil
}

func (m *MetricsReply) GetMRowsSentCnt() uint64 {
	if m != nil {
		return m.MRowsSentCnt
	}
	return 0
}

func (m *MetricsReply) GetMRowsSentSum() uint64 {
	if m != nil {
		return m.MRowsSentSum
	}
	return 0
}

func (m *MetricsReply) GetMRowsSentMin() uint64 {
	if m != nil {
		return m.MRowsSentMin
	}
	return 0
}

func (m *MetricsReply) GetMRowsSentMax() uint64 {
	if m != nil {
		return m.MRowsSentMax
	}
	return 0
}

func (m *MetricsReply) GetMRowsSentP99() uint64 {
	if m != nil {
		return m.MRowsSentP99
	}
	return 0
}

func (m *MetricsReply) GetMRowsSentHg() []uint64 {
	if m != nil {
		return m.MRowsSentHg
	}
	return nil
}

func (m *MetricsReply) GetMRowsExaminedCnt() uint64 {
	if m != nil {
		return m.MRowsExaminedCnt
	}
	return 0
}

func (m *MetricsReply) GetMRowsExaminedSum() uint64 {
	if m != nil {
		return m.MRowsExaminedSum
	}
	return 0
}

func (m *MetricsReply) GetMRowsExaminedMin() uint64 {
	if m != nil {
		return m.MRowsExaminedMin
	}
	return 0
}

func (m *MetricsReply) GetMRowsExaminedMax() uint64 {
	if m != nil {
		return m.MRowsExaminedMax
	}
	return 0
}

func (m *MetricsReply) GetMRowsExaminedP99() uint64 {
	if m != nil {
		return m.MRowsExaminedP99
	}
	return 0
}

func (m *MetricsReply) GetMRowsExaminedHg() []uint64 {
	if m != nil {
		return m.MRowsExaminedHg
	}
	return nil
}

func (m *MetricsReply) GetMRowsAffectedCnt() uint64 {
	if m != nil {
		return m.MRowsAffectedCnt
	}
	return 0
}

func (m *MetricsReply) GetMRowsAffectedSum() uint64 {
	if m != nil {
		return m.MRowsAffectedSum
	}
	return 0
}

func (m *MetricsReply) GetMRowsAffectedMin() uint64 {
	if m != nil {
		return m.MRowsAffectedMin
	}
	return 0
}

func (m *MetricsReply) GetMRowsAffectedMax() uint64 {
	if m != nil {
		return m.MRowsAffectedMax
	}
	return 0
}

func (m *MetricsReply) GetMRowsAffectedP99() uint64 {
	if m != nil {
		return m.MRowsAffectedP99
	}
	return 0
}

func (m *MetricsReply) GetMRowsAffectedHg() []uint64 {
	if m != nil {
		return m.MRowsAffectedHg
	}
	return nil
}

func (m *MetricsReply) GetMRowsReadCnt() uint64 {
	if m != nil {
		return m.MRowsReadCnt
	}
	return 0
}

func (m *MetricsReply) GetMRowsReadSum() uint64 {
	if m != nil {
		return m.MRowsReadSum
	}
	return 0
}

func (m *MetricsReply) GetMRowsReadMin() uint64 {
	if m != nil {
		return m.MRowsReadMin
	}
	return 0
}

func (m *MetricsReply) GetMRowsReadMax() uint64 {
	if m != nil {
		return m.MRowsReadMax
	}
	return 0
}

func (m *MetricsReply) GetMRowsReadP99() uint64 {
	if m != nil {
		return m.MRowsReadP99
	}
	return 0
}

func (m *MetricsReply) GetMRowsReadHg() []uint64 {
	if m != nil {
		return m.MRowsReadHg
	}
	return nil
}

func (m *MetricsReply) GetMMergePassesCnt() uint64 {
	if m != nil {
		return m.MMergePassesCnt
	}
	return 0
}

func (m *MetricsReply) GetMMergePassesSum() uint64 {
	if m != nil {
		return m.MMergePassesSum
	}
	return 0
}

func (m *MetricsReply) GetMMergePassesMin() uint64 {
	if m != nil {
		return m.MMergePassesMin
	}
	return 0
}

func (m *MetricsReply) GetMMergePassesMax() uint64 {
	if m != nil {
		return m.MMergePassesMax
	}
	return 0
}

func (m *MetricsReply) GetMMergePassesP99() uint64 {
	if m != nil {
		return m.MMergePassesP99
	}
	return 0
}

func (m *MetricsReply) GetMMergePassesHg() []uint64 {
	if m != nil {
		return m.MMergePassesHg
	}
	return nil
}

func (m *MetricsReply) GetMInnodbIoROpsCnt() uint64 {
	if m != nil {
		return m.MInnodbIoROpsCnt
	}
	return 0
}

func (m *MetricsReply) GetMInnodbIoROpsSum() uint64 {
	if m != nil {
		return m.MInnodbIoROpsSum
	}
	return 0
}

func (m *MetricsReply) GetMInnodbIoROpsMin() uint64 {
	if m != nil {
		return m.MInnodbIoROpsMin
	}
	return 0
}

func (m *MetricsReply) GetMInnodbIoROpsMax() uint64 {
	if m != nil {
		return m.MInnodbIoROpsMax
	}
	return 0
}

func (m *MetricsReply) GetMInnodbIoROpsP99() uint64 {
	if m != nil {
		return m.MInnodbIoROpsP99
	}
	return 0
}

func (m *MetricsReply) GetMInnodbIoROpsHg() []uint64 {
	if m != nil {
		return m.MInnodbIoROpsHg
	}
	return nil
}

func (m *MetricsReply) GetMInnodbIoRBytesCnt() uint64 {
	if m != nil {
		return m.MInnodbIoRBytesCnt
	}
	return 0
}

func (m *MetricsReply) GetMInnodbIoRBytesSum() uint64 {
	if m != nil {
		return m.MInnodbIoRBytesSum
	}
	return 0
}

func (m *MetricsReply) GetMInnodbIoRBytesMin() uint64 {
	if m != nil {
		return m.MInnodbIoRBytesMin
	}
	return 0
}

func (m *MetricsReply) GetMInnodbIoRBytesMax() uint64 {
	if m != nil {
		return m.MInnodbIoRBytesMax
	}
	return 0
}

func (m *MetricsReply) GetMInnodbIoRBytesP99() uint64 {
	if m != nil {
		return m.MInnodbIoRBytesP99
	}
	return 0
}

func (m *MetricsReply) GetMInnodbIoRBytesHg() []uint64 {
	if m != nil {
		return m.MInnodbIoRBytesHg
	}
	return nil
}

func (m *MetricsReply) GetMInnodbIoRWaitCnt() float32 {
	if m != nil {
		return m.MInnodbIoRWaitCnt
	}
	return 0
}

func (m *MetricsReply) GetMInnodbIoRWaitSum() float32 {
	if m != nil {
		return m.MInnodbIoRWaitSum
	}
	return 0
}

func (m *MetricsReply) GetMInnodbIoRWaitMin() float32 {
	if m != nil {
		return m.MInnodbIoRWaitMin
	}
	return 0
}

func (m *MetricsReply) GetMInnodbIoRWaitMax() float32 {
	if m != nil {
		return m.MInnodbIoRWaitMax
	}
	return 0
}

func (m *MetricsReply) GetMInnodbIoRWaitP99() float32 {
	if m != nil {
		return m.MInnodbIoRWaitP99
	}
	return 0
}

func (m *MetricsReply) GetMInnodbIoRWaitHg() []float32 {
	if m != nil {
		return m.MInnodbIoRWaitHg
	}
	return nil
}

func (m *MetricsReply) GetMInnodbRecLockWaitCnt() float32 {
	if m != nil {
		return m.MInnodbRecLockWaitCnt
	}
	return 0
}

func (m *MetricsReply) GetMInnodbRecLockWaitSum() float32 {
	if m != nil {
		return m.MInnodbRecLockWaitSum
	}
	return 0
}

func (m *MetricsReply) GetMInnodbRecLockWaitMin() float32 {
	if m != nil {
		return m.MInnodbRecLockWaitMin
	}
	return 0
}

func (m *MetricsReply) GetMInnodbRecLockWaitMax() float32 {
	if m != nil {
		return m.MInnodbRecLockWaitMax
	}
	return 0
}

func (m *MetricsReply) GetMInnodbRecLockWaitP99() float32 {
	if m != nil {
		return m.MInnodbRecLockWaitP99
	}
	return 0
}

func (m *MetricsReply) GetMInnodbRecLockWaitHg() []float32 {
	if m != nil {
		return m.MInnodbRecLockWaitHg
	}
	return nil
}

func (m *MetricsReply) GetMInnodbQueueWaitCnt() float32 {
	if m != nil {
		return m.MInnodbQueueWaitCnt
	}
	return 0
}

func (m *MetricsReply) GetMInnodbQueueWaitSum() float32 {
	if m != nil {
		return m.MInnodbQueueWaitSum
	}
	return 0
}

func (m *MetricsReply) GetMInnodbQueueWaitMin() float32 {
	if m != nil {
		return m.MInnodbQueueWaitMin
	}
	return 0
}

func (m *MetricsReply) GetMInnodbQueueWaitMax() float32 {
	if m != nil {
		return m.MInnodbQueueWaitMax
	}
	return 0
}

func (m *MetricsReply) GetMInnodbQueueWaitP99() float32 {
	if m != nil {
		return m.MInnodbQueueWaitP99
	}
	return 0
}

func (m *MetricsReply) GetMInnodbQueueWaitHg() []float32 {
	if m != nil {
		return m.MInnodbQueueWaitHg
	}
	return nil
}

func (m *MetricsReply) GetMInnodbPagesDistinctCnt() uint64 {
	if m != nil {
		return m.MInnodbPagesDistinctCnt
	}
	return 0
}

func (m *MetricsReply) GetMInnodbPagesDistinctSum() uint64 {
	if m != nil {
		return m.MInnodbPagesDistinctSum
	}
	return 0
}

func (m *MetricsReply) GetMInnodbPagesDistinctMin() uint64 {
	if m != nil {
		return m.MInnodbPagesDistinctMin
	}
	return 0
}

func (m *MetricsReply) GetMInnodbPagesDistinctMax() uint64 {
	if m != nil {
		return m.MInnodbPagesDistinctMax
	}
	return 0
}

func (m *MetricsReply) GetMInnodbPagesDistinctP99() uint64 {
	if m != nil {
		return m.MInnodbPagesDistinctP99
	}
	return 0
}

func (m *MetricsReply) GetMInnodbPagesDistinctHg() []uint64 {
	if m != nil {
		return m.MInnodbPagesDistinctHg
	}
	return nil
}

func (m *MetricsReply) GetMQueryLengthCnt() uint64 {
	if m != nil {
		return m.MQueryLengthCnt
	}
	return 0
}

func (m *MetricsReply) GetMQueryLengthSum() uint64 {
	if m != nil {
		return m.MQueryLengthSum
	}
	return 0
}

func (m *MetricsReply) GetMQueryLengthMin() uint64 {
	if m != nil {
		return m.MQueryLengthMin
	}
	return 0
}

func (m *MetricsReply) GetMQueryLengthMax() uint64 {
	if m != nil {
		return m.MQueryLengthMax
	}
	return 0
}

func (m *MetricsReply) GetMQueryLengthP99() uint64 {
	if m != nil {
		return m.MQueryLengthP99
	}
	return 0
}

func (m *MetricsReply) GetMQueryLengthHg() []uint64 {
	if m != nil {
		return m.MQueryLengthHg
	}
	return nil
}

func (m *MetricsReply) GetMBytesSentCnt() uint64 {
	if m != nil {
		return m.MBytesSentCnt
	}
	return 0
}

func (m *MetricsReply) GetMBytesSentSum() uint64 {
	if m != nil {
		return m.MBytesSentSum
	}
	return 0
}

func (m *MetricsReply) GetMBytesSentMin() uint64 {
	if m != nil {
		return m.MBytesSentMin
	}
	return 0
}

func (m *MetricsReply) GetMBytesSentMax() uint64 {
	if m != nil {
		return m.MBytesSentMax
	}
	return 0
}

func (m *MetricsReply) GetMBytesSentP99() uint64 {
	if m != nil {
		return m.MBytesSentP99
	}
	return 0
}

func (m *MetricsReply) GetMBytesSentHg() []uint64 {
	if m != nil {
		return m.MBytesSentHg
	}
	return nil
}

func (m *MetricsReply) GetMTmpTablesCnt() uint64 {
	if m != nil {
		return m.MTmpTablesCnt
	}
	return 0
}

func (m *MetricsReply) GetMTmpTablesSum() uint64 {
	if m != nil {
		return m.MTmpTablesSum
	}
	return 0
}

func (m *MetricsReply) GetMTmpTablesMin() uint64 {
	if m != nil {
		return m.MTmpTablesMin
	}
	return 0
}

func (m *MetricsReply) GetMTmpTablesMax() uint64 {
	if m != nil {
		return m.MTmpTablesMax
	}
	return 0
}

func (m *MetricsReply) GetMTmpTablesP99() uint64 {
	if m != nil {
		return m.MTmpTablesP99
	}
	return 0
}

func (m *MetricsReply) GetMTmpTablesHg() []uint64 {
	if m != nil {
		return m.MTmpTablesHg
	}
	return nil
}

func (m *MetricsReply) GetMTmpDiskTablesCnt() uint64 {
	if m != nil {
		return m.MTmpDiskTablesCnt
	}
	return 0
}

func (m *MetricsReply) GetMTmpDiskTablesSum() uint64 {
	if m != nil {
		return m.MTmpDiskTablesSum
	}
	return 0
}

func (m *MetricsReply) GetMTmpDiskTablesMin() uint64 {
	if m != nil {
		return m.MTmpDiskTablesMin
	}
	return 0
}

func (m *MetricsReply) GetMTmpDiskTablesMax() uint64 {
	if m != nil {
		return m.MTmpDiskTablesMax
	}
	return 0
}

func (m *MetricsReply) GetMTmpDiskTablesP99() uint64 {
	if m != nil {
		return m.MTmpDiskTablesP99
	}
	return 0
}

func (m *MetricsReply) GetMTmpDiskTablesHg() []uint64 {
	if m != nil {
		return m.MTmpDiskTablesHg
	}
	return nil
}

func (m *MetricsReply) GetMTmpTableSizesCnt() uint64 {
	if m != nil {
		return m.MTmpTableSizesCnt
	}
	return 0
}

func (m *MetricsReply) GetMTmpTableSizesSum() uint64 {
	if m != nil {
		return m.MTmpTableSizesSum
	}
	return 0
}

func (m *MetricsReply) GetMTmpTableSizesMin() uint64 {
	if m != nil {
		return m.MTmpTableSizesMin
	}
	return 0
}

func (m *MetricsReply) GetMTmpTableSizesMax() uint64 {
	if m != nil {
		return m.MTmpTableSizesMax
	}
	return 0
}

func (m *MetricsReply) GetMTmpTableSizesP99() uint64 {
	if m != nil {
		return m.MTmpTableSizesP99
	}
	return 0
}

func (m *MetricsReply) GetMTmpTableSizesHg() []uint64 {
	if m != nil {
		return m.MTmpTableSizesHg
	}
	return nil
}

func (m *MetricsReply) GetMQcHitSum() uint64 {
	if m != nil {
		return m.MQcHitSum
	}
	return 0
}

func (m *MetricsReply) GetMFullScanSum() uint64 {
	if m != nil {
		return m.MFullScanSum
	}
	return 0
}

func (m *MetricsReply) GetMFullJoinSum() uint64 {
	if m != nil {
		return m.MFullJoinSum
	}
	return 0
}

func (m *MetricsReply) GetMTmpTableSum() uint64 {
	if m != nil {
		return m.MTmpTableSum
	}
	return 0
}

func (m *MetricsReply) GetMTmpTableOnDiskSum() uint64 {
	if m != nil {
		return m.MTmpTableOnDiskSum
	}
	return 0
}

func (m *MetricsReply) GetMFilesortSum() uint64 {
	if m != nil {
		return m.MFilesortSum
	}
	return 0
}

func (m *MetricsReply) GetMFilesortOnDiskSum() uint64 {
	if m != nil {
		return m.MFilesortOnDiskSum
	}
	return 0
}

func (m *MetricsReply) GetMSelectFullRangeJoinSum() uint64 {
	if m != nil {
		return m.MSelectFullRangeJoinSum
	}
	return 0
}

func (m *MetricsReply) GetMSelectRangeSum() uint64 {
	if m != nil {
		return m.MSelectRangeSum
	}
	return 0
}

func (m *MetricsReply) GetMSelectRangeCheckSum() uint64 {
	if m != nil {
		return m.MSelectRangeCheckSum
	}
	return 0
}

func (m *MetricsReply) GetMSortRangeSum() uint64 {
	if m != nil {
		return m.MSortRangeSum
	}
	return 0
}

func (m *MetricsReply) GetMSortRowsSum() uint64 {
	if m != nil {
		return m.MSortRowsSum
	}
	return 0
}

func (m *MetricsReply) GetMSortScanSum() uint64 {
	if m != nil {
		return m.MSortScanSum
	}
	return 0
}

func (m *MetricsReply) GetMNoIndexUsedSum() uint64 {
	if m != nil {
		return m.MNoIndexUsedSum
	}
	return 0
}

func (m *MetricsReply) GetMNoGoodIndexUsedSum() uint64 {
	if m != nil {
		return m.MNoGoodIndexUsedSum
	}
	return 0
}

func (m *MetricsReply) GetGrpstr() string {
	if m != nil {
		return m.Grpstr
	}
	return ""
}

func (m *MetricsReply) GetGrpint() uint32 {
	if m != nil {
		return m.Grpint
	}
	return 0
}

func (m *MetricsReply) GetLabint() map[uint32]uint32 {
	if m != nil {
		return m.Labint
	}
	return nil
}

func init() {
	proto.RegisterType((*MetricsRequest)(nil), "metrics.MetricsRequest")
	proto.RegisterType((*MapFieldEntry)(nil), "metrics.MapFieldEntry")
	proto.RegisterType((*MetricsReply)(nil), "metrics.MetricsReply")
	proto.RegisterMapType((map[string]uint64)(nil), "metrics.MetricsReply.ErrorsEntry")
	proto.RegisterMapType((map[string]string)(nil), "metrics.MetricsReply.LabelsEntry")
	proto.RegisterMapType((map[uint32]uint32)(nil), "metrics.MetricsReply.LabintEntry")
	proto.RegisterMapType((map[string]uint64)(nil), "metrics.MetricsReply.WarningsEntry")
	proto.RegisterEnum("metrics.MetricsReply_ExampleFormat", MetricsReply_ExampleFormat_name, MetricsReply_ExampleFormat_value)
	proto.RegisterEnum("metrics.MetricsReply_ExampleType", MetricsReply_ExampleType_name, MetricsReply_ExampleType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MetricsClient is the client API for Metrics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MetricsClient interface {
	// GetMetricsByDigest
	GetMetricsByDigest(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsReply, error)
}

type metricsClient struct {
	cc *grpc.ClientConn
}

func NewMetricsClient(cc *grpc.ClientConn) MetricsClient {
	return &metricsClient{cc}
}

func (c *metricsClient) GetMetricsByDigest(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsReply, error) {
	out := new(MetricsReply)
	err := c.cc.Invoke(ctx, "/metrics.Metrics/GetMetricsByDigest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsServer is the server API for Metrics service.
type MetricsServer interface {
	// GetMetricsByDigest
	GetMetricsByDigest(context.Context, *MetricsRequest) (*MetricsReply, error)
}

func RegisterMetricsServer(s *grpc.Server, srv MetricsServer) {
	s.RegisterService(&_Metrics_serviceDesc, srv)
}

func _Metrics_GetMetricsByDigest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServer).GetMetricsByDigest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metrics.Metrics/GetMetricsByDigest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServer).GetMetricsByDigest(ctx, req.(*MetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Metrics_serviceDesc = grpc.ServiceDesc{
	ServiceName: "metrics.Metrics",
	HandlerType: (*MetricsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetricsByDigest",
			Handler:    _Metrics_GetMetricsByDigest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/metrics/metrics.proto",
}

func init() { proto.RegisterFile("api/metrics/metrics.proto", fileDescriptor_metrics_dd73b6b6a30d2cea) }

var fileDescriptor_metrics_dd73b6b6a30d2cea = []byte{
	// 2340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x99, 0xfb, 0x77, 0xd4, 0x36,
	0x1e, 0xc5, 0x3b, 0x09, 0x0d, 0x44, 0x93, 0x09, 0xc1, 0x84, 0x44, 0x50, 0x68, 0x87, 0xb0, 0x2d,
	0xd3, 0x6d, 0x09, 0x05, 0xda, 0xd2, 0xd0, 0x6e, 0xbb, 0x40, 0x02, 0x13, 0x36, 0x21, 0xe0, 0x09,
	0x9b, 0x6e, 0xf7, 0xe1, 0x55, 0xc6, 0x8a, 0xec, 0x66, 0x6c, 0x0f, 0x7e, 0x10, 0xa7, 0xfb, 0x7e,
	0xbf, 0xdf, 0xe7, 0xec, 0xff, 0xb4, 0xfb, 0x4f, 0xed, 0x9e, 0xaf, 0x24, 0xdb, 0xb2, 0x2d, 0x4f,
	0x4f, 0x7f, 0x4a, 0x2c, 0x7d, 0xae, 0xa5, 0x7b, 0x2d, 0x8f, 0x24, 0x0b, 0x9d, 0x27, 0x63, 0xf7,
	0xba, 0x47, 0xe3, 0xd0, 0x1d, 0x46, 0xd9, 0xdf, 0xd5, 0x71, 0x18, 0xc4, 0x81, 0x71, 0x52, 0x5e,
	0xae, 0xfc, 0xbb, 0x85, 0xe6, 0xb7, 0xc5, 0xff, 0x26, 0x7d, 0x9e, 0xd0, 0x28, 0x36, 0x0c, 0x74,
	0xe2, 0x20, 0x0c, 0x3c, 0xdc, 0xea, 0xb6, 0x7a, 0xb3, 0x26, 0xff, 0xdf, 0x98, 0x47, 0x53, 0x71,
	0x80, 0xa7, 0x78, 0xc9, 0x54, 0x1c, 0x18, 0x4b, 0x68, 0xc6, 0x76, 0x19, 0x8d, 0x62, 0x3c, 0xcd,
	0xcb, 0xe4, 0x95, 0xb1, 0x8a, 0x66, 0x46, 0x64, 0x9f, 0x8e, 0x22, 0x7c, 0xa2, 0x3b, 0xdd, 0x6b,
	0xdf, 0x5c, 0x5a, 0xcd, 0xda, 0xdd, 0x26, 0xe3, 0x07, 0x2e, 0x1d, 0xd9, 0x1b, 0x7e, 0x1c, 0x1e,
	0x9b, 0x92, 0x32, 0x30, 0x3a, 0xe9, 0xfa, 0xc3, 0x51, 0x62, 0x53, 0xfc, 0x72, 0x77, 0xba, 0x37,
	0x6b, 0x66, 0x97, 0x2b, 0xb7, 0x51, 0xa7, 0x24, 0x31, 0x16, 0xd0, 0xf4, 0x21, 0x3d, 0x96, 0xbd,
	0x82, 0x7f, 0x8d, 0x45, 0xf4, 0xf2, 0x0b, 0x32, 0x4a, 0x28, 0x9e, 0xe2, 0x52, 0x71, 0xb1, 0xf2,
	0xbf, 0xdb, 0x68, 0x2e, 0x77, 0x34, 0x1e, 0x1d, 0x2b, 0x7d, 0x9d, 0x2a, 0xf5, 0xf5, 0x35, 0xd4,
	0x16, 0xff, 0x59, 0x31, 0x4d, 0x33, 0x23, 0x48, 0x14, 0xed, 0xd2, 0x34, 0x36, 0x2e, 0x21, 0x64,
	0xef, 0x5b, 0x11, 0x0d, 0x5f, 0xd0, 0x50, 0x18, 0x9a, 0x35, 0x67, 0xed, 0xfd, 0x81, 0x28, 0xc8,
	0xaa, 0x87, 0x0e, 0xf5, 0x48, 0x24, 0xbb, 0x0f, 0xd5, 0xa2, 0xc0, 0xb8, 0x8c, 0xe6, 0xec, 0x7d,
	0x2b, 0x89, 0x68, 0xe8, 0x13, 0x8f, 0x46, 0x78, 0x86, 0x03, 0x6d, 0x7b, 0xff, 0x59, 0x56, 0x04,
	0xc8, 0x70, 0xe4, 0x52, 0x3f, 0xb6, 0x9c, 0x20, 0x8a, 0x23, 0x7c, 0x52, 0x20, 0xa2, 0xac, 0x0f,
	0x45, 0xc6, 0xab, 0x08, 0x1d, 0xb8, 0x61, 0x14, 0x5b, 0x11, 0xa5, 0x3e, 0xfe, 0x8f, 0x70, 0x3f,
	0xcb, 0x8b, 0x06, 0x94, 0xfa, 0xc6, 0x45, 0x34, 0x3b, 0x22, 0x59, 0xf5, 0x7f, 0x45, 0xf5, 0x29,
	0x28, 0xe1, 0xb5, 0x6b, 0xf9, 0xe3, 0x38, 0xc5, 0x1f, 0xc7, 0xe5, 0xe2, 0x71, 0x28, 0x09, 0xad,
	0x6e, 0x71, 0xa6, 0xfc, 0x64, 0x2e, 0x21, 0x44, 0x18, 0x74, 0x2d, 0x49, 0x5c, 0x1b, 0xcf, 0x8a,
	0x76, 0x79, 0xc9, 0xb3, 0xc4, 0xb5, 0xa1, 0xeb, 0x63, 0x1a, 0xba, 0x81, 0x6d, 0x45, 0x31, 0x09,
	0x63, 0x8c, 0xba, 0xad, 0xde, 0xb4, 0xd9, 0x16, 0x65, 0x03, 0x28, 0x32, 0xae, 0xa0, 0x8e, 0x44,
	0x46, 0xd4, 0x67, 0xb1, 0x83, 0xdb, 0xdd, 0x56, 0xaf, 0x63, 0x4a, 0xdd, 0x16, 0x2f, 0x83, 0x01,
	0x40, 0x53, 0xe2, 0x8d, 0x47, 0x14, 0xcf, 0xf1, 0x36, 0xb2, 0x4b, 0xe3, 0x11, 0x9a, 0x97, 0xff,
	0x5a, 0x07, 0x41, 0xe8, 0x91, 0x18, 0x77, 0xba, 0xad, 0xde, 0xfc, 0xcd, 0x2b, 0x7a, 0x0f, 0x1b,
	0x82, 0x7d, 0xc0, 0x51, 0xb3, 0x43, 0xd5, 0x4b, 0xe8, 0xad, 0x1b, 0x59, 0x71, 0x98, 0xf8, 0x43,
	0x12, 0x53, 0x1b, 0xcf, 0xf3, 0x9e, 0xb4, 0xdd, 0x68, 0x37, 0x2b, 0x32, 0xd6, 0xd1, 0x5c, 0xd6,
	0x5c, 0x7c, 0x3c, 0xa6, 0xf8, 0x34, 0x6f, 0xec, 0xf2, 0xc4, 0xc6, 0x76, 0x8f, 0xc7, 0xd4, 0x6c,
	0xd3, 0xe2, 0xc2, 0xb8, 0x8a, 0x4e, 0x67, 0x77, 0x91, 0x42, 0xbc, 0xc0, 0x6d, 0x65, 0x5e, 0xe4,
	0x6d, 0x8c, 0xf7, 0xd0, 0xb2, 0x9f, 0x78, 0xd6, 0xf3, 0x84, 0x86, 0xc7, 0xd6, 0x91, 0x1b, 0x3b,
	0xd6, 0x11, 0x09, 0x7d, 0xd7, 0x67, 0x11, 0x3e, 0xd3, 0x6d, 0xf5, 0x4e, 0x98, 0x8b, 0x7e, 0xe2,
	0x3d, 0x85, 0xda, 0x3d, 0x37, 0x76, 0xf6, 0x64, 0x9d, 0xf1, 0x09, 0x3a, 0x95, 0x73, 0x06, 0x7f,
	0xa4, 0x0d, 0x71, 0x64, 0x0a, 0xf1, 0x50, 0x73, 0x91, 0x71, 0x03, 0x9d, 0xab, 0xb4, 0x4b, 0xc3,
	0x30, 0x08, 0x23, 0x7c, 0x96, 0xb7, 0x6a, 0xa8, 0xad, 0x6e, 0xf0, 0x1a, 0x18, 0x44, 0x92, 0x59,
	0x9c, 0x34, 0x88, 0x04, 0x2d, 0x07, 0x91, 0x10, 0xc0, 0x2b, 0x96, 0xb5, 0xe6, 0xd2, 0x08, 0x9f,
	0xe3, 0x6d, 0x20, 0xd9, 0x86, 0x4b, 0x23, 0xe3, 0x2a, 0x5a, 0xc8, 0x3a, 0x13, 0xbb, 0x1e, 0xb5,
	0x86, 0x7e, 0x8c, 0x97, 0xf8, 0xc3, 0xe9, 0x88, 0x7e, 0xec, 0xba, 0x1e, 0xbd, 0xef, 0xc7, 0x35,
	0x30, 0x4a, 0x3c, 0xbc, 0xdc, 0x6d, 0xf5, 0xa6, 0x54, 0x70, 0x90, 0x78, 0x35, 0xd0, 0x73, 0x7d,
	0x8c, 0xab, 0xe0, 0xb6, 0xeb, 0xd7, 0x41, 0x92, 0xe2, 0xf3, 0x35, 0x90, 0xa4, 0x35, 0x70, 0xbc,
	0xb6, 0x86, 0x2f, 0x54, 0xc1, 0x27, 0x6b, 0x6b, 0xc6, 0xeb, 0xe8, 0x74, 0x09, 0x74, 0x18, 0x7e,
	0xa5, 0x3b, 0x0d, 0x43, 0xbe, 0xe0, 0xfa, 0x4c, 0x60, 0xa3, 0x60, 0x78, 0x58, 0x58, 0xbe, 0x28,
	0xde, 0x0c, 0x6f, 0x2b, 0x18, 0x1e, 0x66, 0x8e, 0x2b, 0x18, 0x18, 0xbe, 0xc4, 0x5b, 0x2d, 0x30,
	0xf0, 0x5b, 0xc1, 0xc0, 0xee, 0xab, 0x15, 0x0c, 0xdc, 0x56, 0x31, 0x92, 0xe2, 0xd7, 0xaa, 0x18,
	0x49, 0xab, 0x18, 0x58, 0xed, 0x56, 0x30, 0x70, 0x7a, 0x05, 0xcd, 0xab, 0x98, 0xc3, 0xf0, 0xe5,
	0xee, 0x74, 0x6f, 0xca, 0x6c, 0xe7, 0x54, 0xe6, 0x33, 0x0c, 0x8e, 0x22, 0x2b, 0x82, 0xdf, 0x11,
	0xf0, 0xb9, 0xc2, 0x07, 0xc0, 0x9c, 0x67, 0x06, 0x47, 0xd1, 0x80, 0xfa, 0x71, 0xee, 0xb3, 0xc0,
	0xc0, 0xe7, 0x95, 0x0a, 0x96, 0xfb, 0x2c, 0x30, 0xf0, 0xf9, 0xb5, 0x0a, 0x96, 0xfb, 0x54, 0x30,
	0x92, 0xe2, 0xd7, 0xab, 0x58, 0xe6, 0xb3, 0xc0, 0xc0, 0xe7, 0x1b, 0x15, 0x2c, 0xf7, 0x59, 0x60,
	0x0e, 0xc3, 0x57, 0xbb, 0xd3, 0xbd, 0x13, 0x66, 0x3b, 0xa7, 0xfa, 0xcc, 0xb8, 0x86, 0xce, 0x4a,
	0x08, 0xde, 0x71, 0xd7, 0xa7, 0x36, 0xf7, 0xda, 0xe3, 0xf7, 0x5b, 0xe0, 0xe4, 0x86, 0xac, 0x00,
	0xbf, 0x1a, 0x1c, 0x3c, 0xbf, 0xa9, 0xc1, 0xc1, 0xb7, 0x06, 0x07, 0xef, 0x5f, 0xd7, 0xe0, 0xe0,
	0x5f, 0x87, 0x93, 0x14, 0xbf, 0xa5, 0xc3, 0x49, 0xaa, 0xc3, 0x21, 0x8b, 0xb7, 0x35, 0x38, 0xe4,
	0xf1, 0x16, 0x32, 0xaa, 0xb8, 0xc3, 0xf0, 0x35, 0x9e, 0xc9, 0xe9, 0x12, 0x5d, 0xca, 0x85, 0x1c,
	0x1c, 0xd0, 0x61, 0x2c, 0x73, 0x59, 0x55, 0xee, 0x7d, 0x57, 0x56, 0x94, 0x73, 0xc9, 0x71, 0xc8,
	0xe5, 0xba, 0x06, 0x2f, 0xe7, 0x92, 0xe3, 0x90, 0xcb, 0x3b, 0x1a, 0xbc, 0x9c, 0x4b, 0x81, 0x93,
	0x14, 0xdf, 0xd0, 0xe1, 0xa5, 0x5c, 0x72, 0x1c, 0x72, 0xb9, 0xa9, 0xc1, 0xcb, 0xb9, 0xe4, 0xb8,
	0xc3, 0xf0, 0x2d, 0x25, 0x97, 0x8c, 0x2e, 0xbd, 0x17, 0x21, 0x25, 0x22, 0x93, 0x77, 0x95, 0xb1,
	0x67, 0x52, 0x62, 0x97, 0xdf, 0x0b, 0x8e, 0x41, 0x16, 0xef, 0x55, 0xb0, 0xf2, 0x7b, 0xc1, 0x31,
	0xc8, 0xe0, 0xfd, 0x0a, 0x56, 0x7e, 0x2f, 0x04, 0x46, 0x52, 0x7c, 0xbb, 0x8a, 0x95, 0xde, 0x0b,
	0x8e, 0x81, 0xe7, 0x0f, 0x2a, 0x58, 0xf9, 0xbd, 0xe0, 0x98, 0xc3, 0xf0, 0x9a, 0xf2, 0x5e, 0x00,
	0xd5, 0x67, 0x22, 0x14, 0x8f, 0x86, 0x8c, 0x5a, 0x63, 0x12, 0x45, 0x34, 0xe2, 0x56, 0xef, 0xf0,
	0xdb, 0x9d, 0xf6, 0xb6, 0xa1, 0xe2, 0x09, 0x2f, 0x07, 0xb7, 0x75, 0x18, 0x0c, 0x7f, 0x58, 0x87,
	0xc1, 0x73, 0x1d, 0x06, 0xdb, 0x1f, 0xd5, 0x61, 0x70, 0xae, 0x81, 0x49, 0x8a, 0xbf, 0xa1, 0x81,
	0x49, 0xaa, 0x81, 0x21, 0x82, 0x8f, 0xeb, 0x30, 0xa4, 0xf0, 0x26, 0x3a, 0x53, 0x81, 0x1d, 0x86,
	0x3f, 0xe1, 0x41, 0xcc, 0xab, 0x6c, 0x9f, 0x19, 0xd7, 0xd1, 0x39, 0xcf, 0x72, 0x7d, 0x3f, 0xb0,
	0xf7, 0x2d, 0x37, 0xb0, 0x42, 0x2b, 0x18, 0x8b, 0x38, 0xbe, 0x29, 0x47, 0xd4, 0x26, 0xaf, 0xdb,
	0x0c, 0xcc, 0x9d, 0x31, 0xcf, 0x43, 0x2b, 0x80, 0x48, 0xee, 0x6a, 0x04, 0x90, 0x89, 0x56, 0x00,
	0xb1, 0xdc, 0xd3, 0x08, 0x20, 0x17, 0xbd, 0x80, 0xa4, 0xf8, 0xbe, 0x4e, 0x40, 0x52, 0xbd, 0x00,
	0xe2, 0x59, 0xd7, 0x08, 0x20, 0x9f, 0x6b, 0x68, 0xb1, 0x2e, 0x70, 0x18, 0xde, 0x90, 0xef, 0x85,
	0xca, 0xf7, 0x99, 0x71, 0x0b, 0x2d, 0x97, 0xf1, 0xfd, 0xe3, 0x58, 0x0e, 0x9a, 0x07, 0x62, 0x71,
	0x52, 0x28, 0xee, 0x41, 0x15, 0xe4, 0xd4, 0x20, 0x82, 0xa4, 0x1e, 0x6a, 0x45, 0x90, 0x55, 0x83,
	0x08, 0xd2, 0xea, 0x6b, 0x45, 0x90, 0x57, 0x93, 0x88, 0xa4, 0x78, 0x53, 0x2f, 0x22, 0x69, 0x93,
	0x08, 0x52, 0x7b, 0xa4, 0x15, 0x41, 0x6e, 0x37, 0xd0, 0x92, 0x4e, 0xe4, 0x30, 0xfc, 0x2d, 0x9e,
	0xdc, 0x99, 0x8a, 0xa6, 0xcf, 0xea, 0x92, 0x23, 0xe2, 0x8a, 0x29, 0x77, 0x8b, 0x4f, 0xdf, 0x8a,
	0x64, 0x8f, 0xb8, 0x7c, 0xde, 0xd5, 0x4b, 0x20, 0xb8, 0x6d, 0x9d, 0x04, 0x72, 0xd3, 0x4b, 0x20,
	0xb6, 0xc7, 0x3a, 0x09, 0xa4, 0xd6, 0x20, 0x21, 0x29, 0xde, 0xd1, 0x4a, 0x48, 0xda, 0x20, 0x81,
	0xc8, 0x9e, 0xe8, 0x24, 0x90, 0x58, 0x6d, 0x68, 0x72, 0x89, 0xc3, 0xf0, 0x53, 0xbe, 0x2c, 0x59,
	0x28, 0x2b, 0xfa, 0xcc, 0x58, 0x43, 0x17, 0x72, 0x41, 0x48, 0x87, 0x62, 0x2d, 0x93, 0x67, 0x66,
	0xf2, 0x76, 0xce, 0x49, 0x95, 0x49, 0x87, 0xb0, 0xaa, 0xc9, 0x72, 0x6b, 0x96, 0x42, 0x76, 0x83,
	0x26, 0x29, 0xe4, 0xd7, 0x2c, 0x85, 0x0c, 0x77, 0x9b, 0xa4, 0x90, 0xe3, 0x04, 0x29, 0x49, 0xf1,
	0xb3, 0x46, 0x29, 0x49, 0x27, 0x48, 0x21, 0xd3, 0x6f, 0x37, 0x49, 0x21, 0xd7, 0xdb, 0xe8, 0x7c,
	0x83, 0xd4, 0x61, 0x78, 0x8f, 0x67, 0xbb, 0x58, 0x57, 0xf6, 0x99, 0xf1, 0xae, 0x32, 0xee, 0x9f,
	0x27, 0x34, 0xa1, 0x45, 0xb8, 0x9f, 0xf2, 0x06, 0xcf, 0x4a, 0xd9, 0x53, 0xa8, 0xcc, 0xa2, 0x6d,
	0x50, 0x41, 0xae, 0xdf, 0xd1, 0xab, 0x20, 0xd5, 0x06, 0x15, 0x44, 0xfa, 0x99, 0x5e, 0x05, 0x81,
	0x36, 0xa9, 0x48, 0x8a, 0xbf, 0xdb, 0xa0, 0x22, 0x69, 0x93, 0x0a, 0x82, 0xfc, 0x9e, 0x5e, 0x05,
	0x31, 0xde, 0x54, 0x46, 0xb4, 0xa2, 0x72, 0x18, 0xfe, 0x3e, 0xcf, 0xd0, 0xa8, 0x8a, 0xfa, 0xcc,
	0xf8, 0x08, 0xbd, 0x92, 0x6b, 0xc6, 0x84, 0xd1, 0xc8, 0xb2, 0xdd, 0x28, 0x76, 0xfd, 0xa1, 0x48,
	0xf1, 0x07, 0xfc, 0xd7, 0x63, 0x59, 0x0a, 0x9f, 0x00, 0xb0, 0x2e, 0xeb, 0x21, 0xc9, 0x09, 0x6a,
	0x48, 0xd3, 0x6a, 0x56, 0x43, 0xa2, 0x13, 0xd4, 0x90, 0xea, 0x0f, 0x9b, 0xd5, 0x90, 0xec, 0x24,
	0x35, 0x49, 0x31, 0x99, 0xa0, 0x26, 0xe9, 0x24, 0x35, 0xa4, 0xbc, 0xdf, 0xac, 0x86, 0xa4, 0xef,
	0x28, 0x63, 0xbd, 0xa2, 0x76, 0x18, 0x1e, 0xf2, 0x9f, 0xcf, 0x25, 0x9d, 0x38, 0x5b, 0xaf, 0x88,
	0xed, 0x9b, 0xf8, 0x60, 0xc1, 0x83, 0xb6, 0xe5, 0xdc, 0xcf, 0x77, 0x70, 0xe2, 0xa3, 0x45, 0xbe,
	0x5e, 0x29, 0xc1, 0x90, 0x2b, 0xad, 0xc3, 0xf9, 0x7a, 0xa5, 0x04, 0x43, 0x8c, 0x07, 0x75, 0x38,
	0x5f, 0xaf, 0x94, 0x61, 0x92, 0x62, 0xa6, 0x81, 0xb3, 0xf5, 0x4a, 0x09, 0x86, 0x90, 0x9c, 0x3a,
	0x9c, 0xaf, 0x57, 0x4a, 0xb0, 0xc3, 0xb0, 0x2b, 0xd7, 0x2b, 0x0a, 0xdb, 0x67, 0x62, 0xcf, 0x2b,
	0xa7, 0xd2, 0x6c, 0xf3, 0xf6, 0x39, 0xbf, 0x6b, 0xc7, 0x13, 0xd3, 0xa8, 0xdc, 0xbd, 0x55, 0x41,
	0x48, 0xe1, 0xb0, 0x0a, 0xe6, 0xfb, 0x72, 0x05, 0x84, 0x04, 0x46, 0x55, 0x30, 0xdf, 0x97, 0xab,
	0x20, 0x49, 0xb1, 0x57, 0x03, 0xb3, 0x7d, 0xb9, 0x02, 0x82, 0x73, 0xbf, 0x0a, 0xe6, 0xfb, 0x72,
	0x05, 0x74, 0x18, 0x0e, 0xb8, 0xeb, 0xb9, 0x82, 0xcb, 0x3c, 0xc7, 0xde, 0xd8, 0x8a, 0xc9, 0xfe,
	0x48, 0x2e, 0x3c, 0xc6, 0xf2, 0x7e, 0xbb, 0xde, 0x78, 0x97, 0x97, 0xe6, 0x9e, 0x15, 0x10, 0x3c,
	0x3f, 0xaf, 0x82, 0xb9, 0x67, 0x05, 0x04, 0xcf, 0x61, 0x15, 0xcc, 0x3d, 0xab, 0x20, 0x49, 0x71,
	0x54, 0x03, 0x33, 0xcf, 0x0a, 0x08, 0x9e, 0xe3, 0x2a, 0x98, 0x7b, 0x56, 0x40, 0x87, 0xe1, 0x44,
	0x7a, 0xce, 0xb9, 0x3e, 0x33, 0xde, 0x81, 0x89, 0x13, 0x30, 0xdb, 0x8d, 0x0e, 0x55, 0xe3, 0x2f,
	0xf8, 0x4d, 0xcf, 0x00, 0xbc, 0xee, 0x46, 0x87, 0x85, 0x79, 0xad, 0x02, 0x12, 0x38, 0xd2, 0x29,
	0x20, 0x05, 0xad, 0x02, 0xa2, 0x48, 0x75, 0x0a, 0x88, 0x43, 0xaf, 0x20, 0x29, 0x3e, 0xd6, 0x2a,
	0x48, 0xaa, 0x57, 0x40, 0x38, 0x5f, 0xe8, 0x14, 0x10, 0xd0, 0x2a, 0x2c, 0x4e, 0xab, 0x0a, 0x87,
	0xe1, 0x1f, 0xf1, 0x94, 0x16, 0xca, 0x02, 0x35, 0x29, 0x8e, 0x5a, 0x91, 0xfb, 0x85, 0x4c, 0xea,
	0xc7, 0x45, 0x0b, 0x1c, 0x1e, 0x40, 0x4d, 0x29, 0x29, 0x55, 0x01, 0x49, 0xfd, 0x44, 0xa7, 0x28,
	0x25, 0xa5, 0x2a, 0x20, 0xa9, 0x9f, 0xea, 0x14, 0xa5, 0xa4, 0x4a, 0x0a, 0x92, 0xe2, 0x9f, 0x69,
	0x15, 0x7c, 0x75, 0xa5, 0x51, 0x40, 0x52, 0x3f, 0x6f, 0xe9, 0x24, 0x62, 0x75, 0xb5, 0x58, 0x97,
	0x38, 0x0c, 0xff, 0xa2, 0x55, 0x64, 0x55, 0x28, 0xfa, 0xcc, 0xe8, 0xa2, 0x39, 0xcf, 0x7a, 0x3e,
	0xb4, 0x1c, 0x39, 0x79, 0xff, 0x52, 0xdc, 0x7a, 0xd6, 0x7b, 0x3a, 0xec, 0x8b, 0x39, 0xfb, 0x0d,
	0x18, 0x9e, 0x07, 0xc9, 0x68, 0x64, 0x45, 0x43, 0xe2, 0x73, 0xe8, 0x57, 0x2d, 0xb9, 0xd1, 0x7c,
	0x90, 0x8c, 0x46, 0x83, 0x21, 0xf1, 0xcb, 0xdc, 0xe7, 0x81, 0x2b, 0xb8, 0x5f, 0xab, 0xdc, 0xa3,
	0xc0, 0x2d, 0x38, 0xa5, 0x8b, 0x89, 0x87, 0x7f, 0x93, 0x71, 0x79, 0xef, 0xb2, 0xb5, 0x42, 0xc1,
	0x05, 0xbe, 0x78, 0xfc, 0xc0, 0xff, 0xb6, 0x25, 0x17, 0xe4, 0x19, 0xbf, 0xe3, 0xc3, 0x00, 0x10,
	0x7b, 0xec, 0x79, 0xcf, 0x3a, 0x70, 0x47, 0x34, 0x0a, 0x42, 0xe1, 0xe8, 0x77, 0x79, 0x27, 0x64,
	0xa9, 0xd8, 0x56, 0x2c, 0x29, 0x98, 0x7a, 0xef, 0xdf, 0x67, 0xf7, 0xce, 0xf0, 0xe2, 0xde, 0x1f,
	0xa3, 0x8b, 0x9e, 0x15, 0xd1, 0x11, 0x1d, 0xc6, 0xc2, 0x68, 0x48, 0x7c, 0x46, 0x0b, 0xbb, 0x7f,
	0x68, 0xc9, 0x19, 0x6f, 0xc0, 0x19, 0x30, 0x6d, 0x02, 0x91, 0x39, 0x7f, 0x1b, 0x66, 0x00, 0xa9,
	0x17, 0x52, 0x50, 0xfd, 0xb1, 0x25, 0xa7, 0x00, 0xa1, 0xe2, 0x0a, 0xa0, 0x6f, 0x23, 0x5c, 0xa1,
	0x87, 0x0e, 0x1d, 0x8a, 0x4e, 0xfe, 0x49, 0x68, 0x16, 0x55, 0xcd, 0x7d, 0xa8, 0x05, 0x61, 0x0f,
	0x7e, 0x78, 0xb8, 0xaf, 0xa2, 0x91, 0x3f, 0xb7, 0xe4, 0x2f, 0xcf, 0x20, 0x08, 0x8b, 0x26, 0xf8,
	0xa3, 0x10, 0x24, 0xff, 0x70, 0x96, 0x78, 0xf8, 0x2f, 0x59, 0x5a, 0x1c, 0x0c, 0x8e, 0xa2, 0x32,
	0x97, 0x0f, 0x81, 0xbf, 0xaa, 0x5c, 0x36, 0x04, 0xf8, 0xa7, 0x18, 0x3f, 0xb0, 0x5c, 0xdf, 0xa6,
	0xa9, 0x95, 0x44, 0xf2, 0xbb, 0xd0, 0xdf, 0x32, 0x87, 0x8f, 0x83, 0x4d, 0xa8, 0x79, 0x16, 0x89,
	0xef, 0x42, 0xef, 0x83, 0x43, 0x3f, 0xb0, 0x58, 0x10, 0xd8, 0x55, 0xcd, 0xdf, 0x85, 0xe6, 0xac,
	0xf7, 0x38, 0x78, 0x18, 0x04, 0x76, 0x49, 0xb7, 0x8c, 0x66, 0x58, 0x38, 0x8e, 0xe2, 0x10, 0xff,
	0x43, 0x9c, 0xa2, 0xc8, 0x4b, 0x59, 0xe1, 0xfa, 0x31, 0xfe, 0x67, 0x8b, 0x7f, 0xa6, 0x95, 0x97,
	0xc6, 0x1d, 0x7e, 0xb8, 0x02, 0x15, 0xff, 0x6a, 0x7d, 0xc9, 0xe9, 0x8a, 0xeb, 0xc7, 0xc5, 0xe9,
	0x8a, 0xeb, 0xc7, 0x17, 0xd6, 0x50, 0x5b, 0x39, 0x74, 0x99, 0x7c, 0xb6, 0xd5, 0xca, 0xcf, 0xb6,
	0xee, 0x4c, 0x7d, 0xd0, 0xba, 0xf0, 0x21, 0xea, 0x94, 0x3e, 0xee, 0x7f, 0x99, 0xf8, 0x84, 0x2a,
	0x5e, 0x43, 0x6d, 0xe5, 0x3b, 0xfd, 0x57, 0x95, 0x2a, 0x4e, 0x54, 0x69, 0x47, 0x23, 0xed, 0x28,
	0xd2, 0x95, 0x1e, 0xea, 0x94, 0x8e, 0x67, 0x8c, 0x36, 0x3a, 0xb9, 0xf1, 0xe9, 0xdd, 0xed, 0x27,
	0x5b, 0x1b, 0x0b, 0x2f, 0x19, 0x08, 0xcd, 0xac, 0x6f, 0x3e, 0xdc, 0x18, 0xec, 0x2e, 0xb4, 0x56,
	0xee, 0xa3, 0xb6, 0x72, 0xb6, 0x02, 0x55, 0xe6, 0xdd, 0xc7, 0xeb, 0x3b, 0xdb, 0x0b, 0x2f, 0x81,
	0x66, 0xb0, 0xb5, 0xb3, 0xc7, 0x39, 0xb8, 0x78, 0x70, 0x77, 0xb0, 0x0b, 0x17, 0x53, 0xc6, 0x3c,
	0x42, 0x7b, 0x9b, 0xbb, 0x7d, 0x6b, 0xc3, 0x34, 0x77, 0xcc, 0x85, 0xe9, 0x9b, 0x3b, 0xe8, 0x64,
	0x76, 0xcc, 0xb2, 0x8e, 0x8c, 0x87, 0x34, 0x96, 0x57, 0xf7, 0x8e, 0xd7, 0xc5, 0xc9, 0xdf, 0x72,
	0xfd, 0x41, 0xf1, 0xa3, 0xcf, 0x0b, 0xe7, 0xb4, 0x4f, 0xf0, 0xde, 0xec, 0x67, 0xd9, 0x79, 0xe9,
	0xfe, 0x0c, 0x3f, 0x3f, 0xbd, 0xf5, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2c, 0xe7, 0xbc, 0x62,
	0x5c, 0x1d, 0x00, 0x00,
}
