// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/collector/collector.proto

package collector

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type QueryClass_ExampleFormat int32

const (
	QueryClass_EXAMPLE QueryClass_ExampleFormat = 0
	QueryClass_DIGEST  QueryClass_ExampleFormat = 1
)

var QueryClass_ExampleFormat_name = map[int32]string{
	0: "EXAMPLE",
	1: "DIGEST",
}
var QueryClass_ExampleFormat_value = map[string]int32{
	"EXAMPLE": 0,
	"DIGEST":  1,
}

func (x QueryClass_ExampleFormat) String() string {
	return proto.EnumName(QueryClass_ExampleFormat_name, int32(x))
}
func (QueryClass_ExampleFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_collector_1fecf70772fb56c1, []int{1, 0}
}

type QueryClass_ExampleType int32

const (
	QueryClass_RANDOM     QueryClass_ExampleType = 0
	QueryClass_SLOWEST    QueryClass_ExampleType = 1
	QueryClass_FASTEST    QueryClass_ExampleType = 2
	QueryClass_WITH_ERROR QueryClass_ExampleType = 3
)

var QueryClass_ExampleType_name = map[int32]string{
	0: "RANDOM",
	1: "SLOWEST",
	2: "FASTEST",
	3: "WITH_ERROR",
}
var QueryClass_ExampleType_value = map[string]int32{
	"RANDOM":     0,
	"SLOWEST":    1,
	"FASTEST":    2,
	"WITH_ERROR": 3,
}

func (x QueryClass_ExampleType) String() string {
	return proto.EnumName(QueryClass_ExampleType_name, int32(x))
}
func (QueryClass_ExampleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_collector_1fecf70772fb56c1, []int{1, 1}
}

type AgentMessage struct {
	QueryClass           []*QueryClass `protobuf:"bytes,1,rep,name=query_class,json=queryClass,proto3" json:"query_class,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *AgentMessage) Reset()         { *m = AgentMessage{} }
func (m *AgentMessage) String() string { return proto.CompactTextString(m) }
func (*AgentMessage) ProtoMessage()    {}
func (*AgentMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_collector_1fecf70772fb56c1, []int{0}
}
func (m *AgentMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AgentMessage.Unmarshal(m, b)
}
func (m *AgentMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AgentMessage.Marshal(b, m, deterministic)
}
func (dst *AgentMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentMessage.Merge(dst, src)
}
func (m *AgentMessage) XXX_Size() int {
	return xxx_messageInfo_AgentMessage.Size(m)
}
func (m *AgentMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentMessage.DiscardUnknown(m)
}

var xxx_messageInfo_AgentMessage proto.InternalMessageInfo

func (m *AgentMessage) GetQueryClass() []*QueryClass {
	if m != nil {
		return m.QueryClass
	}
	return nil
}

type QueryClass struct {
	Id                   uint32                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Digest               string                   `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
	DigestText           string                   `protobuf:"bytes,3,opt,name=digest_text,json=digestText,proto3" json:"digest_text,omitempty"`
	DbServer             string                   `protobuf:"bytes,4,opt,name=db_server,json=dbServer,proto3" json:"db_server,omitempty"`
	DbSchema             string                   `protobuf:"bytes,5,opt,name=db_schema,json=dbSchema,proto3" json:"db_schema,omitempty"`
	DbUsername           string                   `protobuf:"bytes,6,opt,name=db_username,json=dbUsername,proto3" json:"db_username,omitempty"`
	ClientHost           string                   `protobuf:"bytes,7,opt,name=client_host,json=clientHost,proto3" json:"client_host,omitempty"`
	Labels               map[string]string        `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AgentUuid            string                   `protobuf:"bytes,9,opt,name=agent_uuid,json=agentUuid,proto3" json:"agent_uuid,omitempty"`
	PeriodStart          int64                    `protobuf:"varint,10,opt,name=period_start,json=periodStart,proto3" json:"period_start,omitempty"`
	PeriodLength         uint32                   `protobuf:"varint,11,opt,name=period_length,json=periodLength,proto3" json:"period_length,omitempty"`
	Example              string                   `protobuf:"bytes,12,opt,name=example,proto3" json:"example,omitempty"`
	ExampleFormat        QueryClass_ExampleFormat `protobuf:"varint,13,opt,name=example_format,json=exampleFormat,proto3,enum=collector.QueryClass_ExampleFormat" json:"example_format,omitempty"`
	IsTruncated          uint32                   `protobuf:"varint,14,opt,name=is_truncated,json=isTruncated,proto3" json:"is_truncated,omitempty"`
	ExampleType          QueryClass_ExampleType   `protobuf:"varint,15,opt,name=example_type,json=exampleType,proto3,enum=collector.QueryClass_ExampleType" json:"example_type,omitempty"`
	ExampleMetrics       string                   `protobuf:"bytes,16,opt,name=example_metrics,json=exampleMetrics,proto3" json:"example_metrics,omitempty"`
	NumQueryWithWarnings uint64                   `protobuf:"varint,17,opt,name=num_query_with_warnings,json=numQueryWithWarnings,proto3" json:"num_query_with_warnings,omitempty"`
	// {code: count }
	Warnings           map[string]uint64 `protobuf:"bytes,18,rep,name=warnings,proto3" json:"warnings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	NumQueryWithErrors uint64            `protobuf:"varint,19,opt,name=num_query_with_errors,json=numQueryWithErrors,proto3" json:"num_query_with_errors,omitempty"`
	// {code: count }
	Errors                  map[string]uint64 `protobuf:"bytes,20,rep,name=errors,proto3" json:"errors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	NumQueries              uint64            `protobuf:"varint,21,opt,name=num_queries,json=numQueries,proto3" json:"num_queries,omitempty"`
	MQueryTimeCnt           uint32            `protobuf:"varint,22,opt,name=m_query_time_cnt,json=mQueryTimeCnt,proto3" json:"m_query_time_cnt,omitempty"`
	MQueryTimeSum           float32           `protobuf:"fixed32,23,opt,name=m_query_time_sum,json=mQueryTimeSum,proto3" json:"m_query_time_sum,omitempty"`
	MQueryTimeMin           float32           `protobuf:"fixed32,24,opt,name=m_query_time_min,json=mQueryTimeMin,proto3" json:"m_query_time_min,omitempty"`
	MQueryTimeMax           float32           `protobuf:"fixed32,25,opt,name=m_query_time_max,json=mQueryTimeMax,proto3" json:"m_query_time_max,omitempty"`
	MQueryTimeP99           float32           `protobuf:"fixed32,26,opt,name=m_query_time_p99,json=mQueryTimeP99,proto3" json:"m_query_time_p99,omitempty"`
	MQueryTimeHg            []uint32          `protobuf:"varint,27,rep,packed,name=m_query_time_hg,json=mQueryTimeHg,proto3" json:"m_query_time_hg,omitempty"`
	MLockTimeCnt            uint32            `protobuf:"varint,28,opt,name=m_lock_time_cnt,json=mLockTimeCnt,proto3" json:"m_lock_time_cnt,omitempty"`
	MLockTimeSum            float32           `protobuf:"fixed32,29,opt,name=m_lock_time_sum,json=mLockTimeSum,proto3" json:"m_lock_time_sum,omitempty"`
	MLockTimeMin            float32           `protobuf:"fixed32,30,opt,name=m_lock_time_min,json=mLockTimeMin,proto3" json:"m_lock_time_min,omitempty"`
	MLockTimeMax            float32           `protobuf:"fixed32,31,opt,name=m_lock_time_max,json=mLockTimeMax,proto3" json:"m_lock_time_max,omitempty"`
	MLockTimeP99            float32           `protobuf:"fixed32,32,opt,name=m_lock_time_p99,json=mLockTimeP99,proto3" json:"m_lock_time_p99,omitempty"`
	MLockTimeHg             []float32         `protobuf:"fixed32,33,rep,packed,name=m_lock_time_hg,json=mLockTimeHg,proto3" json:"m_lock_time_hg,omitempty"`
	MRowsSentCnt            uint64            `protobuf:"varint,34,opt,name=m_rows_sent_cnt,json=mRowsSentCnt,proto3" json:"m_rows_sent_cnt,omitempty"`
	MRowsSentSum            uint64            `protobuf:"varint,35,opt,name=m_rows_sent_sum,json=mRowsSentSum,proto3" json:"m_rows_sent_sum,omitempty"`
	MRowsSentMin            uint64            `protobuf:"varint,36,opt,name=m_rows_sent_min,json=mRowsSentMin,proto3" json:"m_rows_sent_min,omitempty"`
	MRowsSentMax            uint64            `protobuf:"varint,37,opt,name=m_rows_sent_max,json=mRowsSentMax,proto3" json:"m_rows_sent_max,omitempty"`
	MRowsSentP99            uint64            `protobuf:"varint,38,opt,name=m_rows_sent_p99,json=mRowsSentP99,proto3" json:"m_rows_sent_p99,omitempty"`
	MRowsSentHg             []uint64          `protobuf:"varint,39,rep,packed,name=m_rows_sent_hg,json=mRowsSentHg,proto3" json:"m_rows_sent_hg,omitempty"`
	MRowsExaminedCnt        uint64            `protobuf:"varint,40,opt,name=m_rows_examined_cnt,json=mRowsExaminedCnt,proto3" json:"m_rows_examined_cnt,omitempty"`
	MRowsExaminedSum        uint64            `protobuf:"varint,41,opt,name=m_rows_examined_sum,json=mRowsExaminedSum,proto3" json:"m_rows_examined_sum,omitempty"`
	MRowsExaminedMin        uint64            `protobuf:"varint,42,opt,name=m_rows_examined_min,json=mRowsExaminedMin,proto3" json:"m_rows_examined_min,omitempty"`
	MRowsExaminedMax        uint64            `protobuf:"varint,43,opt,name=m_rows_examined_max,json=mRowsExaminedMax,proto3" json:"m_rows_examined_max,omitempty"`
	MRowsExaminedP99        uint64            `protobuf:"varint,44,opt,name=m_rows_examined_p99,json=mRowsExaminedP99,proto3" json:"m_rows_examined_p99,omitempty"`
	MRowsExaminedHg         []uint64          `protobuf:"varint,45,rep,packed,name=m_rows_examined_hg,json=mRowsExaminedHg,proto3" json:"m_rows_examined_hg,omitempty"`
	MRowsAffectedCnt        uint64            `protobuf:"varint,46,opt,name=m_rows_affected_cnt,json=mRowsAffectedCnt,proto3" json:"m_rows_affected_cnt,omitempty"`
	MRowsAffectedSum        uint64            `protobuf:"varint,47,opt,name=m_rows_affected_sum,json=mRowsAffectedSum,proto3" json:"m_rows_affected_sum,omitempty"`
	MRowsAffectedMin        uint64            `protobuf:"varint,48,opt,name=m_rows_affected_min,json=mRowsAffectedMin,proto3" json:"m_rows_affected_min,omitempty"`
	MRowsAffectedMax        uint64            `protobuf:"varint,49,opt,name=m_rows_affected_max,json=mRowsAffectedMax,proto3" json:"m_rows_affected_max,omitempty"`
	MRowsAffectedP99        uint64            `protobuf:"varint,50,opt,name=m_rows_affected_p99,json=mRowsAffectedP99,proto3" json:"m_rows_affected_p99,omitempty"`
	MRowsAffectedHg         []uint64          `protobuf:"varint,51,rep,packed,name=m_rows_affected_hg,json=mRowsAffectedHg,proto3" json:"m_rows_affected_hg,omitempty"`
	MRowsReadCnt            uint64            `protobuf:"varint,52,opt,name=m_rows_read_cnt,json=mRowsReadCnt,proto3" json:"m_rows_read_cnt,omitempty"`
	MRowsReadSum            uint64            `protobuf:"varint,53,opt,name=m_rows_read_sum,json=mRowsReadSum,proto3" json:"m_rows_read_sum,omitempty"`
	MRowsReadMin            uint64            `protobuf:"varint,54,opt,name=m_rows_read_min,json=mRowsReadMin,proto3" json:"m_rows_read_min,omitempty"`
	MRowsReadMax            uint64            `protobuf:"varint,55,opt,name=m_rows_read_max,json=mRowsReadMax,proto3" json:"m_rows_read_max,omitempty"`
	MRowsReadP99            uint64            `protobuf:"varint,56,opt,name=m_rows_read_p99,json=mRowsReadP99,proto3" json:"m_rows_read_p99,omitempty"`
	MRowsReadHg             []uint64          `protobuf:"varint,57,rep,packed,name=m_rows_read_hg,json=mRowsReadHg,proto3" json:"m_rows_read_hg,omitempty"`
	MMergePassesCnt         uint64            `protobuf:"varint,58,opt,name=m_merge_passes_cnt,json=mMergePassesCnt,proto3" json:"m_merge_passes_cnt,omitempty"`
	MMergePassesSum         uint64            `protobuf:"varint,59,opt,name=m_merge_passes_sum,json=mMergePassesSum,proto3" json:"m_merge_passes_sum,omitempty"`
	MMergePassesMin         uint64            `protobuf:"varint,60,opt,name=m_merge_passes_min,json=mMergePassesMin,proto3" json:"m_merge_passes_min,omitempty"`
	MMergePassesMax         uint64            `protobuf:"varint,61,opt,name=m_merge_passes_max,json=mMergePassesMax,proto3" json:"m_merge_passes_max,omitempty"`
	MMergePassesP99         uint64            `protobuf:"varint,62,opt,name=m_merge_passes_p99,json=mMergePassesP99,proto3" json:"m_merge_passes_p99,omitempty"`
	MMergePassesHg          []uint64          `protobuf:"varint,63,rep,packed,name=m_merge_passes_hg,json=mMergePassesHg,proto3" json:"m_merge_passes_hg,omitempty"`
	MInnodbIoROpsCnt        uint64            `protobuf:"varint,64,opt,name=m_innodb_io_r_ops_cnt,json=mInnodbIoROpsCnt,proto3" json:"m_innodb_io_r_ops_cnt,omitempty"`
	MInnodbIoROpsSum        uint64            `protobuf:"varint,65,opt,name=m_innodb_io_r_ops_sum,json=mInnodbIoROpsSum,proto3" json:"m_innodb_io_r_ops_sum,omitempty"`
	MInnodbIoROpsMin        uint64            `protobuf:"varint,66,opt,name=m_innodb_io_r_ops_min,json=mInnodbIoROpsMin,proto3" json:"m_innodb_io_r_ops_min,omitempty"`
	MInnodbIoROpsMax        uint64            `protobuf:"varint,67,opt,name=m_innodb_io_r_ops_max,json=mInnodbIoROpsMax,proto3" json:"m_innodb_io_r_ops_max,omitempty"`
	MInnodbIoROpsP99        uint64            `protobuf:"varint,68,opt,name=m_innodb_io_r_ops_p99,json=mInnodbIoROpsP99,proto3" json:"m_innodb_io_r_ops_p99,omitempty"`
	MInnodbIoROpsHg         []uint64          `protobuf:"varint,69,rep,packed,name=m_innodb_io_r_ops_hg,json=mInnodbIoROpsHg,proto3" json:"m_innodb_io_r_ops_hg,omitempty"`
	MInnodbIoRBytesCnt      uint64            `protobuf:"varint,70,opt,name=m_innodb_io_r_bytes_cnt,json=mInnodbIoRBytesCnt,proto3" json:"m_innodb_io_r_bytes_cnt,omitempty"`
	MInnodbIoRBytesSum      uint64            `protobuf:"varint,71,opt,name=m_innodb_io_r_bytes_sum,json=mInnodbIoRBytesSum,proto3" json:"m_innodb_io_r_bytes_sum,omitempty"`
	MInnodbIoRBytesMin      uint64            `protobuf:"varint,72,opt,name=m_innodb_io_r_bytes_min,json=mInnodbIoRBytesMin,proto3" json:"m_innodb_io_r_bytes_min,omitempty"`
	MInnodbIoRBytesMax      uint64            `protobuf:"varint,73,opt,name=m_innodb_io_r_bytes_max,json=mInnodbIoRBytesMax,proto3" json:"m_innodb_io_r_bytes_max,omitempty"`
	MInnodbIoRBytesP99      uint64            `protobuf:"varint,74,opt,name=m_innodb_io_r_bytes_p99,json=mInnodbIoRBytesP99,proto3" json:"m_innodb_io_r_bytes_p99,omitempty"`
	MInnodbIoRBytesHg       []uint64          `protobuf:"varint,75,rep,packed,name=m_innodb_io_r_bytes_hg,json=mInnodbIoRBytesHg,proto3" json:"m_innodb_io_r_bytes_hg,omitempty"`
	MInnodbIoRWaitCnt       float32           `protobuf:"fixed32,76,opt,name=m_innodb_io_r_wait_cnt,json=mInnodbIoRWaitCnt,proto3" json:"m_innodb_io_r_wait_cnt,omitempty"`
	MInnodbIoRWaitSum       float32           `protobuf:"fixed32,77,opt,name=m_innodb_io_r_wait_sum,json=mInnodbIoRWaitSum,proto3" json:"m_innodb_io_r_wait_sum,omitempty"`
	MInnodbIoRWaitMin       float32           `protobuf:"fixed32,78,opt,name=m_innodb_io_r_wait_min,json=mInnodbIoRWaitMin,proto3" json:"m_innodb_io_r_wait_min,omitempty"`
	MInnodbIoRWaitMax       float32           `protobuf:"fixed32,79,opt,name=m_innodb_io_r_wait_max,json=mInnodbIoRWaitMax,proto3" json:"m_innodb_io_r_wait_max,omitempty"`
	MInnodbIoRWaitP99       float32           `protobuf:"fixed32,80,opt,name=m_innodb_io_r_wait_p99,json=mInnodbIoRWaitP99,proto3" json:"m_innodb_io_r_wait_p99,omitempty"`
	MInnodbIoRWaitHg        []float32         `protobuf:"fixed32,81,rep,packed,name=m_innodb_io_r_wait_hg,json=mInnodbIoRWaitHg,proto3" json:"m_innodb_io_r_wait_hg,omitempty"`
	MInnodbRecLockWaitCnt   float32           `protobuf:"fixed32,82,opt,name=m_innodb_rec_lock_wait_cnt,json=mInnodbRecLockWaitCnt,proto3" json:"m_innodb_rec_lock_wait_cnt,omitempty"`
	MInnodbRecLockWaitSum   float32           `protobuf:"fixed32,83,opt,name=m_innodb_rec_lock_wait_sum,json=mInnodbRecLockWaitSum,proto3" json:"m_innodb_rec_lock_wait_sum,omitempty"`
	MInnodbRecLockWaitMin   float32           `protobuf:"fixed32,84,opt,name=m_innodb_rec_lock_wait_min,json=mInnodbRecLockWaitMin,proto3" json:"m_innodb_rec_lock_wait_min,omitempty"`
	MInnodbRecLockWaitMax   float32           `protobuf:"fixed32,85,opt,name=m_innodb_rec_lock_wait_max,json=mInnodbRecLockWaitMax,proto3" json:"m_innodb_rec_lock_wait_max,omitempty"`
	MInnodbRecLockWaitP99   float32           `protobuf:"fixed32,86,opt,name=m_innodb_rec_lock_wait_p99,json=mInnodbRecLockWaitP99,proto3" json:"m_innodb_rec_lock_wait_p99,omitempty"`
	MInnodbRecLockWaitHg    []float32         `protobuf:"fixed32,87,rep,packed,name=m_innodb_rec_lock_wait_hg,json=mInnodbRecLockWaitHg,proto3" json:"m_innodb_rec_lock_wait_hg,omitempty"`
	MInnodbQueueWaitCnt     float32           `protobuf:"fixed32,88,opt,name=m_innodb_queue_wait_cnt,json=mInnodbQueueWaitCnt,proto3" json:"m_innodb_queue_wait_cnt,omitempty"`
	MInnodbQueueWaitSum     float32           `protobuf:"fixed32,89,opt,name=m_innodb_queue_wait_sum,json=mInnodbQueueWaitSum,proto3" json:"m_innodb_queue_wait_sum,omitempty"`
	MInnodbQueueWaitMin     float32           `protobuf:"fixed32,90,opt,name=m_innodb_queue_wait_min,json=mInnodbQueueWaitMin,proto3" json:"m_innodb_queue_wait_min,omitempty"`
	MInnodbQueueWaitMax     float32           `protobuf:"fixed32,91,opt,name=m_innodb_queue_wait_max,json=mInnodbQueueWaitMax,proto3" json:"m_innodb_queue_wait_max,omitempty"`
	MInnodbQueueWaitP99     float32           `protobuf:"fixed32,92,opt,name=m_innodb_queue_wait_p99,json=mInnodbQueueWaitP99,proto3" json:"m_innodb_queue_wait_p99,omitempty"`
	MInnodbQueueWaitHg      []float32         `protobuf:"fixed32,93,rep,packed,name=m_innodb_queue_wait_hg,json=mInnodbQueueWaitHg,proto3" json:"m_innodb_queue_wait_hg,omitempty"`
	MInnodbPagesDistinctCnt uint64            `protobuf:"varint,94,opt,name=m_innodb_pages_distinct_cnt,json=mInnodbPagesDistinctCnt,proto3" json:"m_innodb_pages_distinct_cnt,omitempty"`
	MInnodbPagesDistinctSum uint64            `protobuf:"varint,95,opt,name=m_innodb_pages_distinct_sum,json=mInnodbPagesDistinctSum,proto3" json:"m_innodb_pages_distinct_sum,omitempty"`
	MInnodbPagesDistinctMin uint64            `protobuf:"varint,96,opt,name=m_innodb_pages_distinct_min,json=mInnodbPagesDistinctMin,proto3" json:"m_innodb_pages_distinct_min,omitempty"`
	MInnodbPagesDistinctMax uint64            `protobuf:"varint,97,opt,name=m_innodb_pages_distinct_max,json=mInnodbPagesDistinctMax,proto3" json:"m_innodb_pages_distinct_max,omitempty"`
	MInnodbPagesDistinctP99 uint64            `protobuf:"varint,98,opt,name=m_innodb_pages_distinct_p99,json=mInnodbPagesDistinctP99,proto3" json:"m_innodb_pages_distinct_p99,omitempty"`
	MInnodbPagesDistinctHg  []uint64          `protobuf:"varint,99,rep,packed,name=m_innodb_pages_distinct_hg,json=mInnodbPagesDistinctHg,proto3" json:"m_innodb_pages_distinct_hg,omitempty"`
	MQueryLengthCnt         uint64            `protobuf:"varint,100,opt,name=m_query_length_cnt,json=mQueryLengthCnt,proto3" json:"m_query_length_cnt,omitempty"`
	MQueryLengthSum         uint64            `protobuf:"varint,101,opt,name=m_query_length_sum,json=mQueryLengthSum,proto3" json:"m_query_length_sum,omitempty"`
	MQueryLengthMin         uint64            `protobuf:"varint,102,opt,name=m_query_length_min,json=mQueryLengthMin,proto3" json:"m_query_length_min,omitempty"`
	MQueryLengthMax         uint64            `protobuf:"varint,103,opt,name=m_query_length_max,json=mQueryLengthMax,proto3" json:"m_query_length_max,omitempty"`
	MQueryLengthP99         uint64            `protobuf:"varint,104,opt,name=m_query_length_p99,json=mQueryLengthP99,proto3" json:"m_query_length_p99,omitempty"`
	MQueryLengthHg          []uint64          `protobuf:"varint,105,rep,packed,name=m_query_length_hg,json=mQueryLengthHg,proto3" json:"m_query_length_hg,omitempty"`
	MBytesSentCnt           uint64            `protobuf:"varint,106,opt,name=m_bytes_sent_cnt,json=mBytesSentCnt,proto3" json:"m_bytes_sent_cnt,omitempty"`
	MBytesSentSum           uint64            `protobuf:"varint,107,opt,name=m_bytes_sent_sum,json=mBytesSentSum,proto3" json:"m_bytes_sent_sum,omitempty"`
	MBytesSentMin           uint64            `protobuf:"varint,108,opt,name=m_bytes_sent_min,json=mBytesSentMin,proto3" json:"m_bytes_sent_min,omitempty"`
	MBytesSentMax           uint64            `protobuf:"varint,109,opt,name=m_bytes_sent_max,json=mBytesSentMax,proto3" json:"m_bytes_sent_max,omitempty"`
	MBytesSentP99           uint64            `protobuf:"varint,110,opt,name=m_bytes_sent_p99,json=mBytesSentP99,proto3" json:"m_bytes_sent_p99,omitempty"`
	MBytesSentHg            []uint64          `protobuf:"varint,111,rep,packed,name=m_bytes_sent_hg,json=mBytesSentHg,proto3" json:"m_bytes_sent_hg,omitempty"`
	MTmpTablesCnt           uint64            `protobuf:"varint,112,opt,name=m_tmp_tables_cnt,json=mTmpTablesCnt,proto3" json:"m_tmp_tables_cnt,omitempty"`
	MTmpTablesSum           uint64            `protobuf:"varint,113,opt,name=m_tmp_tables_sum,json=mTmpTablesSum,proto3" json:"m_tmp_tables_sum,omitempty"`
	MTmpTablesMin           uint64            `protobuf:"varint,114,opt,name=m_tmp_tables_min,json=mTmpTablesMin,proto3" json:"m_tmp_tables_min,omitempty"`
	MTmpTablesMax           uint64            `protobuf:"varint,115,opt,name=m_tmp_tables_max,json=mTmpTablesMax,proto3" json:"m_tmp_tables_max,omitempty"`
	MTmpTablesP99           uint64            `protobuf:"varint,116,opt,name=m_tmp_tables_p99,json=mTmpTablesP99,proto3" json:"m_tmp_tables_p99,omitempty"`
	MTmpTablesHg            []uint64          `protobuf:"varint,117,rep,packed,name=m_tmp_tables_hg,json=mTmpTablesHg,proto3" json:"m_tmp_tables_hg,omitempty"`
	MTmpDiskTablesCnt       uint64            `protobuf:"varint,118,opt,name=m_tmp_disk_tables_cnt,json=mTmpDiskTablesCnt,proto3" json:"m_tmp_disk_tables_cnt,omitempty"`
	MTmpDiskTablesSum       uint64            `protobuf:"varint,119,opt,name=m_tmp_disk_tables_sum,json=mTmpDiskTablesSum,proto3" json:"m_tmp_disk_tables_sum,omitempty"`
	MTmpDiskTablesMin       uint64            `protobuf:"varint,120,opt,name=m_tmp_disk_tables_min,json=mTmpDiskTablesMin,proto3" json:"m_tmp_disk_tables_min,omitempty"`
	MTmpDiskTablesMax       uint64            `protobuf:"varint,121,opt,name=m_tmp_disk_tables_max,json=mTmpDiskTablesMax,proto3" json:"m_tmp_disk_tables_max,omitempty"`
	MTmpDiskTablesP99       uint64            `protobuf:"varint,122,opt,name=m_tmp_disk_tables_p99,json=mTmpDiskTablesP99,proto3" json:"m_tmp_disk_tables_p99,omitempty"`
	MTmpDiskTablesHg        []uint64          `protobuf:"varint,123,rep,packed,name=m_tmp_disk_tables_hg,json=mTmpDiskTablesHg,proto3" json:"m_tmp_disk_tables_hg,omitempty"`
	MTmpTableSizesCnt       uint64            `protobuf:"varint,124,opt,name=m_tmp_table_sizes_cnt,json=mTmpTableSizesCnt,proto3" json:"m_tmp_table_sizes_cnt,omitempty"`
	MTmpTableSizesSum       uint64            `protobuf:"varint,125,opt,name=m_tmp_table_sizes_sum,json=mTmpTableSizesSum,proto3" json:"m_tmp_table_sizes_sum,omitempty"`
	MTmpTableSizesMin       uint64            `protobuf:"varint,126,opt,name=m_tmp_table_sizes_min,json=mTmpTableSizesMin,proto3" json:"m_tmp_table_sizes_min,omitempty"`
	MTmpTableSizesMax       uint64            `protobuf:"varint,127,opt,name=m_tmp_table_sizes_max,json=mTmpTableSizesMax,proto3" json:"m_tmp_table_sizes_max,omitempty"`
	MTmpTableSizesP99       uint64            `protobuf:"varint,128,opt,name=m_tmp_table_sizes_p99,json=mTmpTableSizesP99,proto3" json:"m_tmp_table_sizes_p99,omitempty"`
	MTmpTableSizesHg        []uint64          `protobuf:"varint,129,rep,packed,name=m_tmp_table_sizes_hg,json=mTmpTableSizesHg,proto3" json:"m_tmp_table_sizes_hg,omitempty"`
	MQcHitSum               uint64            `protobuf:"varint,130,opt,name=m_qc_hit_sum,json=mQcHitSum,proto3" json:"m_qc_hit_sum,omitempty"`
	MFullScanSum            uint64            `protobuf:"varint,131,opt,name=m_full_scan_sum,json=mFullScanSum,proto3" json:"m_full_scan_sum,omitempty"`
	MFullJoinSum            uint64            `protobuf:"varint,132,opt,name=m_full_join_sum,json=mFullJoinSum,proto3" json:"m_full_join_sum,omitempty"`
	MTmpTableSum            uint64            `protobuf:"varint,133,opt,name=m_tmp_table_sum,json=mTmpTableSum,proto3" json:"m_tmp_table_sum,omitempty"`
	MTmpTableOnDiskSum      uint64            `protobuf:"varint,134,opt,name=m_tmp_table_on_disk_sum,json=mTmpTableOnDiskSum,proto3" json:"m_tmp_table_on_disk_sum,omitempty"`
	MFilesortSum            uint64            `protobuf:"varint,135,opt,name=m_filesort_sum,json=mFilesortSum,proto3" json:"m_filesort_sum,omitempty"`
	MFilesortOnDiskSum      uint64            `protobuf:"varint,136,opt,name=m_filesort_on_disk_sum,json=mFilesortOnDiskSum,proto3" json:"m_filesort_on_disk_sum,omitempty"`
	MSelectFullRangeJoinSum uint64            `protobuf:"varint,137,opt,name=m_select_full_range_join_sum,json=mSelectFullRangeJoinSum,proto3" json:"m_select_full_range_join_sum,omitempty"`
	MSelectRangeSum         uint64            `protobuf:"varint,138,opt,name=m_select_range_sum,json=mSelectRangeSum,proto3" json:"m_select_range_sum,omitempty"`
	MSelectRangeCheckSum    uint64            `protobuf:"varint,139,opt,name=m_select_range_check_sum,json=mSelectRangeCheckSum,proto3" json:"m_select_range_check_sum,omitempty"`
	MSortRangeSum           uint64            `protobuf:"varint,140,opt,name=m_sort_range_sum,json=mSortRangeSum,proto3" json:"m_sort_range_sum,omitempty"`
	MSortRowsSum            uint64            `protobuf:"varint,141,opt,name=m_sort_rows_sum,json=mSortRowsSum,proto3" json:"m_sort_rows_sum,omitempty"`
	MSortScanSum            uint64            `protobuf:"varint,142,opt,name=m_sort_scan_sum,json=mSortScanSum,proto3" json:"m_sort_scan_sum,omitempty"`
	MNoIndexUsedSum         uint64            `protobuf:"varint,143,opt,name=m_no_index_used_sum,json=mNoIndexUsedSum,proto3" json:"m_no_index_used_sum,omitempty"`
	MNoGoodIndexUsedSum     uint64            `protobuf:"varint,144,opt,name=m_no_good_index_used_sum,json=mNoGoodIndexUsedSum,proto3" json:"m_no_good_index_used_sum,omitempty"`
	Grpstr                  string            `protobuf:"bytes,145,opt,name=grpstr,proto3" json:"grpstr,omitempty"`
	Grpint                  uint32            `protobuf:"varint,146,opt,name=grpint,proto3" json:"grpint,omitempty"`
	Labint                  map[uint32]uint32 `protobuf:"bytes,147,rep,name=labint,proto3" json:"labint,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral    struct{}          `json:"-"`
	XXX_unrecognized        []byte            `json:"-"`
	XXX_sizecache           int32             `json:"-"`
}

func (m *QueryClass) Reset()         { *m = QueryClass{} }
func (m *QueryClass) String() string { return proto.CompactTextString(m) }
func (*QueryClass) ProtoMessage()    {}
func (*QueryClass) Descriptor() ([]byte, []int) {
	return fileDescriptor_collector_1fecf70772fb56c1, []int{1}
}
func (m *QueryClass) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryClass.Unmarshal(m, b)
}
func (m *QueryClass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryClass.Marshal(b, m, deterministic)
}
func (dst *QueryClass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClass.Merge(dst, src)
}
func (m *QueryClass) XXX_Size() int {
	return xxx_messageInfo_QueryClass.Size(m)
}
func (m *QueryClass) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClass.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClass proto.InternalMessageInfo

func (m *QueryClass) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *QueryClass) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

func (m *QueryClass) GetDigestText() string {
	if m != nil {
		return m.DigestText
	}
	return ""
}

func (m *QueryClass) GetDbServer() string {
	if m != nil {
		return m.DbServer
	}
	return ""
}

func (m *QueryClass) GetDbSchema() string {
	if m != nil {
		return m.DbSchema
	}
	return ""
}

func (m *QueryClass) GetDbUsername() string {
	if m != nil {
		return m.DbUsername
	}
	return ""
}

func (m *QueryClass) GetClientHost() string {
	if m != nil {
		return m.ClientHost
	}
	return ""
}

func (m *QueryClass) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *QueryClass) GetAgentUuid() string {
	if m != nil {
		return m.AgentUuid
	}
	return ""
}

func (m *QueryClass) GetPeriodStart() int64 {
	if m != nil {
		return m.PeriodStart
	}
	return 0
}

func (m *QueryClass) GetPeriodLength() uint32 {
	if m != nil {
		return m.PeriodLength
	}
	return 0
}

func (m *QueryClass) GetExample() string {
	if m != nil {
		return m.Example
	}
	return ""
}

func (m *QueryClass) GetExampleFormat() QueryClass_ExampleFormat {
	if m != nil {
		return m.ExampleFormat
	}
	return QueryClass_EXAMPLE
}

func (m *QueryClass) GetIsTruncated() uint32 {
	if m != nil {
		return m.IsTruncated
	}
	return 0
}

func (m *QueryClass) GetExampleType() QueryClass_ExampleType {
	if m != nil {
		return m.ExampleType
	}
	return QueryClass_RANDOM
}

func (m *QueryClass) GetExampleMetrics() string {
	if m != nil {
		return m.ExampleMetrics
	}
	return ""
}

func (m *QueryClass) GetNumQueryWithWarnings() uint64 {
	if m != nil {
		return m.NumQueryWithWarnings
	}
	return 0
}

func (m *QueryClass) GetWarnings() map[string]uint64 {
	if m != nil {
		return m.Warnings
	}
	return nil
}

func (m *QueryClass) GetNumQueryWithErrors() uint64 {
	if m != nil {
		return m.NumQueryWithErrors
	}
	return 0
}

func (m *QueryClass) GetErrors() map[string]uint64 {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *QueryClass) GetNumQueries() uint64 {
	if m != nil {
		return m.NumQueries
	}
	return 0
}

func (m *QueryClass) GetMQueryTimeCnt() uint32 {
	if m != nil {
		return m.MQueryTimeCnt
	}
	return 0
}

func (m *QueryClass) GetMQueryTimeSum() float32 {
	if m != nil {
		return m.MQueryTimeSum
	}
	return 0
}

func (m *QueryClass) GetMQueryTimeMin() float32 {
	if m != nil {
		return m.MQueryTimeMin
	}
	return 0
}

func (m *QueryClass) GetMQueryTimeMax() float32 {
	if m != nil {
		return m.MQueryTimeMax
	}
	return 0
}

func (m *QueryClass) GetMQueryTimeP99() float32 {
	if m != nil {
		return m.MQueryTimeP99
	}
	return 0
}

func (m *QueryClass) GetMQueryTimeHg() []uint32 {
	if m != nil {
		return m.MQueryTimeHg
	}
	return nil
}

func (m *QueryClass) GetMLockTimeCnt() uint32 {
	if m != nil {
		return m.MLockTimeCnt
	}
	return 0
}

func (m *QueryClass) GetMLockTimeSum() float32 {
	if m != nil {
		return m.MLockTimeSum
	}
	return 0
}

func (m *QueryClass) GetMLockTimeMin() float32 {
	if m != nil {
		return m.MLockTimeMin
	}
	return 0
}

func (m *QueryClass) GetMLockTimeMax() float32 {
	if m != nil {
		return m.MLockTimeMax
	}
	return 0
}

func (m *QueryClass) GetMLockTimeP99() float32 {
	if m != nil {
		return m.MLockTimeP99
	}
	return 0
}

func (m *QueryClass) GetMLockTimeHg() []float32 {
	if m != nil {
		return m.MLockTimeHg
	}
	return nil
}

func (m *QueryClass) GetMRowsSentCnt() uint64 {
	if m != nil {
		return m.MRowsSentCnt
	}
	return 0
}

func (m *QueryClass) GetMRowsSentSum() uint64 {
	if m != nil {
		return m.MRowsSentSum
	}
	return 0
}

func (m *QueryClass) GetMRowsSentMin() uint64 {
	if m != nil {
		return m.MRowsSentMin
	}
	return 0
}

func (m *QueryClass) GetMRowsSentMax() uint64 {
	if m != nil {
		return m.MRowsSentMax
	}
	return 0
}

func (m *QueryClass) GetMRowsSentP99() uint64 {
	if m != nil {
		return m.MRowsSentP99
	}
	return 0
}

func (m *QueryClass) GetMRowsSentHg() []uint64 {
	if m != nil {
		return m.MRowsSentHg
	}
	return nil
}

func (m *QueryClass) GetMRowsExaminedCnt() uint64 {
	if m != nil {
		return m.MRowsExaminedCnt
	}
	return 0
}

func (m *QueryClass) GetMRowsExaminedSum() uint64 {
	if m != nil {
		return m.MRowsExaminedSum
	}
	return 0
}

func (m *QueryClass) GetMRowsExaminedMin() uint64 {
	if m != nil {
		return m.MRowsExaminedMin
	}
	return 0
}

func (m *QueryClass) GetMRowsExaminedMax() uint64 {
	if m != nil {
		return m.MRowsExaminedMax
	}
	return 0
}

func (m *QueryClass) GetMRowsExaminedP99() uint64 {
	if m != nil {
		return m.MRowsExaminedP99
	}
	return 0
}

func (m *QueryClass) GetMRowsExaminedHg() []uint64 {
	if m != nil {
		return m.MRowsExaminedHg
	}
	return nil
}

func (m *QueryClass) GetMRowsAffectedCnt() uint64 {
	if m != nil {
		return m.MRowsAffectedCnt
	}
	return 0
}

func (m *QueryClass) GetMRowsAffectedSum() uint64 {
	if m != nil {
		return m.MRowsAffectedSum
	}
	return 0
}

func (m *QueryClass) GetMRowsAffectedMin() uint64 {
	if m != nil {
		return m.MRowsAffectedMin
	}
	return 0
}

func (m *QueryClass) GetMRowsAffectedMax() uint64 {
	if m != nil {
		return m.MRowsAffectedMax
	}
	return 0
}

func (m *QueryClass) GetMRowsAffectedP99() uint64 {
	if m != nil {
		return m.MRowsAffectedP99
	}
	return 0
}

func (m *QueryClass) GetMRowsAffectedHg() []uint64 {
	if m != nil {
		return m.MRowsAffectedHg
	}
	return nil
}

func (m *QueryClass) GetMRowsReadCnt() uint64 {
	if m != nil {
		return m.MRowsReadCnt
	}
	return 0
}

func (m *QueryClass) GetMRowsReadSum() uint64 {
	if m != nil {
		return m.MRowsReadSum
	}
	return 0
}

func (m *QueryClass) GetMRowsReadMin() uint64 {
	if m != nil {
		return m.MRowsReadMin
	}
	return 0
}

func (m *QueryClass) GetMRowsReadMax() uint64 {
	if m != nil {
		return m.MRowsReadMax
	}
	return 0
}

func (m *QueryClass) GetMRowsReadP99() uint64 {
	if m != nil {
		return m.MRowsReadP99
	}
	return 0
}

func (m *QueryClass) GetMRowsReadHg() []uint64 {
	if m != nil {
		return m.MRowsReadHg
	}
	return nil
}

func (m *QueryClass) GetMMergePassesCnt() uint64 {
	if m != nil {
		return m.MMergePassesCnt
	}
	return 0
}

func (m *QueryClass) GetMMergePassesSum() uint64 {
	if m != nil {
		return m.MMergePassesSum
	}
	return 0
}

func (m *QueryClass) GetMMergePassesMin() uint64 {
	if m != nil {
		return m.MMergePassesMin
	}
	return 0
}

func (m *QueryClass) GetMMergePassesMax() uint64 {
	if m != nil {
		return m.MMergePassesMax
	}
	return 0
}

func (m *QueryClass) GetMMergePassesP99() uint64 {
	if m != nil {
		return m.MMergePassesP99
	}
	return 0
}

func (m *QueryClass) GetMMergePassesHg() []uint64 {
	if m != nil {
		return m.MMergePassesHg
	}
	return nil
}

func (m *QueryClass) GetMInnodbIoROpsCnt() uint64 {
	if m != nil {
		return m.MInnodbIoROpsCnt
	}
	return 0
}

func (m *QueryClass) GetMInnodbIoROpsSum() uint64 {
	if m != nil {
		return m.MInnodbIoROpsSum
	}
	return 0
}

func (m *QueryClass) GetMInnodbIoROpsMin() uint64 {
	if m != nil {
		return m.MInnodbIoROpsMin
	}
	return 0
}

func (m *QueryClass) GetMInnodbIoROpsMax() uint64 {
	if m != nil {
		return m.MInnodbIoROpsMax
	}
	return 0
}

func (m *QueryClass) GetMInnodbIoROpsP99() uint64 {
	if m != nil {
		return m.MInnodbIoROpsP99
	}
	return 0
}

func (m *QueryClass) GetMInnodbIoROpsHg() []uint64 {
	if m != nil {
		return m.MInnodbIoROpsHg
	}
	return nil
}

func (m *QueryClass) GetMInnodbIoRBytesCnt() uint64 {
	if m != nil {
		return m.MInnodbIoRBytesCnt
	}
	return 0
}

func (m *QueryClass) GetMInnodbIoRBytesSum() uint64 {
	if m != nil {
		return m.MInnodbIoRBytesSum
	}
	return 0
}

func (m *QueryClass) GetMInnodbIoRBytesMin() uint64 {
	if m != nil {
		return m.MInnodbIoRBytesMin
	}
	return 0
}

func (m *QueryClass) GetMInnodbIoRBytesMax() uint64 {
	if m != nil {
		return m.MInnodbIoRBytesMax
	}
	return 0
}

func (m *QueryClass) GetMInnodbIoRBytesP99() uint64 {
	if m != nil {
		return m.MInnodbIoRBytesP99
	}
	return 0
}

func (m *QueryClass) GetMInnodbIoRBytesHg() []uint64 {
	if m != nil {
		return m.MInnodbIoRBytesHg
	}
	return nil
}

func (m *QueryClass) GetMInnodbIoRWaitCnt() float32 {
	if m != nil {
		return m.MInnodbIoRWaitCnt
	}
	return 0
}

func (m *QueryClass) GetMInnodbIoRWaitSum() float32 {
	if m != nil {
		return m.MInnodbIoRWaitSum
	}
	return 0
}

func (m *QueryClass) GetMInnodbIoRWaitMin() float32 {
	if m != nil {
		return m.MInnodbIoRWaitMin
	}
	return 0
}

func (m *QueryClass) GetMInnodbIoRWaitMax() float32 {
	if m != nil {
		return m.MInnodbIoRWaitMax
	}
	return 0
}

func (m *QueryClass) GetMInnodbIoRWaitP99() float32 {
	if m != nil {
		return m.MInnodbIoRWaitP99
	}
	return 0
}

func (m *QueryClass) GetMInnodbIoRWaitHg() []float32 {
	if m != nil {
		return m.MInnodbIoRWaitHg
	}
	return nil
}

func (m *QueryClass) GetMInnodbRecLockWaitCnt() float32 {
	if m != nil {
		return m.MInnodbRecLockWaitCnt
	}
	return 0
}

func (m *QueryClass) GetMInnodbRecLockWaitSum() float32 {
	if m != nil {
		return m.MInnodbRecLockWaitSum
	}
	return 0
}

func (m *QueryClass) GetMInnodbRecLockWaitMin() float32 {
	if m != nil {
		return m.MInnodbRecLockWaitMin
	}
	return 0
}

func (m *QueryClass) GetMInnodbRecLockWaitMax() float32 {
	if m != nil {
		return m.MInnodbRecLockWaitMax
	}
	return 0
}

func (m *QueryClass) GetMInnodbRecLockWaitP99() float32 {
	if m != nil {
		return m.MInnodbRecLockWaitP99
	}
	return 0
}

func (m *QueryClass) GetMInnodbRecLockWaitHg() []float32 {
	if m != nil {
		return m.MInnodbRecLockWaitHg
	}
	return nil
}

func (m *QueryClass) GetMInnodbQueueWaitCnt() float32 {
	if m != nil {
		return m.MInnodbQueueWaitCnt
	}
	return 0
}

func (m *QueryClass) GetMInnodbQueueWaitSum() float32 {
	if m != nil {
		return m.MInnodbQueueWaitSum
	}
	return 0
}

func (m *QueryClass) GetMInnodbQueueWaitMin() float32 {
	if m != nil {
		return m.MInnodbQueueWaitMin
	}
	return 0
}

func (m *QueryClass) GetMInnodbQueueWaitMax() float32 {
	if m != nil {
		return m.MInnodbQueueWaitMax
	}
	return 0
}

func (m *QueryClass) GetMInnodbQueueWaitP99() float32 {
	if m != nil {
		return m.MInnodbQueueWaitP99
	}
	return 0
}

func (m *QueryClass) GetMInnodbQueueWaitHg() []float32 {
	if m != nil {
		return m.MInnodbQueueWaitHg
	}
	return nil
}

func (m *QueryClass) GetMInnodbPagesDistinctCnt() uint64 {
	if m != nil {
		return m.MInnodbPagesDistinctCnt
	}
	return 0
}

func (m *QueryClass) GetMInnodbPagesDistinctSum() uint64 {
	if m != nil {
		return m.MInnodbPagesDistinctSum
	}
	return 0
}

func (m *QueryClass) GetMInnodbPagesDistinctMin() uint64 {
	if m != nil {
		return m.MInnodbPagesDistinctMin
	}
	return 0
}

func (m *QueryClass) GetMInnodbPagesDistinctMax() uint64 {
	if m != nil {
		return m.MInnodbPagesDistinctMax
	}
	return 0
}

func (m *QueryClass) GetMInnodbPagesDistinctP99() uint64 {
	if m != nil {
		return m.MInnodbPagesDistinctP99
	}
	return 0
}

func (m *QueryClass) GetMInnodbPagesDistinctHg() []uint64 {
	if m != nil {
		return m.MInnodbPagesDistinctHg
	}
	return nil
}

func (m *QueryClass) GetMQueryLengthCnt() uint64 {
	if m != nil {
		return m.MQueryLengthCnt
	}
	return 0
}

func (m *QueryClass) GetMQueryLengthSum() uint64 {
	if m != nil {
		return m.MQueryLengthSum
	}
	return 0
}

func (m *QueryClass) GetMQueryLengthMin() uint64 {
	if m != nil {
		return m.MQueryLengthMin
	}
	return 0
}

func (m *QueryClass) GetMQueryLengthMax() uint64 {
	if m != nil {
		return m.MQueryLengthMax
	}
	return 0
}

func (m *QueryClass) GetMQueryLengthP99() uint64 {
	if m != nil {
		return m.MQueryLengthP99
	}
	return 0
}

func (m *QueryClass) GetMQueryLengthHg() []uint64 {
	if m != nil {
		return m.MQueryLengthHg
	}
	return nil
}

func (m *QueryClass) GetMBytesSentCnt() uint64 {
	if m != nil {
		return m.MBytesSentCnt
	}
	return 0
}

func (m *QueryClass) GetMBytesSentSum() uint64 {
	if m != nil {
		return m.MBytesSentSum
	}
	return 0
}

func (m *QueryClass) GetMBytesSentMin() uint64 {
	if m != nil {
		return m.MBytesSentMin
	}
	return 0
}

func (m *QueryClass) GetMBytesSentMax() uint64 {
	if m != nil {
		return m.MBytesSentMax
	}
	return 0
}

func (m *QueryClass) GetMBytesSentP99() uint64 {
	if m != nil {
		return m.MBytesSentP99
	}
	return 0
}

func (m *QueryClass) GetMBytesSentHg() []uint64 {
	if m != nil {
		return m.MBytesSentHg
	}
	return nil
}

func (m *QueryClass) GetMTmpTablesCnt() uint64 {
	if m != nil {
		return m.MTmpTablesCnt
	}
	return 0
}

func (m *QueryClass) GetMTmpTablesSum() uint64 {
	if m != nil {
		return m.MTmpTablesSum
	}
	return 0
}

func (m *QueryClass) GetMTmpTablesMin() uint64 {
	if m != nil {
		return m.MTmpTablesMin
	}
	return 0
}

func (m *QueryClass) GetMTmpTablesMax() uint64 {
	if m != nil {
		return m.MTmpTablesMax
	}
	return 0
}

func (m *QueryClass) GetMTmpTablesP99() uint64 {
	if m != nil {
		return m.MTmpTablesP99
	}
	return 0
}

func (m *QueryClass) GetMTmpTablesHg() []uint64 {
	if m != nil {
		return m.MTmpTablesHg
	}
	return nil
}

func (m *QueryClass) GetMTmpDiskTablesCnt() uint64 {
	if m != nil {
		return m.MTmpDiskTablesCnt
	}
	return 0
}

func (m *QueryClass) GetMTmpDiskTablesSum() uint64 {
	if m != nil {
		return m.MTmpDiskTablesSum
	}
	return 0
}

func (m *QueryClass) GetMTmpDiskTablesMin() uint64 {
	if m != nil {
		return m.MTmpDiskTablesMin
	}
	return 0
}

func (m *QueryClass) GetMTmpDiskTablesMax() uint64 {
	if m != nil {
		return m.MTmpDiskTablesMax
	}
	return 0
}

func (m *QueryClass) GetMTmpDiskTablesP99() uint64 {
	if m != nil {
		return m.MTmpDiskTablesP99
	}
	return 0
}

func (m *QueryClass) GetMTmpDiskTablesHg() []uint64 {
	if m != nil {
		return m.MTmpDiskTablesHg
	}
	return nil
}

func (m *QueryClass) GetMTmpTableSizesCnt() uint64 {
	if m != nil {
		return m.MTmpTableSizesCnt
	}
	return 0
}

func (m *QueryClass) GetMTmpTableSizesSum() uint64 {
	if m != nil {
		return m.MTmpTableSizesSum
	}
	return 0
}

func (m *QueryClass) GetMTmpTableSizesMin() uint64 {
	if m != nil {
		return m.MTmpTableSizesMin
	}
	return 0
}

func (m *QueryClass) GetMTmpTableSizesMax() uint64 {
	if m != nil {
		return m.MTmpTableSizesMax
	}
	return 0
}

func (m *QueryClass) GetMTmpTableSizesP99() uint64 {
	if m != nil {
		return m.MTmpTableSizesP99
	}
	return 0
}

func (m *QueryClass) GetMTmpTableSizesHg() []uint64 {
	if m != nil {
		return m.MTmpTableSizesHg
	}
	return nil
}

func (m *QueryClass) GetMQcHitSum() uint64 {
	if m != nil {
		return m.MQcHitSum
	}
	return 0
}

func (m *QueryClass) GetMFullScanSum() uint64 {
	if m != nil {
		return m.MFullScanSum
	}
	return 0
}

func (m *QueryClass) GetMFullJoinSum() uint64 {
	if m != nil {
		return m.MFullJoinSum
	}
	return 0
}

func (m *QueryClass) GetMTmpTableSum() uint64 {
	if m != nil {
		return m.MTmpTableSum
	}
	return 0
}

func (m *QueryClass) GetMTmpTableOnDiskSum() uint64 {
	if m != nil {
		return m.MTmpTableOnDiskSum
	}
	return 0
}

func (m *QueryClass) GetMFilesortSum() uint64 {
	if m != nil {
		return m.MFilesortSum
	}
	return 0
}

func (m *QueryClass) GetMFilesortOnDiskSum() uint64 {
	if m != nil {
		return m.MFilesortOnDiskSum
	}
	return 0
}

func (m *QueryClass) GetMSelectFullRangeJoinSum() uint64 {
	if m != nil {
		return m.MSelectFullRangeJoinSum
	}
	return 0
}

func (m *QueryClass) GetMSelectRangeSum() uint64 {
	if m != nil {
		return m.MSelectRangeSum
	}
	return 0
}

func (m *QueryClass) GetMSelectRangeCheckSum() uint64 {
	if m != nil {
		return m.MSelectRangeCheckSum
	}
	return 0
}

func (m *QueryClass) GetMSortRangeSum() uint64 {
	if m != nil {
		return m.MSortRangeSum
	}
	return 0
}

func (m *QueryClass) GetMSortRowsSum() uint64 {
	if m != nil {
		return m.MSortRowsSum
	}
	return 0
}

func (m *QueryClass) GetMSortScanSum() uint64 {
	if m != nil {
		return m.MSortScanSum
	}
	return 0
}

func (m *QueryClass) GetMNoIndexUsedSum() uint64 {
	if m != nil {
		return m.MNoIndexUsedSum
	}
	return 0
}

func (m *QueryClass) GetMNoGoodIndexUsedSum() uint64 {
	if m != nil {
		return m.MNoGoodIndexUsedSum
	}
	return 0
}

func (m *QueryClass) GetGrpstr() string {
	if m != nil {
		return m.Grpstr
	}
	return ""
}

func (m *QueryClass) GetGrpint() uint32 {
	if m != nil {
		return m.Grpint
	}
	return 0
}

func (m *QueryClass) GetLabint() map[uint32]uint32 {
	if m != nil {
		return m.Labint
	}
	return nil
}

type ApiMessage struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApiMessage) Reset()         { *m = ApiMessage{} }
func (m *ApiMessage) String() string { return proto.CompactTextString(m) }
func (*ApiMessage) ProtoMessage()    {}
func (*ApiMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_collector_1fecf70772fb56c1, []int{2}
}
func (m *ApiMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApiMessage.Unmarshal(m, b)
}
func (m *ApiMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApiMessage.Marshal(b, m, deterministic)
}
func (dst *ApiMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiMessage.Merge(dst, src)
}
func (m *ApiMessage) XXX_Size() int {
	return xxx_messageInfo_ApiMessage.Size(m)
}
func (m *ApiMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ApiMessage proto.InternalMessageInfo

func (m *ApiMessage) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*AgentMessage)(nil), "collector.AgentMessage")
	proto.RegisterType((*QueryClass)(nil), "collector.QueryClass")
	proto.RegisterMapType((map[string]uint64)(nil), "collector.QueryClass.ErrorsEntry")
	proto.RegisterMapType((map[string]string)(nil), "collector.QueryClass.LabelsEntry")
	proto.RegisterMapType((map[uint32]uint32)(nil), "collector.QueryClass.LabintEntry")
	proto.RegisterMapType((map[string]uint64)(nil), "collector.QueryClass.WarningsEntry")
	proto.RegisterType((*ApiMessage)(nil), "collector.ApiMessage")
	proto.RegisterEnum("collector.QueryClass_ExampleFormat", QueryClass_ExampleFormat_name, QueryClass_ExampleFormat_value)
	proto.RegisterEnum("collector.QueryClass_ExampleType", QueryClass_ExampleType_name, QueryClass_ExampleType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AgentClient interface {
	DataInterchange(ctx context.Context, opts ...grpc.CallOption) (Agent_DataInterchangeClient, error)
}

type agentClient struct {
	cc *grpc.ClientConn
}

func NewAgentClient(cc *grpc.ClientConn) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) DataInterchange(ctx context.Context, opts ...grpc.CallOption) (Agent_DataInterchangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Agent_serviceDesc.Streams[0], "/collector.Agent/DataInterchange", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentDataInterchangeClient{stream}
	return x, nil
}

type Agent_DataInterchangeClient interface {
	Send(*AgentMessage) error
	Recv() (*ApiMessage, error)
	grpc.ClientStream
}

type agentDataInterchangeClient struct {
	grpc.ClientStream
}

func (x *agentDataInterchangeClient) Send(m *AgentMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *agentDataInterchangeClient) Recv() (*ApiMessage, error) {
	m := new(ApiMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentServer is the server API for Agent service.
type AgentServer interface {
	DataInterchange(Agent_DataInterchangeServer) error
}

func RegisterAgentServer(s *grpc.Server, srv AgentServer) {
	s.RegisterService(&_Agent_serviceDesc, srv)
}

func _Agent_DataInterchange_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServer).DataInterchange(&agentDataInterchangeServer{stream})
}

type Agent_DataInterchangeServer interface {
	Send(*ApiMessage) error
	Recv() (*AgentMessage, error)
	grpc.ServerStream
}

type agentDataInterchangeServer struct {
	grpc.ServerStream
}

func (x *agentDataInterchangeServer) Send(m *ApiMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *agentDataInterchangeServer) Recv() (*AgentMessage, error) {
	m := new(AgentMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Agent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "collector.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DataInterchange",
			Handler:       _Agent_DataInterchange_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/collector/collector.proto",
}

func init() {
	proto.RegisterFile("api/collector/collector.proto", fileDescriptor_collector_1fecf70772fb56c1)
}

var fileDescriptor_collector_1fecf70772fb56c1 = []byte{
	// 2274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x99, 0x79, 0x7f, 0xdb, 0xb6,
	0x19, 0xc7, 0x4b, 0x3b, 0x75, 0x62, 0xc8, 0x57, 0x18, 0x27, 0x46, 0x73, 0xac, 0x8a, 0xb3, 0x36,
	0xea, 0xda, 0xdc, 0x6d, 0x52, 0xa7, 0x5d, 0x3b, 0x37, 0x76, 0x22, 0x67, 0x76, 0x9c, 0x50, 0xca,
	0xdc, 0x9d, 0x1c, 0x44, 0xc1, 0x20, 0x6b, 0x91, 0x94, 0x49, 0x2a, 0xa6, 0xbb, 0xfb, 0xbe, 0xef,
	0x17, 0xb5, 0xb7, 0xb5, 0xcf, 0x03, 0x80, 0x24, 0x48, 0x82, 0xee, 0x67, 0xff, 0x89, 0xc4, 0xf7,
	0x0b, 0xe8, 0xf9, 0x09, 0x14, 0x41, 0x02, 0x5d, 0x21, 0x63, 0xef, 0x96, 0x13, 0x8e, 0x46, 0xd4,
	0x49, 0xc2, 0xa8, 0xf8, 0x74, 0x73, 0x1c, 0x85, 0x49, 0x68, 0xce, 0xe6, 0x27, 0x56, 0x1f, 0xa3,
	0xb9, 0x75, 0x46, 0x83, 0x64, 0x87, 0xc6, 0x31, 0x61, 0xd4, 0xbc, 0x8f, 0x5a, 0x87, 0x13, 0x1a,
	0x1d, 0xdb, 0xce, 0x88, 0xc4, 0x31, 0x36, 0xda, 0xd3, 0x9d, 0xd6, 0xdd, 0xf3, 0x37, 0x8b, 0x1e,
	0x5e, 0x40, 0xeb, 0x23, 0x68, 0xb4, 0xd0, 0x61, 0xfe, 0x79, 0xf5, 0xbf, 0x0f, 0x10, 0x2a, 0x9a,
	0xcc, 0x05, 0x34, 0xe5, 0x0d, 0xb1, 0xd1, 0x36, 0x3a, 0xf3, 0xd6, 0x94, 0x37, 0x34, 0x2f, 0xa0,
	0x99, 0xa1, 0xc7, 0x68, 0x9c, 0xe0, 0xa9, 0xb6, 0xd1, 0x99, 0xb5, 0xe4, 0x91, 0xf9, 0x26, 0x6a,
	0x89, 0x4f, 0x76, 0x42, 0xd3, 0x04, 0x4f, 0xf3, 0x46, 0x24, 0x4e, 0xf5, 0x69, 0x9a, 0x98, 0x97,
	0xd0, 0xec, 0x70, 0x60, 0xc7, 0x34, 0x7a, 0x45, 0x23, 0x7c, 0x8a, 0x37, 0x9f, 0x19, 0x0e, 0x7a,
	0xfc, 0x38, 0x6b, 0x74, 0x5c, 0xea, 0x13, 0xfc, 0x7a, 0xde, 0xc8, 0x8f, 0x79, 0xd7, 0x03, 0x7b,
	0x12, 0xd3, 0x28, 0x20, 0x3e, 0xc5, 0x33, 0xb2, 0xeb, 0xc1, 0x4b, 0x79, 0x06, 0x00, 0x67, 0xe4,
	0xd1, 0x20, 0xb1, 0xdd, 0x30, 0x4e, 0xf0, 0x69, 0x01, 0x88, 0x53, 0xdd, 0x30, 0x4e, 0xcc, 0x35,
	0x34, 0x33, 0x22, 0x03, 0x3a, 0x8a, 0xf1, 0x19, 0x1e, 0xc3, 0x55, 0x6d, 0x0c, 0x37, 0xb7, 0x39,
	0xb3, 0x19, 0x24, 0xd1, 0xb1, 0x25, 0x05, 0xf3, 0x0a, 0x42, 0x04, 0x62, 0xb5, 0x27, 0x13, 0x6f,
	0x88, 0x67, 0x79, 0xd7, 0xb3, 0xfc, 0xcc, 0xcb, 0x89, 0x37, 0x34, 0xaf, 0xa2, 0xb9, 0x31, 0x8d,
	0xbc, 0x70, 0x68, 0xc7, 0x09, 0x89, 0x12, 0x8c, 0xda, 0x46, 0x67, 0xda, 0x6a, 0x89, 0x73, 0x3d,
	0x38, 0x65, 0x5e, 0x43, 0xf3, 0x12, 0x19, 0xd1, 0x80, 0x25, 0x2e, 0x6e, 0xf1, 0x30, 0xa5, 0xb7,
	0xcd, 0xcf, 0x99, 0x18, 0x9d, 0xa6, 0x29, 0xf1, 0xc7, 0x23, 0x8a, 0xe7, 0xf8, 0x18, 0xd9, 0xa1,
	0xf9, 0x14, 0x2d, 0xc8, 0x8f, 0xf6, 0x7e, 0x18, 0xf9, 0x24, 0xc1, 0xf3, 0x6d, 0xa3, 0xb3, 0x70,
	0xf7, 0x9a, 0xbe, 0x86, 0x4d, 0xc1, 0x3e, 0xe6, 0xa8, 0x35, 0x4f, 0xd5, 0x43, 0xf8, 0xb6, 0x5e,
	0x6c, 0x27, 0xd1, 0x24, 0x70, 0x48, 0x42, 0x87, 0x78, 0x81, 0x7f, 0x93, 0x96, 0x17, 0xf7, 0xb3,
	0x53, 0xe6, 0x06, 0x9a, 0xcb, 0x86, 0x4b, 0x8e, 0xc7, 0x14, 0x2f, 0xf2, 0xc1, 0xae, 0x9e, 0x38,
	0x58, 0xff, 0x78, 0x4c, 0xad, 0x16, 0x2d, 0x0e, 0xcc, 0xeb, 0x68, 0x31, 0xeb, 0xc5, 0xa7, 0x49,
	0xe4, 0x39, 0x31, 0x5e, 0xe2, 0x65, 0x65, 0xb5, 0xec, 0x88, 0xb3, 0xe6, 0x07, 0x68, 0x25, 0x98,
	0xf8, 0xb6, 0x98, 0xa9, 0x47, 0x5e, 0xe2, 0xda, 0x47, 0x24, 0x0a, 0xbc, 0x80, 0xc5, 0xf8, 0x6c,
	0xdb, 0xe8, 0x9c, 0xb2, 0x96, 0x83, 0x89, 0xcf, 0x47, 0xdc, 0xf3, 0x12, 0x77, 0x4f, 0xb6, 0x99,
	0x9f, 0xa2, 0x33, 0x39, 0x67, 0xf2, 0x9f, 0xb4, 0x21, 0x8e, 0xcc, 0x10, 0x3f, 0x6a, 0x2e, 0x99,
	0x77, 0xd0, 0xf9, 0xca, 0xb8, 0x34, 0x8a, 0xc2, 0x28, 0xc6, 0xe7, 0xf8, 0xa8, 0xa6, 0x3a, 0xea,
	0x26, 0x6f, 0x81, 0x49, 0x24, 0x99, 0xe5, 0x93, 0x26, 0x91, 0xa0, 0xe5, 0x24, 0x12, 0x02, 0x4c,
	0xd0, 0x6c, 0x34, 0x8f, 0xc6, 0xf8, 0x3c, 0x1f, 0x03, 0xc9, 0x31, 0x3c, 0x1a, 0x9b, 0xd7, 0xd1,
	0x52, 0xf6, 0x65, 0x12, 0xcf, 0xa7, 0xb6, 0x13, 0x24, 0xf8, 0x02, 0xff, 0x71, 0xe6, 0xc5, 0xf7,
	0xe8, 0x7b, 0x3e, 0x7d, 0x14, 0x24, 0x35, 0x30, 0x9e, 0xf8, 0x78, 0xa5, 0x6d, 0x74, 0xa6, 0x54,
	0xb0, 0x37, 0xf1, 0x6b, 0xa0, 0xef, 0x05, 0x18, 0x57, 0xc1, 0x1d, 0x2f, 0xa8, 0x83, 0x24, 0xc5,
	0x6f, 0xd4, 0x40, 0x92, 0xd6, 0xc0, 0xf1, 0xda, 0x1a, 0xbe, 0x58, 0x05, 0x9f, 0xaf, 0xad, 0x99,
	0x6f, 0xa1, 0xc5, 0x12, 0xe8, 0x32, 0x7c, 0xa9, 0x3d, 0x0d, 0x53, 0xbe, 0xe0, 0xba, 0x4c, 0x60,
	0xa3, 0xd0, 0x39, 0x28, 0x4a, 0xbe, 0x2c, 0xae, 0x0c, 0x7f, 0x3b, 0x74, 0x0e, 0xb2, 0x8a, 0x2b,
	0x18, 0x14, 0x7c, 0x85, 0x8f, 0x5a, 0x60, 0x50, 0x6f, 0x05, 0x83, 0x72, 0xbf, 0x56, 0xc1, 0xa0,
	0xda, 0x2a, 0x46, 0x52, 0xfc, 0x66, 0x15, 0x23, 0x69, 0x15, 0x83, 0x52, 0xdb, 0x15, 0x0c, 0x2a,
	0xbd, 0x86, 0x16, 0x54, 0xcc, 0x65, 0xf8, 0x6a, 0x7b, 0xba, 0x33, 0x65, 0xb5, 0x72, 0x2a, 0xab,
	0x33, 0x0a, 0x8f, 0x62, 0x3b, 0x86, 0xff, 0x11, 0xa8, 0x73, 0x95, 0x4f, 0x80, 0x39, 0xdf, 0x0a,
	0x8f, 0xe2, 0x1e, 0x0d, 0x92, 0xbc, 0xce, 0x02, 0x83, 0x3a, 0xaf, 0x55, 0xb0, 0xbc, 0xce, 0x02,
	0x83, 0x3a, 0xbf, 0x5e, 0xc1, 0xf2, 0x3a, 0x15, 0x8c, 0xa4, 0xf8, 0xad, 0x2a, 0x96, 0xd5, 0x59,
	0x60, 0x50, 0xe7, 0xdb, 0x15, 0x2c, 0xaf, 0xb3, 0xc0, 0x5c, 0x86, 0xaf, 0xb7, 0xa7, 0x3b, 0xa7,
	0xac, 0x56, 0x4e, 0x75, 0x99, 0x79, 0x03, 0x9d, 0x93, 0x10, 0x5c, 0xe3, 0x5e, 0x40, 0x87, 0xbc,
	0xd6, 0x0e, 0xef, 0x6f, 0x89, 0x93, 0x9b, 0xb2, 0x01, 0xea, 0xd5, 0xe0, 0x50, 0xf3, 0x3b, 0x1a,
	0x1c, 0xea, 0xd6, 0xe0, 0x50, 0xfb, 0x37, 0x34, 0x38, 0xd4, 0xaf, 0xc3, 0x49, 0x8a, 0xdf, 0xd5,
	0xe1, 0x24, 0xd5, 0xe1, 0x90, 0xc5, 0x7b, 0x1a, 0x1c, 0xf2, 0x78, 0x17, 0x99, 0x55, 0xdc, 0x65,
	0xf8, 0x06, 0xcf, 0x64, 0xb1, 0x44, 0x97, 0x72, 0x21, 0xfb, 0xfb, 0xd4, 0x49, 0x64, 0x2e, 0x37,
	0x95, 0xbe, 0xd7, 0x65, 0x43, 0x39, 0x97, 0x1c, 0x87, 0x5c, 0x6e, 0x69, 0xf0, 0x72, 0x2e, 0x39,
	0x0e, 0xb9, 0xdc, 0xd6, 0xe0, 0xe5, 0x5c, 0x0a, 0x9c, 0xa4, 0xf8, 0x8e, 0x0e, 0x2f, 0xe5, 0x92,
	0xe3, 0x90, 0xcb, 0x5d, 0x0d, 0x5e, 0xce, 0x25, 0xc7, 0x5d, 0x86, 0xef, 0x29, 0xb9, 0x64, 0x74,
	0xe9, 0xba, 0x88, 0x28, 0x11, 0x99, 0xbc, 0xaf, 0xcc, 0x3d, 0x8b, 0x92, 0x61, 0xf9, 0xba, 0xe0,
	0x18, 0x64, 0xf1, 0x41, 0x05, 0x2b, 0x5f, 0x17, 0x1c, 0x83, 0x0c, 0xee, 0x57, 0xb0, 0xf2, 0x75,
	0x21, 0x30, 0x92, 0xe2, 0x07, 0x55, 0xac, 0x74, 0x5d, 0x70, 0x0c, 0x6a, 0xfe, 0xb0, 0x82, 0x95,
	0xaf, 0x0b, 0x8e, 0xb9, 0x0c, 0xaf, 0x29, 0xd7, 0x05, 0x50, 0x5d, 0x26, 0x42, 0xf1, 0x69, 0xc4,
	0xa8, 0x3d, 0x26, 0x71, 0x4c, 0x63, 0x5e, 0xea, 0x43, 0xde, 0xdd, 0xa2, 0xbf, 0x03, 0x0d, 0xcf,
	0xf9, 0x79, 0xa8, 0xb6, 0x0e, 0x43, 0xc1, 0x1f, 0xd5, 0x61, 0xa8, 0xb9, 0x0e, 0x43, 0xd9, 0x1f,
	0xd7, 0x61, 0xa8, 0x5c, 0x03, 0x93, 0x14, 0x7f, 0x53, 0x03, 0x93, 0x54, 0x03, 0x43, 0x04, 0x9f,
	0xd4, 0x61, 0x48, 0xe1, 0x1d, 0x74, 0xb6, 0x02, 0xbb, 0x0c, 0x7f, 0xca, 0x83, 0x58, 0x50, 0xd9,
	0x2e, 0x33, 0x6f, 0xa1, 0xf3, 0xbe, 0xed, 0x05, 0x41, 0x38, 0x1c, 0xd8, 0x5e, 0x68, 0x47, 0x76,
	0x38, 0x16, 0x71, 0x7c, 0x4b, 0xce, 0xa8, 0x2d, 0xde, 0xb6, 0x15, 0x5a, 0xbb, 0x63, 0x9e, 0x87,
	0x56, 0x80, 0x48, 0xd6, 0x35, 0x02, 0x64, 0xa2, 0x15, 0x20, 0x96, 0xcf, 0x34, 0x02, 0xe4, 0xa2,
	0x17, 0x48, 0x8a, 0x1f, 0xe9, 0x04, 0x92, 0xea, 0x05, 0x88, 0x67, 0x43, 0x23, 0x40, 0x3e, 0x37,
	0xd0, 0x72, 0x5d, 0x70, 0x19, 0xde, 0x94, 0xd7, 0x85, 0xca, 0x77, 0x99, 0x79, 0x0f, 0xad, 0x94,
	0xf1, 0xc1, 0x71, 0x22, 0x27, 0xcd, 0x63, 0xb1, 0x38, 0x29, 0x8c, 0xcf, 0xa0, 0x09, 0x72, 0x6a,
	0x90, 0x20, 0xa9, 0x27, 0x5a, 0x09, 0xb2, 0x6a, 0x90, 0x20, 0xad, 0xae, 0x56, 0x82, 0xbc, 0x9a,
	0x24, 0x92, 0xe2, 0x2d, 0xbd, 0x44, 0xd2, 0x26, 0x09, 0x52, 0x7b, 0xaa, 0x95, 0x20, 0xb7, 0x3b,
	0xe8, 0x82, 0x4e, 0x72, 0x19, 0xfe, 0x36, 0x4f, 0xee, 0x6c, 0xc5, 0xe9, 0xb2, 0xba, 0x72, 0x44,
	0x3c, 0x71, 0xcb, 0xdd, 0xe6, 0xb7, 0x6f, 0x45, 0xd9, 0x23, 0x1e, 0xbf, 0xef, 0xea, 0x15, 0x08,
	0x6e, 0x47, 0xa7, 0x40, 0x6e, 0x7a, 0x05, 0x62, 0x7b, 0xa6, 0x53, 0x20, 0xb5, 0x06, 0x85, 0xa4,
	0x78, 0x57, 0xab, 0x90, 0xb4, 0x41, 0x81, 0xc8, 0x9e, 0xeb, 0x14, 0x48, 0xac, 0x36, 0x35, 0xb9,
	0xe2, 0x32, 0xfc, 0x82, 0x2f, 0x4b, 0x96, 0xca, 0x46, 0x97, 0x99, 0x6b, 0xe8, 0x62, 0x2e, 0x44,
	0xd4, 0x11, 0x6b, 0x99, 0x3c, 0x33, 0x8b, 0x8f, 0x73, 0x5e, 0x5a, 0x16, 0x75, 0x60, 0x55, 0x93,
	0xe5, 0xd6, 0xac, 0x42, 0x76, 0xbd, 0x26, 0x15, 0xf2, 0x6b, 0x56, 0x21, 0xc3, 0x7e, 0x93, 0x0a,
	0x39, 0x9e, 0xa0, 0x92, 0x14, 0xbf, 0x6c, 0x54, 0x49, 0x7a, 0x82, 0x0a, 0x99, 0x7e, 0xa7, 0x49,
	0x85, 0x5c, 0x1f, 0xa0, 0x37, 0x1a, 0x54, 0x97, 0xe1, 0x3d, 0x9e, 0xed, 0x72, 0xdd, 0xec, 0x32,
	0xf3, 0x7d, 0x65, 0xde, 0x1f, 0x4e, 0xe8, 0x84, 0x16, 0xe1, 0x7e, 0xce, 0x07, 0x3c, 0x27, 0xb5,
	0x17, 0xd0, 0x98, 0x45, 0xdb, 0x60, 0x41, 0xae, 0xdf, 0xd5, 0x5b, 0x90, 0x6a, 0x83, 0x05, 0x91,
	0x7e, 0x4f, 0x6f, 0x41, 0xa0, 0x4d, 0x16, 0x49, 0xf1, 0xf7, 0x1b, 0x2c, 0x92, 0x36, 0x59, 0x10,
	0xe4, 0x0f, 0xf4, 0x16, 0xc4, 0x78, 0x57, 0x99, 0xd1, 0x8a, 0xe5, 0x32, 0xfc, 0x43, 0x9e, 0xa1,
	0x59, 0x95, 0xba, 0xcc, 0xfc, 0x18, 0x5d, 0xca, 0x9d, 0x31, 0x61, 0x34, 0xb6, 0x87, 0x5e, 0x9c,
	0x78, 0x81, 0x23, 0x52, 0xfc, 0x11, 0xff, 0xf7, 0x58, 0x91, 0xe2, 0x73, 0x00, 0x36, 0x64, 0x3b,
	0x24, 0x79, 0x82, 0x0d, 0x69, 0xda, 0xcd, 0x36, 0x24, 0x7a, 0x82, 0x0d, 0xa9, 0xfe, 0xb8, 0xd9,
	0x86, 0x64, 0x4f, 0xb2, 0x49, 0x8a, 0xc9, 0x09, 0x36, 0x49, 0x4f, 0xb2, 0x21, 0xe5, 0x41, 0xb3,
	0x0d, 0x49, 0x3f, 0x54, 0xe6, 0x7a, 0xc5, 0x76, 0x19, 0x76, 0xf8, 0xdf, 0xe7, 0x05, 0x9d, 0x9c,
	0xad, 0x57, 0xc4, 0xe3, 0x9b, 0x78, 0x61, 0xc1, 0x83, 0x1e, 0xca, 0x7b, 0x3f, 0x7f, 0x82, 0x13,
	0x2f, 0x2d, 0xf2, 0xf5, 0x4a, 0x09, 0x86, 0x5c, 0x69, 0x1d, 0xce, 0xd7, 0x2b, 0x25, 0x18, 0x62,
	0xdc, 0xaf, 0xc3, 0xf9, 0x7a, 0xa5, 0x0c, 0x93, 0x14, 0x33, 0x0d, 0x9c, 0xad, 0x57, 0x4a, 0x30,
	0x84, 0xe4, 0xd6, 0xe1, 0x7c, 0xbd, 0x52, 0x82, 0x5d, 0x86, 0x3d, 0xb9, 0x5e, 0x51, 0xd8, 0x2e,
	0x13, 0xcf, 0xbc, 0xf2, 0x56, 0x9a, 0x3d, 0xbc, 0x7d, 0xc1, 0x7b, 0x9d, 0xf7, 0xc5, 0x6d, 0x54,
	0x3e, 0xbd, 0x55, 0x41, 0x48, 0xe1, 0xa0, 0x0a, 0xe6, 0xcf, 0xe5, 0x0a, 0x08, 0x09, 0x8c, 0xaa,
	0x60, 0xfe, 0x5c, 0xae, 0x82, 0x24, 0xc5, 0x7e, 0x0d, 0xcc, 0x9e, 0xcb, 0x15, 0x10, 0x2a, 0x0f,
	0xaa, 0x60, 0xfe, 0x5c, 0xae, 0x80, 0x2e, 0xc3, 0x21, 0xaf, 0x7a, 0xae, 0xe0, 0xb2, 0x9a, 0x13,
	0x7f, 0x6c, 0x27, 0x64, 0x30, 0x92, 0x0b, 0x8f, 0xb1, 0xec, 0xaf, 0xef, 0x8f, 0xfb, 0xfc, 0x6c,
	0x5e, 0xb3, 0x02, 0x42, 0xcd, 0x87, 0x55, 0x30, 0xaf, 0x59, 0x01, 0xa1, 0xe6, 0xa8, 0x0a, 0xe6,
	0x35, 0xab, 0x20, 0x49, 0x71, 0x5c, 0x03, 0xb3, 0x9a, 0x15, 0x10, 0x6a, 0x4e, 0xaa, 0x60, 0x5e,
	0xb3, 0x02, 0xba, 0x0c, 0x4f, 0x64, 0xcd, 0x39, 0xd7, 0x65, 0xe6, 0x6d, 0xb8, 0x71, 0x02, 0x36,
	0xf4, 0xe2, 0x03, 0xb5, 0xf0, 0x57, 0xbc, 0xd3, 0xb3, 0x00, 0x6f, 0x78, 0xf1, 0x41, 0x51, 0xbc,
	0xd6, 0x80, 0x04, 0x8e, 0x74, 0x06, 0xa4, 0xa0, 0x35, 0x20, 0x8a, 0x54, 0x67, 0x40, 0x1c, 0x7a,
	0x83, 0xa4, 0xf8, 0x58, 0x6b, 0x90, 0x54, 0x6f, 0x40, 0x38, 0x5f, 0xea, 0x0c, 0x08, 0xe8, 0x26,
	0x2c, 0x4e, 0xab, 0x86, 0xcb, 0xf0, 0x4f, 0x78, 0x4a, 0x4b, 0x65, 0x41, 0x4d, 0x8a, 0xa3, 0x76,
	0xec, 0x7d, 0x29, 0x93, 0xfa, 0x69, 0x31, 0x02, 0x87, 0x7b, 0xd0, 0x52, 0x4a, 0x4a, 0x35, 0x20,
	0xa9, 0x9f, 0xe9, 0x8c, 0x52, 0x52, 0xaa, 0x01, 0x49, 0xfd, 0x5c, 0x67, 0x94, 0x92, 0x2a, 0x19,
	0x24, 0xc5, 0xbf, 0xd0, 0x1a, 0x7c, 0x75, 0xa5, 0x31, 0x20, 0xa9, 0x5f, 0x1a, 0x3a, 0x45, 0xac,
	0xae, 0x96, 0xeb, 0x8a, 0xcb, 0xf0, 0xaf, 0x8c, 0x22, 0xab, 0xc2, 0xe8, 0x32, 0xb3, 0x8d, 0xe6,
	0x7c, 0xfb, 0xd0, 0xb1, 0x5d, 0x79, 0xf3, 0xfe, 0xb5, 0xe8, 0x7a, 0xd6, 0x7f, 0xe1, 0x74, 0xc5,
	0x3d, 0xfb, 0x6d, 0x98, 0x9e, 0xfb, 0x93, 0xd1, 0xc8, 0x8e, 0x1d, 0x12, 0x70, 0xe8, 0x37, 0x86,
	0x7c, 0xd0, 0x7c, 0x3c, 0x19, 0x8d, 0x7a, 0x0e, 0x09, 0xca, 0xdc, 0x17, 0xa1, 0x27, 0xb8, 0xdf,
	0xaa, 0xdc, 0xd3, 0xd0, 0x2b, 0x38, 0xe5, 0x2b, 0x4e, 0x7c, 0xfc, 0xbb, 0x8c, 0xcb, 0xbf, 0x5d,
	0xb6, 0x56, 0x28, 0xb8, 0x30, 0x10, 0x3f, 0x3f, 0xf0, 0xbf, 0x37, 0xe4, 0x82, 0x3c, 0xe3, 0x77,
	0x03, 0x98, 0x00, 0xe2, 0x19, 0x7b, 0xc1, 0xb7, 0xf7, 0xbd, 0x11, 0x8d, 0xc3, 0x48, 0x54, 0xf4,
	0x87, 0xfc, 0x4b, 0xc8, 0xb3, 0xe2, 0xb1, 0xe2, 0x82, 0x82, 0xa9, 0x7d, 0xff, 0x31, 0xeb, 0x3b,
	0xc3, 0x8b, 0xbe, 0x3f, 0x41, 0x97, 0x7d, 0x3b, 0xa6, 0x23, 0xea, 0x24, 0xa2, 0xd0, 0x88, 0x04,
	0x8c, 0x16, 0xe5, 0xfe, 0xc9, 0x90, 0x77, 0xbc, 0x1e, 0x67, 0xa0, 0x68, 0x0b, 0x88, 0xac, 0xf2,
	0xf7, 0xe0, 0x0e, 0x20, 0x7d, 0xa1, 0x82, 0xf5, 0x67, 0x43, 0xde, 0x02, 0x84, 0xc5, 0x0d, 0xa0,
	0x1f, 0x20, 0x5c, 0xa1, 0x1d, 0x97, 0x3a, 0xe2, 0x4b, 0xfe, 0x45, 0x38, 0xcb, 0xaa, 0xf3, 0x08,
	0x5a, 0x41, 0xec, 0xc0, 0x1f, 0x0f, 0xaf, 0xab, 0x18, 0xe4, 0xaf, 0x86, 0xfc, 0xe7, 0xe9, 0x85,
	0x51, 0x31, 0x04, 0xff, 0x29, 0x04, 0xc9, 0x5f, 0x9c, 0x4d, 0x7c, 0xfc, 0xb7, 0x2c, 0x2d, 0x0e,
	0x86, 0x47, 0x71, 0x99, 0xcb, 0xa7, 0xc0, 0xdf, 0x55, 0x2e, 0x9b, 0x02, 0xfc, 0x55, 0x4c, 0x10,
	0xda, 0x5e, 0x30, 0xa4, 0xa9, 0x3d, 0x89, 0xe5, 0x7b, 0xa1, 0x7f, 0x64, 0x15, 0x3e, 0x0b, 0xb7,
	0xa0, 0xe5, 0x65, 0x2c, 0xde, 0x0b, 0xdd, 0x87, 0x0a, 0x83, 0xd0, 0x66, 0x61, 0x38, 0xac, 0x3a,
	0xff, 0x14, 0xce, 0x39, 0xff, 0x59, 0xf8, 0x24, 0x0c, 0x87, 0x25, 0x6f, 0x05, 0xcd, 0xb0, 0x68,
	0x1c, 0x27, 0x11, 0xfe, 0x97, 0x21, 0x36, 0x78, 0xc4, 0xa1, 0x6c, 0xf0, 0x82, 0x04, 0xff, 0x5b,
	0xec, 0x06, 0xc9, 0x43, 0xf3, 0x21, 0xdf, 0x5c, 0x81, 0x86, 0xff, 0x18, 0x5f, 0xb1, 0xbb, 0xe2,
	0x05, 0x49, 0xb1, 0xbb, 0xe2, 0x05, 0xc9, 0xc5, 0x35, 0xd4, 0x52, 0x36, 0x5d, 0xcc, 0x25, 0x34,
	0x7d, 0x40, 0x8f, 0xb1, 0x18, 0x18, 0x3e, 0x9a, 0xcb, 0xe8, 0xf5, 0x57, 0x64, 0x34, 0xa1, 0x72,
	0xb7, 0x49, 0x1c, 0x3c, 0x9c, 0xfa, 0xd0, 0xb8, 0xf8, 0x11, 0x9a, 0x2f, 0xbd, 0xdc, 0xff, 0x2a,
	0xf9, 0x94, 0x2a, 0xaf, 0xa1, 0x96, 0xf2, 0x9e, 0xfe, 0xff, 0x55, 0x95, 0x4a, 0x54, 0x75, 0x5e,
	0xa3, 0xce, 0x2b, 0xea, 0x6a, 0x07, 0xcd, 0x97, 0xb6, 0x67, 0xcc, 0x16, 0x3a, 0xbd, 0xf9, 0xf9,
	0xfa, 0xce, 0xf3, 0xed, 0xcd, 0xa5, 0xd7, 0x4c, 0x84, 0x66, 0x36, 0xb6, 0x9e, 0x6c, 0xf6, 0xfa,
	0x4b, 0xc6, 0xea, 0x23, 0xd4, 0x52, 0xf6, 0x56, 0xa0, 0xc9, 0x5a, 0x7f, 0xb6, 0xb1, 0xbb, 0xb3,
	0xf4, 0x1a, 0x38, 0xbd, 0xed, 0xdd, 0x3d, 0xce, 0xc1, 0xc1, 0xe3, 0xf5, 0x5e, 0x1f, 0x0e, 0xa6,
	0xcc, 0x05, 0x84, 0xf6, 0xb6, 0xfa, 0x5d, 0x7b, 0xd3, 0xb2, 0x76, 0xad, 0xa5, 0xe9, 0xd5, 0xcb,
	0x08, 0xad, 0x8f, 0xbd, 0x6c, 0x3f, 0xb0, 0xb2, 0x91, 0x77, 0xf7, 0x19, 0x7a, 0x9d, 0xef, 0x17,
	0x9a, 0x9b, 0x68, 0x71, 0x83, 0x24, 0x64, 0x2b, 0x48, 0x68, 0xe4, 0xb8, 0x30, 0x7d, 0xcd, 0x15,
	0xe5, 0x17, 0x54, 0x37, 0x15, 0x2f, 0xaa, 0xfb, 0x87, 0x45, 0xdf, 0x1d, 0xe3, 0xb6, 0x31, 0x98,
	0xe1, 0x3b, 0x92, 0xf7, 0xfe, 0x17, 0x00, 0x00, 0xff, 0xff, 0xcc, 0xb5, 0xa0, 0x24, 0xb2, 0x1c,
	0x00, 0x00,
}
